/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as components from "../models/components/index.js";
import { ClosedEnum } from "../types/enums.js";
import { HTTPClient } from "./http.js";
import { Logger } from "./logger.js";
import { RetryConfig } from "./retries.js";
import { Params, pathToFunc } from "./url.js";

/**
 * Contains the list of servers available to the SDK
 */
export const ServerList = [
  "https://galaxy.scalar.com",
  /**
   * Responds with your request data
   */
  "{protocol}://void.scalar.com/{path}",
] as const;

export const ServerProtocol = {
  Https: "https",
} as const;
export type ServerProtocol = ClosedEnum<typeof ServerProtocol>;

export type SDKOptions = {
  /**
   * The security details required to authenticate the SDK
   */
  security?:
    | components.Security
    | (() => Promise<components.Security>)
    | undefined;

  httpClient?: HTTPClient;
  /**
   * Allows overriding the default server used by the SDK
   */
  serverIdx?: number | undefined;
  /**
   * Sets the protocol variable for url substitution
   */
  protocol?: ServerProtocol | undefined;
  /**
   * Sets the path variable for url substitution
   */
  path?: string | undefined;
  /**
   * Allows overriding the default server URL used by the SDK
   */
  serverURL?: string | undefined;
  /**
   * Allows overriding the default user agent used by the SDK
   */
  userAgent?: string | undefined;
  /**
   * Allows overriding the default retry config used by the SDK
   */
  retryConfig?: RetryConfig;
  timeoutMs?: number;
  debugLogger?: Logger;
};

export function serverURLFromOptions(options: SDKOptions): URL | null {
  let serverURL = options.serverURL;

  const serverParams: Params[] = [
    {},
    {
      "protocol": options.protocol ?? "https",
      "path": options.path ?? "",
    },
  ];
  let params: Params = {};

  if (!serverURL) {
    const serverIdx = options.serverIdx ?? 0;
    if (serverIdx < 0 || serverIdx >= ServerList.length) {
      throw new Error(`Invalid server index ${serverIdx}`);
    }
    serverURL = ServerList[serverIdx] || "";
    params = serverParams[serverIdx] || {};
  }

  const u = pathToFunc(serverURL)(params);
  return new URL(u);
}

export const SDK_METADATA = {
  language: "typescript",
  openapiDocVersion: "1.0.0",
  sdkVersion: "1.0.0",
  genVersion: "2.634.2",
  userAgent:
    "speakeasy-sdk/typescript 1.0.0 2.634.2 1.0.0 @shariqnzr-gmail-com-team/scalar-galaxy-typescript",
} as const;
