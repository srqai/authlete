/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  authenticationCreateUserJson,
  CreateUserJsonAcceptEnum,
} from "../funcs/authenticationCreateUserJson.js";
import {
  authenticationCreateUserRaw,
  CreateUserRawAcceptEnum,
} from "../funcs/authenticationCreateUserRaw.js";
import {
  authenticationGetMe,
  GetMeAcceptEnum,
} from "../funcs/authenticationGetMe.js";
import {
  authenticationGetTokenJson,
  GetTokenJsonAcceptEnum,
} from "../funcs/authenticationGetTokenJson.js";
import {
  authenticationGetTokenRaw,
  GetTokenRawAcceptEnum,
} from "../funcs/authenticationGetTokenRaw.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { CreateUserJsonAcceptEnum } from "../funcs/authenticationCreateUserJson.js";

export { CreateUserRawAcceptEnum } from "../funcs/authenticationCreateUserRaw.js";

export { GetTokenJsonAcceptEnum } from "../funcs/authenticationGetTokenJson.js";

export { GetTokenRawAcceptEnum } from "../funcs/authenticationGetTokenRaw.js";

export { GetMeAcceptEnum } from "../funcs/authenticationGetMe.js";

export class Authentication extends ClientSDK {
  /**
   * Create a user
   *
   * @remarks
   * Time to create a user account, eh?
   */
  async createUserJson(
    request?: operations.CreateUserJsonRequestBody | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUserJsonAcceptEnum;
    },
  ): Promise<operations.CreateUserJsonResponse> {
    return unwrapAsync(authenticationCreateUserJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a user
   *
   * @remarks
   * Time to create a user account, eh?
   */
  async createUserRaw(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreateUserRawAcceptEnum;
    },
  ): Promise<operations.CreateUserRawResponse> {
    return unwrapAsync(authenticationCreateUserRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a token
   *
   * @remarks
   * Yeah, this is the boring security stuff. Just get your super secret token and move on.
   */
  async getTokenJson(
    request?: components.Credentials | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: GetTokenJsonAcceptEnum;
    },
  ): Promise<operations.GetTokenJsonResponse> {
    return unwrapAsync(authenticationGetTokenJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a token
   *
   * @remarks
   * Yeah, this is the boring security stuff. Just get your super secret token and move on.
   */
  async getTokenRaw(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & { acceptHeaderOverride?: GetTokenRawAcceptEnum },
  ): Promise<operations.GetTokenRawResponse> {
    return unwrapAsync(authenticationGetTokenRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Get authenticated user
   *
   * @remarks
   * Find yourself they say. Thatâ€™s what you can do here.
   */
  async getMe(
    options?: RequestOptions & { acceptHeaderOverride?: GetMeAcceptEnum },
  ): Promise<operations.GetMeResponse> {
    return unwrapAsync(authenticationGetMe(
      this,
      options,
    ));
  }
}
