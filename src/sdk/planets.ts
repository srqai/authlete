/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import {
  CreatePlanetJsonAcceptEnum,
  planetsCreatePlanetJson,
} from "../funcs/planetsCreatePlanetJson.js";
import {
  CreatePlanetRawAcceptEnum,
  planetsCreatePlanetRaw,
} from "../funcs/planetsCreatePlanetRaw.js";
import { planetsDeletePlanet } from "../funcs/planetsDeletePlanet.js";
import {
  GetAllDataAcceptEnum,
  planetsGetAllData,
} from "../funcs/planetsGetAllData.js";
import {
  GetPlanetAcceptEnum,
  planetsGetPlanet,
} from "../funcs/planetsGetPlanet.js";
import {
  planetsUpdatePlanetJson,
  UpdatePlanetJsonAcceptEnum,
} from "../funcs/planetsUpdatePlanetJson.js";
import {
  planetsUpdatePlanetRaw,
  UpdatePlanetRawAcceptEnum,
} from "../funcs/planetsUpdatePlanetRaw.js";
import {
  planetsUploadImage,
  UploadImageAcceptEnum,
} from "../funcs/planetsUploadImage.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export { GetAllDataAcceptEnum } from "../funcs/planetsGetAllData.js";

export { CreatePlanetJsonAcceptEnum } from "../funcs/planetsCreatePlanetJson.js";

export { CreatePlanetRawAcceptEnum } from "../funcs/planetsCreatePlanetRaw.js";

export { GetPlanetAcceptEnum } from "../funcs/planetsGetPlanet.js";

export { UpdatePlanetJsonAcceptEnum } from "../funcs/planetsUpdatePlanetJson.js";

export { UpdatePlanetRawAcceptEnum } from "../funcs/planetsUpdatePlanetRaw.js";

export { UploadImageAcceptEnum } from "../funcs/planetsUploadImage.js";

export class Planets extends ClientSDK {
  /**
   * Get all planets
   *
   * @remarks
   * It’s easy to say you know them all, but do you really? Retrieve all the planets and check whether you missed one.
   */
  async getAllData(
    request: operations.GetAllDataRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetAllDataAcceptEnum },
  ): Promise<operations.GetAllDataResponse> {
    return unwrapAsync(planetsGetAllData(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a planet
   *
   * @remarks
   * Time to play god and create a new planet. What do you think? Ah, don’t think too much. What could go wrong anyway?
   */
  async createPlanetJson(
    request?: components.PlanetInput | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreatePlanetJsonAcceptEnum;
    },
  ): Promise<operations.CreatePlanetJsonResponse> {
    return unwrapAsync(planetsCreatePlanetJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Create a planet
   *
   * @remarks
   * Time to play god and create a new planet. What do you think? Ah, don’t think too much. What could go wrong anyway?
   */
  async createPlanetRaw(
    request?:
      | ReadableStream<Uint8Array>
      | Blob
      | ArrayBuffer
      | Uint8Array
      | undefined,
    options?: RequestOptions & {
      acceptHeaderOverride?: CreatePlanetRawAcceptEnum;
    },
  ): Promise<operations.CreatePlanetRawResponse> {
    return unwrapAsync(planetsCreatePlanetRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Get a planet
   *
   * @remarks
   * You’ll better learn a little bit more about the planets. It might come in handy once space travel is available for everyone.
   */
  async getPlanet(
    request: operations.GetPlanetRequest,
    options?: RequestOptions & { acceptHeaderOverride?: GetPlanetAcceptEnum },
  ): Promise<operations.GetPlanetResponse> {
    return unwrapAsync(planetsGetPlanet(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a planet
   *
   * @remarks
   * Sometimes you make mistakes, that's fine. No worries, you can update all planets.
   */
  async updatePlanetJson(
    request: operations.UpdatePlanetJsonRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdatePlanetJsonAcceptEnum;
    },
  ): Promise<operations.UpdatePlanetJsonResponse> {
    return unwrapAsync(planetsUpdatePlanetJson(
      this,
      request,
      options,
    ));
  }

  /**
   * Update a planet
   *
   * @remarks
   * Sometimes you make mistakes, that's fine. No worries, you can update all planets.
   */
  async updatePlanetRaw(
    request: operations.UpdatePlanetRawRequest,
    options?: RequestOptions & {
      acceptHeaderOverride?: UpdatePlanetRawAcceptEnum;
    },
  ): Promise<operations.UpdatePlanetRawResponse> {
    return unwrapAsync(planetsUpdatePlanetRaw(
      this,
      request,
      options,
    ));
  }

  /**
   * Delete a planet
   *
   * @remarks
   * This endpoint was used to delete planets. Unfortunately, that caused a lot of trouble for planets with life. So, this endpoint is now deprecated and should not be used anymore.
   */
  async deletePlanet(
    request: operations.DeletePlanetRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(planetsDeletePlanet(
      this,
      request,
      options,
    ));
  }

  /**
   * Upload an image to a planet
   *
   * @remarks
   * Got a crazy good photo of a planet? Share it with the world!
   */
  async uploadImage(
    request: operations.UploadImageRequest,
    options?: RequestOptions & { acceptHeaderOverride?: UploadImageAcceptEnum },
  ): Promise<operations.UploadImageResponse> {
    return unwrapAsync(planetsUploadImage(
      this,
      request,
      options,
    ));
  }
}
