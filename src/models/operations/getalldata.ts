/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetAllDataRequest = {
  /**
   * The number of items to return
   */
  limit?: number | undefined;
  /**
   * The number of items to skip before starting to collect the result set
   */
  offset?: number | undefined;
};

export type GetAllDataMeta = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
  next?: string | null | undefined;
};

/**
 * A paginated resource
 */
export type GetAllDataPlanetsResponseBody = {
  data?: Array<components.Planet> | undefined;
  meta?: GetAllDataMeta | undefined;
};

export type Meta = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
  next?: string | null | undefined;
};

/**
 * A paginated resource
 */
export type GetAllDataResponseBody = {
  data?: Array<components.Planet> | undefined;
  meta?: Meta | undefined;
};

export type GetAllDataResponse = GetAllDataResponseBody | Uint8Array | string;

/** @internal */
export const GetAllDataRequest$inboundSchema: z.ZodType<
  GetAllDataRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
});

/** @internal */
export type GetAllDataRequest$Outbound = {
  limit: number;
  offset: number;
};

/** @internal */
export const GetAllDataRequest$outboundSchema: z.ZodType<
  GetAllDataRequest$Outbound,
  z.ZodTypeDef,
  GetAllDataRequest
> = z.object({
  limit: z.number().int().default(10),
  offset: z.number().int().default(0),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDataRequest$ {
  /** @deprecated use `GetAllDataRequest$inboundSchema` instead. */
  export const inboundSchema = GetAllDataRequest$inboundSchema;
  /** @deprecated use `GetAllDataRequest$outboundSchema` instead. */
  export const outboundSchema = GetAllDataRequest$outboundSchema;
  /** @deprecated use `GetAllDataRequest$Outbound` instead. */
  export type Outbound = GetAllDataRequest$Outbound;
}

export function getAllDataRequestToJSON(
  getAllDataRequest: GetAllDataRequest,
): string {
  return JSON.stringify(
    GetAllDataRequest$outboundSchema.parse(getAllDataRequest),
  );
}

export function getAllDataRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDataRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDataRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDataRequest' from JSON`,
  );
}

/** @internal */
export const GetAllDataMeta$inboundSchema: z.ZodType<
  GetAllDataMeta,
  z.ZodTypeDef,
  unknown
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  total: z.number().int().optional(),
  next: z.nullable(z.string()).optional(),
});

/** @internal */
export type GetAllDataMeta$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const GetAllDataMeta$outboundSchema: z.ZodType<
  GetAllDataMeta$Outbound,
  z.ZodTypeDef,
  GetAllDataMeta
> = z.object({
  limit: z.number().int().optional(),
  offset: z.number().int().optional(),
  total: z.number().int().optional(),
  next: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDataMeta$ {
  /** @deprecated use `GetAllDataMeta$inboundSchema` instead. */
  export const inboundSchema = GetAllDataMeta$inboundSchema;
  /** @deprecated use `GetAllDataMeta$outboundSchema` instead. */
  export const outboundSchema = GetAllDataMeta$outboundSchema;
  /** @deprecated use `GetAllDataMeta$Outbound` instead. */
  export type Outbound = GetAllDataMeta$Outbound;
}

export function getAllDataMetaToJSON(getAllDataMeta: GetAllDataMeta): string {
  return JSON.stringify(GetAllDataMeta$outboundSchema.parse(getAllDataMeta));
}

export function getAllDataMetaFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDataMeta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDataMeta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDataMeta' from JSON`,
  );
}

/** @internal */
export const GetAllDataPlanetsResponseBody$inboundSchema: z.ZodType<
  GetAllDataPlanetsResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(components.Planet$inboundSchema).optional(),
  meta: z.lazy(() => GetAllDataMeta$inboundSchema).optional(),
});

/** @internal */
export type GetAllDataPlanetsResponseBody$Outbound = {
  data?: Array<components.Planet$Outbound> | undefined;
  meta?: GetAllDataMeta$Outbound | undefined;
};

/** @internal */
export const GetAllDataPlanetsResponseBody$outboundSchema: z.ZodType<
  GetAllDataPlanetsResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllDataPlanetsResponseBody
> = z.object({
  data: z.array(components.Planet$outboundSchema).optional(),
  meta: z.lazy(() => GetAllDataMeta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDataPlanetsResponseBody$ {
  /** @deprecated use `GetAllDataPlanetsResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllDataPlanetsResponseBody$inboundSchema;
  /** @deprecated use `GetAllDataPlanetsResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllDataPlanetsResponseBody$outboundSchema;
  /** @deprecated use `GetAllDataPlanetsResponseBody$Outbound` instead. */
  export type Outbound = GetAllDataPlanetsResponseBody$Outbound;
}

export function getAllDataPlanetsResponseBodyToJSON(
  getAllDataPlanetsResponseBody: GetAllDataPlanetsResponseBody,
): string {
  return JSON.stringify(
    GetAllDataPlanetsResponseBody$outboundSchema.parse(
      getAllDataPlanetsResponseBody,
    ),
  );
}

export function getAllDataPlanetsResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDataPlanetsResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDataPlanetsResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDataPlanetsResponseBody' from JSON`,
  );
}

/** @internal */
export const Meta$inboundSchema: z.ZodType<Meta, z.ZodTypeDef, unknown> = z
  .object({
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
    total: z.number().int().optional(),
    next: z.nullable(z.string()).optional(),
  });

/** @internal */
export type Meta$Outbound = {
  limit?: number | undefined;
  offset?: number | undefined;
  total?: number | undefined;
  next?: string | null | undefined;
};

/** @internal */
export const Meta$outboundSchema: z.ZodType<Meta$Outbound, z.ZodTypeDef, Meta> =
  z.object({
    limit: z.number().int().optional(),
    offset: z.number().int().optional(),
    total: z.number().int().optional(),
    next: z.nullable(z.string()).optional(),
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Meta$ {
  /** @deprecated use `Meta$inboundSchema` instead. */
  export const inboundSchema = Meta$inboundSchema;
  /** @deprecated use `Meta$outboundSchema` instead. */
  export const outboundSchema = Meta$outboundSchema;
  /** @deprecated use `Meta$Outbound` instead. */
  export type Outbound = Meta$Outbound;
}

export function metaToJSON(meta: Meta): string {
  return JSON.stringify(Meta$outboundSchema.parse(meta));
}

export function metaFromJSON(
  jsonString: string,
): SafeParseResult<Meta, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Meta$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Meta' from JSON`,
  );
}

/** @internal */
export const GetAllDataResponseBody$inboundSchema: z.ZodType<
  GetAllDataResponseBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  data: z.array(components.Planet$inboundSchema).optional(),
  meta: z.lazy(() => Meta$inboundSchema).optional(),
});

/** @internal */
export type GetAllDataResponseBody$Outbound = {
  data?: Array<components.Planet$Outbound> | undefined;
  meta?: Meta$Outbound | undefined;
};

/** @internal */
export const GetAllDataResponseBody$outboundSchema: z.ZodType<
  GetAllDataResponseBody$Outbound,
  z.ZodTypeDef,
  GetAllDataResponseBody
> = z.object({
  data: z.array(components.Planet$outboundSchema).optional(),
  meta: z.lazy(() => Meta$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDataResponseBody$ {
  /** @deprecated use `GetAllDataResponseBody$inboundSchema` instead. */
  export const inboundSchema = GetAllDataResponseBody$inboundSchema;
  /** @deprecated use `GetAllDataResponseBody$outboundSchema` instead. */
  export const outboundSchema = GetAllDataResponseBody$outboundSchema;
  /** @deprecated use `GetAllDataResponseBody$Outbound` instead. */
  export type Outbound = GetAllDataResponseBody$Outbound;
}

export function getAllDataResponseBodyToJSON(
  getAllDataResponseBody: GetAllDataResponseBody,
): string {
  return JSON.stringify(
    GetAllDataResponseBody$outboundSchema.parse(getAllDataResponseBody),
  );
}

export function getAllDataResponseBodyFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDataResponseBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDataResponseBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDataResponseBody' from JSON`,
  );
}

/** @internal */
export const GetAllDataResponse$inboundSchema: z.ZodType<
  GetAllDataResponse,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.lazy(() => GetAllDataResponseBody$inboundSchema),
  b64$.zodInbound,
]);

/** @internal */
export type GetAllDataResponse$Outbound =
  | GetAllDataResponseBody$Outbound
  | Uint8Array;

/** @internal */
export const GetAllDataResponse$outboundSchema: z.ZodType<
  GetAllDataResponse$Outbound,
  z.ZodTypeDef,
  GetAllDataResponse
> = z.union([
  z.lazy(() => GetAllDataResponseBody$outboundSchema),
  b64$.zodOutbound,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllDataResponse$ {
  /** @deprecated use `GetAllDataResponse$inboundSchema` instead. */
  export const inboundSchema = GetAllDataResponse$inboundSchema;
  /** @deprecated use `GetAllDataResponse$outboundSchema` instead. */
  export const outboundSchema = GetAllDataResponse$outboundSchema;
  /** @deprecated use `GetAllDataResponse$Outbound` instead. */
  export type Outbound = GetAllDataResponse$Outbound;
}

export function getAllDataResponseToJSON(
  getAllDataResponse: GetAllDataResponse,
): string {
  return JSON.stringify(
    GetAllDataResponse$outboundSchema.parse(getAllDataResponse),
  );
}

export function getAllDataResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetAllDataResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllDataResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllDataResponse' from JSON`,
  );
}
