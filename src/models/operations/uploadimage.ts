/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { blobLikeSchema } from "../../types/blobs.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Image = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/**
 * Image to upload
 */
export type UploadImageRequestBody = {
  /**
   * The image file to upload
   */
  image?: Image | Blob | undefined;
};

export type UploadImageRequest = {
  /**
   * The ID of the planet to get
   */
  planetId: number;
  /**
   * Image to upload
   */
  requestBody?: UploadImageRequestBody | undefined;
};

export type UploadImageResponse =
  | components.ImageUploadedMessage
  | Uint8Array
  | string;

/** @internal */
export const Image$inboundSchema: z.ZodType<Image, z.ZodTypeDef, unknown> = z
  .object({
    fileName: z.string(),
    content: z.union([
      z.instanceof(ReadableStream<Uint8Array>),
      z.instanceof(Blob),
      z.instanceof(ArrayBuffer),
      z.instanceof(Uint8Array),
    ]),
  });

/** @internal */
export type Image$Outbound = {
  fileName: string;
  content: ReadableStream<Uint8Array> | Blob | ArrayBuffer | Uint8Array;
};

/** @internal */
export const Image$outboundSchema: z.ZodType<
  Image$Outbound,
  z.ZodTypeDef,
  Image
> = z.object({
  fileName: z.string(),
  content: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Image$ {
  /** @deprecated use `Image$inboundSchema` instead. */
  export const inboundSchema = Image$inboundSchema;
  /** @deprecated use `Image$outboundSchema` instead. */
  export const outboundSchema = Image$outboundSchema;
  /** @deprecated use `Image$Outbound` instead. */
  export type Outbound = Image$Outbound;
}

export function imageToJSON(image: Image): string {
  return JSON.stringify(Image$outboundSchema.parse(image));
}

export function imageFromJSON(
  jsonString: string,
): SafeParseResult<Image, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Image$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Image' from JSON`,
  );
}

/** @internal */
export const UploadImageRequestBody$inboundSchema: z.ZodType<
  UploadImageRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  image: z.lazy(() => Image$inboundSchema).optional(),
});

/** @internal */
export type UploadImageRequestBody$Outbound = {
  image?: Image$Outbound | Blob | undefined;
};

/** @internal */
export const UploadImageRequestBody$outboundSchema: z.ZodType<
  UploadImageRequestBody$Outbound,
  z.ZodTypeDef,
  UploadImageRequestBody
> = z.object({
  image: z.lazy(() => Image$outboundSchema).or(blobLikeSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadImageRequestBody$ {
  /** @deprecated use `UploadImageRequestBody$inboundSchema` instead. */
  export const inboundSchema = UploadImageRequestBody$inboundSchema;
  /** @deprecated use `UploadImageRequestBody$outboundSchema` instead. */
  export const outboundSchema = UploadImageRequestBody$outboundSchema;
  /** @deprecated use `UploadImageRequestBody$Outbound` instead. */
  export type Outbound = UploadImageRequestBody$Outbound;
}

export function uploadImageRequestBodyToJSON(
  uploadImageRequestBody: UploadImageRequestBody,
): string {
  return JSON.stringify(
    UploadImageRequestBody$outboundSchema.parse(uploadImageRequestBody),
  );
}

export function uploadImageRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<UploadImageRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadImageRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadImageRequestBody' from JSON`,
  );
}

/** @internal */
export const UploadImageRequest$inboundSchema: z.ZodType<
  UploadImageRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  planetId: z.number().int(),
  RequestBody: z.lazy(() => UploadImageRequestBody$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "RequestBody": "requestBody",
  });
});

/** @internal */
export type UploadImageRequest$Outbound = {
  planetId: number;
  RequestBody?: UploadImageRequestBody$Outbound | undefined;
};

/** @internal */
export const UploadImageRequest$outboundSchema: z.ZodType<
  UploadImageRequest$Outbound,
  z.ZodTypeDef,
  UploadImageRequest
> = z.object({
  planetId: z.number().int(),
  requestBody: z.lazy(() => UploadImageRequestBody$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    requestBody: "RequestBody",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadImageRequest$ {
  /** @deprecated use `UploadImageRequest$inboundSchema` instead. */
  export const inboundSchema = UploadImageRequest$inboundSchema;
  /** @deprecated use `UploadImageRequest$outboundSchema` instead. */
  export const outboundSchema = UploadImageRequest$outboundSchema;
  /** @deprecated use `UploadImageRequest$Outbound` instead. */
  export type Outbound = UploadImageRequest$Outbound;
}

export function uploadImageRequestToJSON(
  uploadImageRequest: UploadImageRequest,
): string {
  return JSON.stringify(
    UploadImageRequest$outboundSchema.parse(uploadImageRequest),
  );
}

export function uploadImageRequestFromJSON(
  jsonString: string,
): SafeParseResult<UploadImageRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadImageRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadImageRequest' from JSON`,
  );
}

/** @internal */
export const UploadImageResponse$inboundSchema: z.ZodType<
  UploadImageResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.ImageUploadedMessage$inboundSchema, b64$.zodInbound]);

/** @internal */
export type UploadImageResponse$Outbound =
  | components.ImageUploadedMessage$Outbound
  | Uint8Array;

/** @internal */
export const UploadImageResponse$outboundSchema: z.ZodType<
  UploadImageResponse$Outbound,
  z.ZodTypeDef,
  UploadImageResponse
> = z.union([components.ImageUploadedMessage$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UploadImageResponse$ {
  /** @deprecated use `UploadImageResponse$inboundSchema` instead. */
  export const inboundSchema = UploadImageResponse$inboundSchema;
  /** @deprecated use `UploadImageResponse$outboundSchema` instead. */
  export const outboundSchema = UploadImageResponse$outboundSchema;
  /** @deprecated use `UploadImageResponse$Outbound` instead. */
  export type Outbound = UploadImageResponse$Outbound;
}

export function uploadImageResponseToJSON(
  uploadImageResponse: UploadImageResponse,
): string {
  return JSON.stringify(
    UploadImageResponse$outboundSchema.parse(uploadImageResponse),
  );
}

export function uploadImageResponseFromJSON(
  jsonString: string,
): SafeParseResult<UploadImageResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UploadImageResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UploadImageResponse' from JSON`,
  );
}
