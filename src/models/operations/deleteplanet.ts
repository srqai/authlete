/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type DeletePlanetRequest = {
  /**
   * The ID of the planet to get
   */
  planetId: number;
};

/** @internal */
export const DeletePlanetRequest$inboundSchema: z.ZodType<
  DeletePlanetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  planetId: z.number().int(),
});

/** @internal */
export type DeletePlanetRequest$Outbound = {
  planetId: number;
};

/** @internal */
export const DeletePlanetRequest$outboundSchema: z.ZodType<
  DeletePlanetRequest$Outbound,
  z.ZodTypeDef,
  DeletePlanetRequest
> = z.object({
  planetId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace DeletePlanetRequest$ {
  /** @deprecated use `DeletePlanetRequest$inboundSchema` instead. */
  export const inboundSchema = DeletePlanetRequest$inboundSchema;
  /** @deprecated use `DeletePlanetRequest$outboundSchema` instead. */
  export const outboundSchema = DeletePlanetRequest$outboundSchema;
  /** @deprecated use `DeletePlanetRequest$Outbound` instead. */
  export type Outbound = DeletePlanetRequest$Outbound;
}

export function deletePlanetRequestToJSON(
  deletePlanetRequest: DeletePlanetRequest,
): string {
  return JSON.stringify(
    DeletePlanetRequest$outboundSchema.parse(deletePlanetRequest),
  );
}

export function deletePlanetRequestFromJSON(
  jsonString: string,
): SafeParseResult<DeletePlanetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => DeletePlanetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'DeletePlanetRequest' from JSON`,
  );
}
