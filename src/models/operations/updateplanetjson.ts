/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePlanetJsonRequest = {
  /**
   * The ID of the planet to get
   */
  planetId: number;
  /**
   * New information about the planet
   */
  planet?: components.PlanetInput | undefined;
};

export type UpdatePlanetJsonResponse = components.Planet | Uint8Array | string;

/** @internal */
export const UpdatePlanetJsonRequest$inboundSchema: z.ZodType<
  UpdatePlanetJsonRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  planetId: z.number().int(),
  Planet: components.PlanetInput$inboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    "Planet": "planet",
  });
});

/** @internal */
export type UpdatePlanetJsonRequest$Outbound = {
  planetId: number;
  Planet?: components.PlanetInput$Outbound | undefined;
};

/** @internal */
export const UpdatePlanetJsonRequest$outboundSchema: z.ZodType<
  UpdatePlanetJsonRequest$Outbound,
  z.ZodTypeDef,
  UpdatePlanetJsonRequest
> = z.object({
  planetId: z.number().int(),
  planet: components.PlanetInput$outboundSchema.optional(),
}).transform((v) => {
  return remap$(v, {
    planet: "Planet",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePlanetJsonRequest$ {
  /** @deprecated use `UpdatePlanetJsonRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePlanetJsonRequest$inboundSchema;
  /** @deprecated use `UpdatePlanetJsonRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePlanetJsonRequest$outboundSchema;
  /** @deprecated use `UpdatePlanetJsonRequest$Outbound` instead. */
  export type Outbound = UpdatePlanetJsonRequest$Outbound;
}

export function updatePlanetJsonRequestToJSON(
  updatePlanetJsonRequest: UpdatePlanetJsonRequest,
): string {
  return JSON.stringify(
    UpdatePlanetJsonRequest$outboundSchema.parse(updatePlanetJsonRequest),
  );
}

export function updatePlanetJsonRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePlanetJsonRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePlanetJsonRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePlanetJsonRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePlanetJsonResponse$inboundSchema: z.ZodType<
  UpdatePlanetJsonResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Planet$inboundSchema, b64$.zodInbound]);

/** @internal */
export type UpdatePlanetJsonResponse$Outbound =
  | components.Planet$Outbound
  | Uint8Array;

/** @internal */
export const UpdatePlanetJsonResponse$outboundSchema: z.ZodType<
  UpdatePlanetJsonResponse$Outbound,
  z.ZodTypeDef,
  UpdatePlanetJsonResponse
> = z.union([components.Planet$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePlanetJsonResponse$ {
  /** @deprecated use `UpdatePlanetJsonResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePlanetJsonResponse$inboundSchema;
  /** @deprecated use `UpdatePlanetJsonResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePlanetJsonResponse$outboundSchema;
  /** @deprecated use `UpdatePlanetJsonResponse$Outbound` instead. */
  export type Outbound = UpdatePlanetJsonResponse$Outbound;
}

export function updatePlanetJsonResponseToJSON(
  updatePlanetJsonResponse: UpdatePlanetJsonResponse,
): string {
  return JSON.stringify(
    UpdatePlanetJsonResponse$outboundSchema.parse(updatePlanetJsonResponse),
  );
}

export function updatePlanetJsonResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePlanetJsonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePlanetJsonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePlanetJsonResponse' from JSON`,
  );
}
