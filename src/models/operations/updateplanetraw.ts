/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UpdatePlanetRawRequest = {
  /**
   * The ID of the planet to get
   */
  planetId: number;
  /**
   * New information about the planet
   */
  planet?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
};

export type UpdatePlanetRawResponse = components.Planet | Uint8Array | string;

/** @internal */
export const UpdatePlanetRawRequest$inboundSchema: z.ZodType<
  UpdatePlanetRawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  planetId: z.number().int(),
  Planet: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    "Planet": "planet",
  });
});

/** @internal */
export type UpdatePlanetRawRequest$Outbound = {
  planetId: number;
  Planet?:
    | ReadableStream<Uint8Array>
    | Blob
    | ArrayBuffer
    | Uint8Array
    | undefined;
};

/** @internal */
export const UpdatePlanetRawRequest$outboundSchema: z.ZodType<
  UpdatePlanetRawRequest$Outbound,
  z.ZodTypeDef,
  UpdatePlanetRawRequest
> = z.object({
  planetId: z.number().int(),
  planet: z.union([
    z.instanceof(ReadableStream<Uint8Array>),
    z.instanceof(Blob),
    z.instanceof(ArrayBuffer),
    z.instanceof(Uint8Array),
  ]).optional(),
}).transform((v) => {
  return remap$(v, {
    planet: "Planet",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePlanetRawRequest$ {
  /** @deprecated use `UpdatePlanetRawRequest$inboundSchema` instead. */
  export const inboundSchema = UpdatePlanetRawRequest$inboundSchema;
  /** @deprecated use `UpdatePlanetRawRequest$outboundSchema` instead. */
  export const outboundSchema = UpdatePlanetRawRequest$outboundSchema;
  /** @deprecated use `UpdatePlanetRawRequest$Outbound` instead. */
  export type Outbound = UpdatePlanetRawRequest$Outbound;
}

export function updatePlanetRawRequestToJSON(
  updatePlanetRawRequest: UpdatePlanetRawRequest,
): string {
  return JSON.stringify(
    UpdatePlanetRawRequest$outboundSchema.parse(updatePlanetRawRequest),
  );
}

export function updatePlanetRawRequestFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePlanetRawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePlanetRawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePlanetRawRequest' from JSON`,
  );
}

/** @internal */
export const UpdatePlanetRawResponse$inboundSchema: z.ZodType<
  UpdatePlanetRawResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Planet$inboundSchema, b64$.zodInbound]);

/** @internal */
export type UpdatePlanetRawResponse$Outbound =
  | components.Planet$Outbound
  | Uint8Array;

/** @internal */
export const UpdatePlanetRawResponse$outboundSchema: z.ZodType<
  UpdatePlanetRawResponse$Outbound,
  z.ZodTypeDef,
  UpdatePlanetRawResponse
> = z.union([components.Planet$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdatePlanetRawResponse$ {
  /** @deprecated use `UpdatePlanetRawResponse$inboundSchema` instead. */
  export const inboundSchema = UpdatePlanetRawResponse$inboundSchema;
  /** @deprecated use `UpdatePlanetRawResponse$outboundSchema` instead. */
  export const outboundSchema = UpdatePlanetRawResponse$outboundSchema;
  /** @deprecated use `UpdatePlanetRawResponse$Outbound` instead. */
  export type Outbound = UpdatePlanetRawResponse$Outbound;
}

export function updatePlanetRawResponseToJSON(
  updatePlanetRawResponse: UpdatePlanetRawResponse,
): string {
  return JSON.stringify(
    UpdatePlanetRawResponse$outboundSchema.parse(updatePlanetRawResponse),
  );
}

export function updatePlanetRawResponseFromJSON(
  jsonString: string,
): SafeParseResult<UpdatePlanetRawResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UpdatePlanetRawResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UpdatePlanetRawResponse' from JSON`,
  );
}
