/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Credentials to authenticate a user
 */
export type CreateUserJsonRequestBody = {
  name?: string | undefined;
  email: string;
  password: string;
};

export type CreateUserJsonResponse = components.User | Uint8Array | string;

/** @internal */
export const CreateUserJsonRequestBody$inboundSchema: z.ZodType<
  CreateUserJsonRequestBody,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type CreateUserJsonRequestBody$Outbound = {
  name?: string | undefined;
  email: string;
  password: string;
};

/** @internal */
export const CreateUserJsonRequestBody$outboundSchema: z.ZodType<
  CreateUserJsonRequestBody$Outbound,
  z.ZodTypeDef,
  CreateUserJsonRequestBody
> = z.object({
  name: z.string().optional(),
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserJsonRequestBody$ {
  /** @deprecated use `CreateUserJsonRequestBody$inboundSchema` instead. */
  export const inboundSchema = CreateUserJsonRequestBody$inboundSchema;
  /** @deprecated use `CreateUserJsonRequestBody$outboundSchema` instead. */
  export const outboundSchema = CreateUserJsonRequestBody$outboundSchema;
  /** @deprecated use `CreateUserJsonRequestBody$Outbound` instead. */
  export type Outbound = CreateUserJsonRequestBody$Outbound;
}

export function createUserJsonRequestBodyToJSON(
  createUserJsonRequestBody: CreateUserJsonRequestBody,
): string {
  return JSON.stringify(
    CreateUserJsonRequestBody$outboundSchema.parse(createUserJsonRequestBody),
  );
}

export function createUserJsonRequestBodyFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserJsonRequestBody, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserJsonRequestBody$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserJsonRequestBody' from JSON`,
  );
}

/** @internal */
export const CreateUserJsonResponse$inboundSchema: z.ZodType<
  CreateUserJsonResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.User$inboundSchema, b64$.zodInbound]);

/** @internal */
export type CreateUserJsonResponse$Outbound =
  | components.User$Outbound
  | Uint8Array;

/** @internal */
export const CreateUserJsonResponse$outboundSchema: z.ZodType<
  CreateUserJsonResponse$Outbound,
  z.ZodTypeDef,
  CreateUserJsonResponse
> = z.union([components.User$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateUserJsonResponse$ {
  /** @deprecated use `CreateUserJsonResponse$inboundSchema` instead. */
  export const inboundSchema = CreateUserJsonResponse$inboundSchema;
  /** @deprecated use `CreateUserJsonResponse$outboundSchema` instead. */
  export const outboundSchema = CreateUserJsonResponse$outboundSchema;
  /** @deprecated use `CreateUserJsonResponse$Outbound` instead. */
  export type Outbound = CreateUserJsonResponse$Outbound;
}

export function createUserJsonResponseToJSON(
  createUserJsonResponse: CreateUserJsonResponse,
): string {
  return JSON.stringify(
    CreateUserJsonResponse$outboundSchema.parse(createUserJsonResponse),
  );
}

export function createUserJsonResponseFromJSON(
  jsonString: string,
): SafeParseResult<CreateUserJsonResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateUserJsonResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateUserJsonResponse' from JSON`,
  );
}
