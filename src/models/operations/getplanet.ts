/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import * as components from "../components/index.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type GetPlanetRequest = {
  /**
   * The ID of the planet to get
   */
  planetId: number;
};

export type GetPlanetResponse = components.Planet | Uint8Array | string;

/** @internal */
export const GetPlanetRequest$inboundSchema: z.ZodType<
  GetPlanetRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  planetId: z.number().int(),
});

/** @internal */
export type GetPlanetRequest$Outbound = {
  planetId: number;
};

/** @internal */
export const GetPlanetRequest$outboundSchema: z.ZodType<
  GetPlanetRequest$Outbound,
  z.ZodTypeDef,
  GetPlanetRequest
> = z.object({
  planetId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPlanetRequest$ {
  /** @deprecated use `GetPlanetRequest$inboundSchema` instead. */
  export const inboundSchema = GetPlanetRequest$inboundSchema;
  /** @deprecated use `GetPlanetRequest$outboundSchema` instead. */
  export const outboundSchema = GetPlanetRequest$outboundSchema;
  /** @deprecated use `GetPlanetRequest$Outbound` instead. */
  export type Outbound = GetPlanetRequest$Outbound;
}

export function getPlanetRequestToJSON(
  getPlanetRequest: GetPlanetRequest,
): string {
  return JSON.stringify(
    GetPlanetRequest$outboundSchema.parse(getPlanetRequest),
  );
}

export function getPlanetRequestFromJSON(
  jsonString: string,
): SafeParseResult<GetPlanetRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPlanetRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPlanetRequest' from JSON`,
  );
}

/** @internal */
export const GetPlanetResponse$inboundSchema: z.ZodType<
  GetPlanetResponse,
  z.ZodTypeDef,
  unknown
> = z.union([components.Planet$inboundSchema, b64$.zodInbound]);

/** @internal */
export type GetPlanetResponse$Outbound =
  | components.Planet$Outbound
  | Uint8Array;

/** @internal */
export const GetPlanetResponse$outboundSchema: z.ZodType<
  GetPlanetResponse$Outbound,
  z.ZodTypeDef,
  GetPlanetResponse
> = z.union([components.Planet$outboundSchema, b64$.zodOutbound]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetPlanetResponse$ {
  /** @deprecated use `GetPlanetResponse$inboundSchema` instead. */
  export const inboundSchema = GetPlanetResponse$inboundSchema;
  /** @deprecated use `GetPlanetResponse$outboundSchema` instead. */
  export const outboundSchema = GetPlanetResponse$outboundSchema;
  /** @deprecated use `GetPlanetResponse$Outbound` instead. */
  export type Outbound = GetPlanetResponse$Outbound;
}

export function getPlanetResponseToJSON(
  getPlanetResponse: GetPlanetResponse,
): string {
  return JSON.stringify(
    GetPlanetResponse$outboundSchema.parse(getPlanetResponse),
  );
}

export function getPlanetResponseFromJSON(
  jsonString: string,
): SafeParseResult<GetPlanetResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetPlanetResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetPlanetResponse' from JSON`,
  );
}
