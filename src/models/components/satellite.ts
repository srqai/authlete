/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A natural satellite (moon) orbiting a planet
 */
export type Satellite = {
  name: string;
  /**
   * Diameter in kilometers
   */
  diameter?: number | undefined;
};

/** @internal */
export const Satellite$inboundSchema: z.ZodType<
  Satellite,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  diameter: z.number().optional(),
});

/** @internal */
export type Satellite$Outbound = {
  name: string;
  diameter?: number | undefined;
};

/** @internal */
export const Satellite$outboundSchema: z.ZodType<
  Satellite$Outbound,
  z.ZodTypeDef,
  Satellite
> = z.object({
  name: z.string(),
  diameter: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Satellite$ {
  /** @deprecated use `Satellite$inboundSchema` instead. */
  export const inboundSchema = Satellite$inboundSchema;
  /** @deprecated use `Satellite$outboundSchema` instead. */
  export const outboundSchema = Satellite$outboundSchema;
  /** @deprecated use `Satellite$Outbound` instead. */
  export type Outbound = Satellite$Outbound;
}

export function satelliteToJSON(satellite: Satellite): string {
  return JSON.stringify(Satellite$outboundSchema.parse(satellite));
}

export function satelliteFromJSON(
  jsonString: string,
): SafeParseResult<Satellite, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Satellite$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Satellite' from JSON`,
  );
}
