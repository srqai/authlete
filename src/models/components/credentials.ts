/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Credentials to authenticate a user
 */
export type Credentials = {
  email: string;
  password: string;
};

/** @internal */
export const Credentials$inboundSchema: z.ZodType<
  Credentials,
  z.ZodTypeDef,
  unknown
> = z.object({
  email: z.string(),
  password: z.string(),
});

/** @internal */
export type Credentials$Outbound = {
  email: string;
  password: string;
};

/** @internal */
export const Credentials$outboundSchema: z.ZodType<
  Credentials$Outbound,
  z.ZodTypeDef,
  Credentials
> = z.object({
  email: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Credentials$ {
  /** @deprecated use `Credentials$inboundSchema` instead. */
  export const inboundSchema = Credentials$inboundSchema;
  /** @deprecated use `Credentials$outboundSchema` instead. */
  export const outboundSchema = Credentials$outboundSchema;
  /** @deprecated use `Credentials$Outbound` instead. */
  export type Outbound = Credentials$Outbound;
}

export function credentialsToJSON(credentials: Credentials): string {
  return JSON.stringify(Credentials$outboundSchema.parse(credentials));
}

export function credentialsFromJSON(
  jsonString: string,
): SafeParseResult<Credentials, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Credentials$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Credentials' from JSON`,
  );
}
