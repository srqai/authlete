/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SchemeBasicAuth = {
  username: string;
  password: string;
};

/** @internal */
export const SchemeBasicAuth$inboundSchema: z.ZodType<
  SchemeBasicAuth,
  z.ZodTypeDef,
  unknown
> = z.object({
  username: z.string(),
  password: z.string(),
});

/** @internal */
export type SchemeBasicAuth$Outbound = {
  username: string;
  password: string;
};

/** @internal */
export const SchemeBasicAuth$outboundSchema: z.ZodType<
  SchemeBasicAuth$Outbound,
  z.ZodTypeDef,
  SchemeBasicAuth
> = z.object({
  username: z.string(),
  password: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SchemeBasicAuth$ {
  /** @deprecated use `SchemeBasicAuth$inboundSchema` instead. */
  export const inboundSchema = SchemeBasicAuth$inboundSchema;
  /** @deprecated use `SchemeBasicAuth$outboundSchema` instead. */
  export const outboundSchema = SchemeBasicAuth$outboundSchema;
  /** @deprecated use `SchemeBasicAuth$Outbound` instead. */
  export type Outbound = SchemeBasicAuth$Outbound;
}

export function schemeBasicAuthToJSON(
  schemeBasicAuth: SchemeBasicAuth,
): string {
  return JSON.stringify(SchemeBasicAuth$outboundSchema.parse(schemeBasicAuth));
}

export function schemeBasicAuthFromJSON(
  jsonString: string,
): SafeParseResult<SchemeBasicAuth, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SchemeBasicAuth$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SchemeBasicAuth' from JSON`,
  );
}
