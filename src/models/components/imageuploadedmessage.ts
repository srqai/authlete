/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Message about an image upload
 */
export type ImageUploadedMessage = {
  message?: string | undefined;
  /**
   * The URL where the uploaded image can be accessed
   */
  imageUrl?: string | undefined;
  /**
   * Timestamp when the image was uploaded
   */
  uploadedAt?: Date | undefined;
  /**
   * Size of the uploaded image in bytes
   */
  fileSize?: number | undefined;
  /**
   * The content type of the uploaded image
   */
  mimeType?: string | undefined;
};

/** @internal */
export const ImageUploadedMessage$inboundSchema: z.ZodType<
  ImageUploadedMessage,
  z.ZodTypeDef,
  unknown
> = z.object({
  message: z.string().optional(),
  imageUrl: z.string().optional(),
  uploadedAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  fileSize: z.number().int().optional(),
  mimeType: z.string().optional(),
});

/** @internal */
export type ImageUploadedMessage$Outbound = {
  message?: string | undefined;
  imageUrl?: string | undefined;
  uploadedAt?: string | undefined;
  fileSize?: number | undefined;
  mimeType?: string | undefined;
};

/** @internal */
export const ImageUploadedMessage$outboundSchema: z.ZodType<
  ImageUploadedMessage$Outbound,
  z.ZodTypeDef,
  ImageUploadedMessage
> = z.object({
  message: z.string().optional(),
  imageUrl: z.string().optional(),
  uploadedAt: z.date().transform(v => v.toISOString()).optional(),
  fileSize: z.number().int().optional(),
  mimeType: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ImageUploadedMessage$ {
  /** @deprecated use `ImageUploadedMessage$inboundSchema` instead. */
  export const inboundSchema = ImageUploadedMessage$inboundSchema;
  /** @deprecated use `ImageUploadedMessage$outboundSchema` instead. */
  export const outboundSchema = ImageUploadedMessage$outboundSchema;
  /** @deprecated use `ImageUploadedMessage$Outbound` instead. */
  export type Outbound = ImageUploadedMessage$Outbound;
}

export function imageUploadedMessageToJSON(
  imageUploadedMessage: ImageUploadedMessage,
): string {
  return JSON.stringify(
    ImageUploadedMessage$outboundSchema.parse(imageUploadedMessage),
  );
}

export function imageUploadedMessageFromJSON(
  jsonString: string,
): SafeParseResult<ImageUploadedMessage, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ImageUploadedMessage$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ImageUploadedMessage' from JSON`,
  );
}
