/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SchemeBasicAuth,
  SchemeBasicAuth$inboundSchema,
  SchemeBasicAuth$Outbound,
  SchemeBasicAuth$outboundSchema,
} from "./schemebasicauth.js";
import {
  SchemeOAuth2,
  SchemeOAuth2$inboundSchema,
  SchemeOAuth2$Outbound,
  SchemeOAuth2$outboundSchema,
} from "./schemeoauth2.js";

export type Security = {
  bearerAuth?: string | undefined;
  basicAuth?: SchemeBasicAuth | undefined;
  apiKeyQuery?: string | undefined;
  apiKeyHeader?: string | undefined;
  apiKeyCookie?: string | undefined;
  oAuth2?: SchemeOAuth2 | undefined;
  openIdConnect?: string | undefined;
};

/** @internal */
export const Security$inboundSchema: z.ZodType<
  Security,
  z.ZodTypeDef,
  unknown
> = z.object({
  bearerAuth: z.string().optional(),
  basicAuth: SchemeBasicAuth$inboundSchema.optional(),
  apiKeyQuery: z.string().optional(),
  apiKeyHeader: z.string().optional(),
  apiKeyCookie: z.string().optional(),
  oAuth2: SchemeOAuth2$inboundSchema.optional(),
  openIdConnect: z.string().optional(),
});

/** @internal */
export type Security$Outbound = {
  bearerAuth?: string | undefined;
  basicAuth?: SchemeBasicAuth$Outbound | undefined;
  apiKeyQuery?: string | undefined;
  apiKeyHeader?: string | undefined;
  apiKeyCookie?: string | undefined;
  oAuth2?: SchemeOAuth2$Outbound | undefined;
  openIdConnect?: string | undefined;
};

/** @internal */
export const Security$outboundSchema: z.ZodType<
  Security$Outbound,
  z.ZodTypeDef,
  Security
> = z.object({
  bearerAuth: z.string().optional(),
  basicAuth: SchemeBasicAuth$outboundSchema.optional(),
  apiKeyQuery: z.string().optional(),
  apiKeyHeader: z.string().optional(),
  apiKeyCookie: z.string().optional(),
  oAuth2: SchemeOAuth2$outboundSchema.optional(),
  openIdConnect: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Security$ {
  /** @deprecated use `Security$inboundSchema` instead. */
  export const inboundSchema = Security$inboundSchema;
  /** @deprecated use `Security$outboundSchema` instead. */
  export const outboundSchema = Security$outboundSchema;
  /** @deprecated use `Security$Outbound` instead. */
  export type Outbound = Security$Outbound;
}

export function securityToJSON(security: Security): string {
  return JSON.stringify(Security$outboundSchema.parse(security));
}

export function securityFromJSON(
  jsonString: string,
): SafeParseResult<Security, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Security$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Security' from JSON`,
  );
}
