/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Satellite,
  Satellite$inboundSchema,
  Satellite$Outbound,
  Satellite$outboundSchema,
} from "./satellite.js";
import {
  User,
  User$inboundSchema,
  User$Outbound,
  User$outboundSchema,
} from "./user.js";
import {
  UserInput,
  UserInput$inboundSchema,
  UserInput$Outbound,
  UserInput$outboundSchema,
} from "./userinput.js";

export const Type = {
  Terrestrial: "terrestrial",
  GasGiant: "gas_giant",
  IceGiant: "ice_giant",
  Dwarf: "dwarf",
  SuperEarth: "super_earth",
} as const;
export type Type = ClosedEnum<typeof Type>;

export type Temperature = {
  /**
   * Minimum temperature in Kelvin
   */
  min?: number | undefined;
  /**
   * Maximum temperature in Kelvin
   */
  max?: number | undefined;
  /**
   * Average temperature in Kelvin
   */
  average?: number | undefined;
};

export type PhysicalProperties = {
  /**
   * Mass in Earth masses
   */
  mass?: number | undefined;
  /**
   * Radius in Earth radii
   */
  radius?: number | undefined;
  /**
   * Surface gravity in Earth g
   */
  gravity?: number | undefined;
  temperature?: Temperature | undefined;
};

export type Atmosphere = {
  compound?: string | undefined;
  percentage?: number | undefined;
};

/**
 * A planet in the Scalar Galaxy
 */
export type Planet = {
  id: number;
  name: string;
  description?: string | null | undefined;
  type?: Type | undefined;
  /**
   * A score from 0 to 1 indicating potential habitability
   */
  habitabilityIndex?: number | undefined;
  physicalProperties?: PhysicalProperties | undefined;
  /**
   * Atmospheric composition
   */
  atmosphere?: Array<Atmosphere> | undefined;
  discoveredAt?: Date | undefined;
  image?: string | null | undefined;
  satellites?: Array<Satellite> | undefined;
  /**
   * A user
   */
  creator?: User | undefined;
  tags?: Array<string> | undefined;
  lastUpdated?: Date | undefined;
  /**
   * URL to receive notifications about this planet
   */
  callbackUrl?: string | undefined;
};

/**
 * A planet in the Scalar Galaxy
 */
export type PlanetInput = {
  name: string;
  description?: string | null | undefined;
  type?: Type | undefined;
  /**
   * A score from 0 to 1 indicating potential habitability
   */
  habitabilityIndex?: number | undefined;
  physicalProperties?: PhysicalProperties | undefined;
  /**
   * Atmospheric composition
   */
  atmosphere?: Array<Atmosphere> | undefined;
  discoveredAt?: Date | undefined;
  image?: string | null | undefined;
  satellites?: Array<Satellite> | undefined;
  /**
   * A user
   */
  creator?: UserInput | undefined;
  tags?: Array<string> | undefined;
  /**
   * URL to receive notifications about this planet
   */
  callbackUrl?: string | undefined;
};

/** @internal */
export const Type$inboundSchema: z.ZodNativeEnum<typeof Type> = z.nativeEnum(
  Type,
);

/** @internal */
export const Type$outboundSchema: z.ZodNativeEnum<typeof Type> =
  Type$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Type$ {
  /** @deprecated use `Type$inboundSchema` instead. */
  export const inboundSchema = Type$inboundSchema;
  /** @deprecated use `Type$outboundSchema` instead. */
  export const outboundSchema = Type$outboundSchema;
}

/** @internal */
export const Temperature$inboundSchema: z.ZodType<
  Temperature,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  average: z.number().optional(),
});

/** @internal */
export type Temperature$Outbound = {
  min?: number | undefined;
  max?: number | undefined;
  average?: number | undefined;
};

/** @internal */
export const Temperature$outboundSchema: z.ZodType<
  Temperature$Outbound,
  z.ZodTypeDef,
  Temperature
> = z.object({
  min: z.number().optional(),
  max: z.number().optional(),
  average: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Temperature$ {
  /** @deprecated use `Temperature$inboundSchema` instead. */
  export const inboundSchema = Temperature$inboundSchema;
  /** @deprecated use `Temperature$outboundSchema` instead. */
  export const outboundSchema = Temperature$outboundSchema;
  /** @deprecated use `Temperature$Outbound` instead. */
  export type Outbound = Temperature$Outbound;
}

export function temperatureToJSON(temperature: Temperature): string {
  return JSON.stringify(Temperature$outboundSchema.parse(temperature));
}

export function temperatureFromJSON(
  jsonString: string,
): SafeParseResult<Temperature, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Temperature$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Temperature' from JSON`,
  );
}

/** @internal */
export const PhysicalProperties$inboundSchema: z.ZodType<
  PhysicalProperties,
  z.ZodTypeDef,
  unknown
> = z.object({
  mass: z.number().optional(),
  radius: z.number().optional(),
  gravity: z.number().optional(),
  temperature: z.lazy(() => Temperature$inboundSchema).optional(),
});

/** @internal */
export type PhysicalProperties$Outbound = {
  mass?: number | undefined;
  radius?: number | undefined;
  gravity?: number | undefined;
  temperature?: Temperature$Outbound | undefined;
};

/** @internal */
export const PhysicalProperties$outboundSchema: z.ZodType<
  PhysicalProperties$Outbound,
  z.ZodTypeDef,
  PhysicalProperties
> = z.object({
  mass: z.number().optional(),
  radius: z.number().optional(),
  gravity: z.number().optional(),
  temperature: z.lazy(() => Temperature$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PhysicalProperties$ {
  /** @deprecated use `PhysicalProperties$inboundSchema` instead. */
  export const inboundSchema = PhysicalProperties$inboundSchema;
  /** @deprecated use `PhysicalProperties$outboundSchema` instead. */
  export const outboundSchema = PhysicalProperties$outboundSchema;
  /** @deprecated use `PhysicalProperties$Outbound` instead. */
  export type Outbound = PhysicalProperties$Outbound;
}

export function physicalPropertiesToJSON(
  physicalProperties: PhysicalProperties,
): string {
  return JSON.stringify(
    PhysicalProperties$outboundSchema.parse(physicalProperties),
  );
}

export function physicalPropertiesFromJSON(
  jsonString: string,
): SafeParseResult<PhysicalProperties, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PhysicalProperties$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PhysicalProperties' from JSON`,
  );
}

/** @internal */
export const Atmosphere$inboundSchema: z.ZodType<
  Atmosphere,
  z.ZodTypeDef,
  unknown
> = z.object({
  compound: z.string().optional(),
  percentage: z.number().optional(),
});

/** @internal */
export type Atmosphere$Outbound = {
  compound?: string | undefined;
  percentage?: number | undefined;
};

/** @internal */
export const Atmosphere$outboundSchema: z.ZodType<
  Atmosphere$Outbound,
  z.ZodTypeDef,
  Atmosphere
> = z.object({
  compound: z.string().optional(),
  percentage: z.number().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Atmosphere$ {
  /** @deprecated use `Atmosphere$inboundSchema` instead. */
  export const inboundSchema = Atmosphere$inboundSchema;
  /** @deprecated use `Atmosphere$outboundSchema` instead. */
  export const outboundSchema = Atmosphere$outboundSchema;
  /** @deprecated use `Atmosphere$Outbound` instead. */
  export type Outbound = Atmosphere$Outbound;
}

export function atmosphereToJSON(atmosphere: Atmosphere): string {
  return JSON.stringify(Atmosphere$outboundSchema.parse(atmosphere));
}

export function atmosphereFromJSON(
  jsonString: string,
): SafeParseResult<Atmosphere, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Atmosphere$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Atmosphere' from JSON`,
  );
}

/** @internal */
export const Planet$inboundSchema: z.ZodType<Planet, z.ZodTypeDef, unknown> = z
  .object({
    id: z.number().int(),
    name: z.string(),
    description: z.nullable(z.string()).optional(),
    type: Type$inboundSchema.optional(),
    habitabilityIndex: z.number().optional(),
    physicalProperties: z.lazy(() => PhysicalProperties$inboundSchema)
      .optional(),
    atmosphere: z.array(z.lazy(() => Atmosphere$inboundSchema)).optional(),
    discoveredAt: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    image: z.nullable(z.string()).optional(),
    satellites: z.array(Satellite$inboundSchema).optional(),
    creator: User$inboundSchema.optional(),
    tags: z.array(z.string()).optional(),
    lastUpdated: z.string().datetime({ offset: true }).transform(v =>
      new Date(v)
    ).optional(),
    callbackUrl: z.string().optional(),
  });

/** @internal */
export type Planet$Outbound = {
  id: number;
  name: string;
  description?: string | null | undefined;
  type?: string | undefined;
  habitabilityIndex?: number | undefined;
  physicalProperties?: PhysicalProperties$Outbound | undefined;
  atmosphere?: Array<Atmosphere$Outbound> | undefined;
  discoveredAt?: string | undefined;
  image?: string | null | undefined;
  satellites?: Array<Satellite$Outbound> | undefined;
  creator?: User$Outbound | undefined;
  tags?: Array<string> | undefined;
  lastUpdated?: string | undefined;
  callbackUrl?: string | undefined;
};

/** @internal */
export const Planet$outboundSchema: z.ZodType<
  Planet$Outbound,
  z.ZodTypeDef,
  Planet
> = z.object({
  id: z.number().int(),
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  type: Type$outboundSchema.optional(),
  habitabilityIndex: z.number().optional(),
  physicalProperties: z.lazy(() => PhysicalProperties$outboundSchema)
    .optional(),
  atmosphere: z.array(z.lazy(() => Atmosphere$outboundSchema)).optional(),
  discoveredAt: z.date().transform(v => v.toISOString()).optional(),
  image: z.nullable(z.string()).optional(),
  satellites: z.array(Satellite$outboundSchema).optional(),
  creator: User$outboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  lastUpdated: z.date().transform(v => v.toISOString()).optional(),
  callbackUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Planet$ {
  /** @deprecated use `Planet$inboundSchema` instead. */
  export const inboundSchema = Planet$inboundSchema;
  /** @deprecated use `Planet$outboundSchema` instead. */
  export const outboundSchema = Planet$outboundSchema;
  /** @deprecated use `Planet$Outbound` instead. */
  export type Outbound = Planet$Outbound;
}

export function planetToJSON(planet: Planet): string {
  return JSON.stringify(Planet$outboundSchema.parse(planet));
}

export function planetFromJSON(
  jsonString: string,
): SafeParseResult<Planet, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Planet$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Planet' from JSON`,
  );
}

/** @internal */
export const PlanetInput$inboundSchema: z.ZodType<
  PlanetInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  type: Type$inboundSchema.optional(),
  habitabilityIndex: z.number().optional(),
  physicalProperties: z.lazy(() => PhysicalProperties$inboundSchema).optional(),
  atmosphere: z.array(z.lazy(() => Atmosphere$inboundSchema)).optional(),
  discoveredAt: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ).optional(),
  image: z.nullable(z.string()).optional(),
  satellites: z.array(Satellite$inboundSchema).optional(),
  creator: UserInput$inboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  callbackUrl: z.string().optional(),
});

/** @internal */
export type PlanetInput$Outbound = {
  name: string;
  description?: string | null | undefined;
  type?: string | undefined;
  habitabilityIndex?: number | undefined;
  physicalProperties?: PhysicalProperties$Outbound | undefined;
  atmosphere?: Array<Atmosphere$Outbound> | undefined;
  discoveredAt?: string | undefined;
  image?: string | null | undefined;
  satellites?: Array<Satellite$Outbound> | undefined;
  creator?: UserInput$Outbound | undefined;
  tags?: Array<string> | undefined;
  callbackUrl?: string | undefined;
};

/** @internal */
export const PlanetInput$outboundSchema: z.ZodType<
  PlanetInput$Outbound,
  z.ZodTypeDef,
  PlanetInput
> = z.object({
  name: z.string(),
  description: z.nullable(z.string()).optional(),
  type: Type$outboundSchema.optional(),
  habitabilityIndex: z.number().optional(),
  physicalProperties: z.lazy(() => PhysicalProperties$outboundSchema)
    .optional(),
  atmosphere: z.array(z.lazy(() => Atmosphere$outboundSchema)).optional(),
  discoveredAt: z.date().transform(v => v.toISOString()).optional(),
  image: z.nullable(z.string()).optional(),
  satellites: z.array(Satellite$outboundSchema).optional(),
  creator: UserInput$outboundSchema.optional(),
  tags: z.array(z.string()).optional(),
  callbackUrl: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlanetInput$ {
  /** @deprecated use `PlanetInput$inboundSchema` instead. */
  export const inboundSchema = PlanetInput$inboundSchema;
  /** @deprecated use `PlanetInput$outboundSchema` instead. */
  export const outboundSchema = PlanetInput$outboundSchema;
  /** @deprecated use `PlanetInput$Outbound` instead. */
  export type Outbound = PlanetInput$Outbound;
}

export function planetInputToJSON(planetInput: PlanetInput): string {
  return JSON.stringify(PlanetInput$outboundSchema.parse(planetInput));
}

export function planetInputFromJSON(
  jsonString: string,
): SafeParseResult<PlanetInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlanetInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlanetInput' from JSON`,
  );
}
