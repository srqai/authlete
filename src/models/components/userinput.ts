/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * A user
 */
export type UserInput = {
  name?: string | undefined;
};

/** @internal */
export const UserInput$inboundSchema: z.ZodType<
  UserInput,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string().optional(),
});

/** @internal */
export type UserInput$Outbound = {
  name?: string | undefined;
};

/** @internal */
export const UserInput$outboundSchema: z.ZodType<
  UserInput$Outbound,
  z.ZodTypeDef,
  UserInput
> = z.object({
  name: z.string().optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserInput$ {
  /** @deprecated use `UserInput$inboundSchema` instead. */
  export const inboundSchema = UserInput$inboundSchema;
  /** @deprecated use `UserInput$outboundSchema` instead. */
  export const outboundSchema = UserInput$outboundSchema;
  /** @deprecated use `UserInput$Outbound` instead. */
  export type Outbound = UserInput$Outbound;
}

export function userInputToJSON(userInput: UserInput): string {
  return JSON.stringify(UserInput$outboundSchema.parse(userInput));
}

export function userInputFromJSON(
  jsonString: string,
): SafeParseResult<UserInput, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserInput$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserInput' from JSON`,
  );
}
