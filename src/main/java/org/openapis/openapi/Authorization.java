/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiFormRequest;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiFormRequestBody;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiFormRequestBuilder;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiFormResponse;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiRequest;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiRequestBody;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiRequestBuilder;
import org.openapis.openapi.models.operations.AuthAuthorizationIssueApiResponse;
import org.openapis.openapi.models.operations.GetApiServiceIdAuthAuthorizationTicketInfoRequest;
import org.openapis.openapi.models.operations.GetApiServiceIdAuthAuthorizationTicketInfoRequestBuilder;
import org.openapis.openapi.models.operations.GetApiServiceIdAuthAuthorizationTicketInfoResponse;
import org.openapis.openapi.models.operations.PushedAuthReqApiFormRequest;
import org.openapis.openapi.models.operations.PushedAuthReqApiFormRequestBody;
import org.openapis.openapi.models.operations.PushedAuthReqApiFormRequestBuilder;
import org.openapis.openapi.models.operations.PushedAuthReqApiFormResponse;
import org.openapis.openapi.models.operations.PushedAuthReqApiRequest;
import org.openapis.openapi.models.operations.PushedAuthReqApiRequestBody;
import org.openapis.openapi.models.operations.PushedAuthReqApiRequestBuilder;
import org.openapis.openapi.models.operations.PushedAuthReqApiResponse;
import org.openapis.openapi.operations.AuthAuthorizationIssueApiFormOperation;
import org.openapis.openapi.operations.AuthAuthorizationIssueApiOperation;
import org.openapis.openapi.operations.GetApiServiceIdAuthAuthorizationTicketInfoOperation;
import org.openapis.openapi.operations.PushedAuthReqApiFormOperation;
import org.openapis.openapi.operations.PushedAuthReqApiOperation;


public class Authorization {
    private final SDKConfiguration sdkConfiguration;

    Authorization(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthAuthorizationIssueApiRequestBuilder issue() {
        return new AuthAuthorizationIssueApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationIssueApiResponse issue(@Nonnull String serviceId, @Nonnull AuthAuthorizationIssueApiRequestBody requestBody) throws Exception {
        return issue(serviceId, requestBody, null);
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationIssueApiResponse issue(
            @Nonnull String serviceId, @Nonnull AuthAuthorizationIssueApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthAuthorizationIssueApiRequest request = new AuthAuthorizationIssueApiRequest(serviceId, requestBody);
        RequestOperation<AuthAuthorizationIssueApiRequest, AuthAuthorizationIssueApiResponse> operation
              = new AuthAuthorizationIssueApiOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthAuthorizationIssueApiFormRequestBuilder issueForm() {
        return new AuthAuthorizationIssueApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationIssueApiFormResponse issueForm(@Nonnull String serviceId, @Nonnull AuthAuthorizationIssueApiFormRequestBody requestBody) throws Exception {
        return issueForm(serviceId, requestBody, null);
    }

    /**
     * Issue Authorization Response
     * 
     * <p>This API parses request parameters of an authorization request and returns necessary data for the
     * authorization server implementation to process the authorization request further.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of
     * the service in order to generate a successful response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called
     * and the meaning of request parameters. See [ISSUE] in `NO_INTERACTION`.
     * 
     * <p>The response from `/auth/authorization/issue` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first
     * because it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps
     * described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of "action" is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request"
     * and the content type should be `application/json` although OAuth 2.0 specification does not mention
     * the format of the error response.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used as
     * the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application
     * should be "302 Found" with `Location` header.
     * 
     * <p>The value of `responseContent` is a redirect URI which contains (1) an authorization code, an ID
     * token and/or an access token (on success) or (2) an error code (on failure), so it can be used as
     * the value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application should
     * be "200 OK" with an HTML which triggers redirection by JavaScript. This happens when the authorization
     * request from the client contains `response_mode=form_post` request parameter.
     * 
     * <p>The value of `responseContent` is an HTML which satisfies the requirements of `response_mode=form_post`,
     * so it can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationIssueApiFormResponse issueForm(
            @Nonnull String serviceId, @Nonnull AuthAuthorizationIssueApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthAuthorizationIssueApiFormRequest request = new AuthAuthorizationIssueApiFormRequest(serviceId, requestBody);
        RequestOperation<AuthAuthorizationIssueApiFormRequest, AuthAuthorizationIssueApiFormResponse> operation
              = new AuthAuthorizationIssueApiFormOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @return The call builder
     */
    public PushedAuthReqApiRequestBuilder processPushedRequest() {
        return new PushedAuthReqApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PushedAuthReqApiResponse processPushedRequest(@Nonnull String serviceId, @Nonnull PushedAuthReqApiRequestBody requestBody) throws Exception {
        return processPushedRequest(serviceId, requestBody, null);
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PushedAuthReqApiResponse processPushedRequest(
            @Nonnull String serviceId, @Nonnull PushedAuthReqApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        PushedAuthReqApiRequest request = new PushedAuthReqApiRequest(serviceId, requestBody);
        RequestOperation<PushedAuthReqApiRequest, PushedAuthReqApiResponse> operation
              = new PushedAuthReqApiOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @return The call builder
     */
    public PushedAuthReqApiFormRequestBuilder processPushedRequestForm() {
        return new PushedAuthReqApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PushedAuthReqApiFormResponse processPushedRequestForm(@Nonnull String serviceId, @Nonnull PushedAuthReqApiFormRequestBody requestBody) throws Exception {
        return processPushedRequestForm(serviceId, requestBody, null);
    }

    /**
     * Process Pushed Authorization Request
     * 
     * <p>This API creates a pushed request authorization. It authenticates the client and creates a authorization_uri to be returned by the authorization server.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PushedAuthReqApiFormResponse processPushedRequestForm(
            @Nonnull String serviceId, @Nonnull PushedAuthReqApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        PushedAuthReqApiFormRequest request = new PushedAuthReqApiFormRequest(serviceId, requestBody);
        RequestOperation<PushedAuthReqApiFormRequest, PushedAuthReqApiFormResponse> operation
              = new PushedAuthReqApiFormOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Get Ticket Information
     * 
     * @return The call builder
     */
    public GetApiServiceIdAuthAuthorizationTicketInfoRequestBuilder getTicketInfo() {
        return new GetApiServiceIdAuthAuthorizationTicketInfoRequestBuilder(sdkConfiguration);
    }

    /**
     * Get Ticket Information
     * 
     * @param serviceId 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetApiServiceIdAuthAuthorizationTicketInfoResponse getTicketInfo(@Nonnull String serviceId) throws Exception {
        return getTicketInfo(serviceId, null);
    }

    /**
     * Get Ticket Information
     * 
     * @param serviceId 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetApiServiceIdAuthAuthorizationTicketInfoResponse getTicketInfo(@Nonnull String serviceId, @Nullable String serverURL) throws Exception {
        GetApiServiceIdAuthAuthorizationTicketInfoRequest request = new GetApiServiceIdAuthAuthorizationTicketInfoRequest(serviceId);
        RequestOperation<GetApiServiceIdAuthAuthorizationTicketInfoRequest, GetApiServiceIdAuthAuthorizationTicketInfoResponse> operation
              = new GetApiServiceIdAuthAuthorizationTicketInfoOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
