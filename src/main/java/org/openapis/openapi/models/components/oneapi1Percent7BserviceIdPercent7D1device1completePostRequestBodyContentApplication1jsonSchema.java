/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema {
    /**
     * A user code.
     */
    @SpeakeasyMetadata("form:name=userCode")
    private String userCode;

    /**
     * The result of the end-user authentication and authorization. One of the following. Details are
     * described in the description.
     */
    @SpeakeasyMetadata("form:name=result")
    private 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result;

    /**
     * The subject (= unique identifier) of the end-user.
     */
    @SpeakeasyMetadata("form:name=subject")
    private String subject;

    /**
     * The value of the sub claim that should be used in the ID token.
     */
    @SpeakeasyMetadata("form:name=sub")
    private String sub;

    /**
     * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
     */
    @SpeakeasyMetadata("form:name=authTime")
    private Long authTime;

    /**
     * The reference of the authentication context class which the end-user authentication satisfied.
     */
    @SpeakeasyMetadata("form:name=acr")
    private String acr;

    /**
     * Additional claims which will be embedded in the ID token.
     */
    @SpeakeasyMetadata("form:name=claims")
    private String claims;

    /**
     * The extra properties associated with the access token.
     */
    @SpeakeasyMetadata("form:name=properties,json")
    private List<Property> properties;

    /**
     * Scopes to replace the scopes specified in the original device authorization request with.
     * When nothing is specified for this parameter, replacement is not performed.
     */
    @SpeakeasyMetadata("form:name=scopes")
    private List<String> scopes;

    /**
     * The description of the error. If this optional request parameter is given, its value is used as
     * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
     * To comply with the specification strictly, the description must not include characters outside
     * the set `%x20-21 / %x23-5B / %x5D-7E`.
     */
    @SpeakeasyMetadata("form:name=errorDescription")
    private String errorDescription;

    /**
     * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
     * property in the response to the client.
     */
    @SpeakeasyMetadata("form:name=errorUri")
    private String errorUri;

    /**
     * JSON that represents additional JWS header parameters for ID tokens.
     */
    @SpeakeasyMetadata("form:name=idtHeaderParams")
    private String idtHeaderParams;

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    @SpeakeasyMetadata("form:name=consentedClaims")
    private List<String> consentedClaims;

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    @SpeakeasyMetadata("form:name=jwtAtClaims")
    private String jwtAtClaims;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String userCode,
            @Nonnull 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result,
            @Nonnull String subject,
            @Nullable String sub,
            @Nullable Long authTime,
            @Nullable String acr,
            @Nullable String claims,
            @Nullable List<Property> properties,
            @Nullable List<String> scopes,
            @Nullable String errorDescription,
            @Nullable String errorUri,
            @Nullable String idtHeaderParams,
            @Nullable List<String> consentedClaims,
            @Nullable String jwtAtClaims) {
        this.userCode = Optional.ofNullable(userCode)
            .orElseThrow(() -> new IllegalArgumentException("userCode cannot be null"));
        this.result = Optional.ofNullable(result)
            .orElseThrow(() -> new IllegalArgumentException("result cannot be null"));
        this.subject = Optional.ofNullable(subject)
            .orElseThrow(() -> new IllegalArgumentException("subject cannot be null"));
        this.sub = sub;
        this.authTime = authTime;
        this.acr = acr;
        this.claims = claims;
        this.properties = properties;
        this.scopes = scopes;
        this.errorDescription = errorDescription;
        this.errorUri = errorUri;
        this.idtHeaderParams = idtHeaderParams;
        this.consentedClaims = consentedClaims;
        this.jwtAtClaims = jwtAtClaims;
    }
    
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String userCode,
            @Nonnull 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result,
            @Nonnull String subject) {
        this(userCode, result, subject,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * A user code.
     */
    public String userCode() {
        return this.userCode;
    }

    /**
     * The result of the end-user authentication and authorization. One of the following. Details are
     * described in the description.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result() {
        return this.result;
    }

    /**
     * The subject (= unique identifier) of the end-user.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * The value of the sub claim that should be used in the ID token.
     */
    public Optional<String> sub() {
        return Optional.ofNullable(this.sub);
    }

    /**
     * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
     */
    public Optional<Long> authTime() {
        return Optional.ofNullable(this.authTime);
    }

    /**
     * The reference of the authentication context class which the end-user authentication satisfied.
     */
    public Optional<String> acr() {
        return Optional.ofNullable(this.acr);
    }

    /**
     * Additional claims which will be embedded in the ID token.
     */
    public Optional<String> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * The extra properties associated with the access token.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Scopes to replace the scopes specified in the original device authorization request with.
     * When nothing is specified for this parameter, replacement is not performed.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The description of the error. If this optional request parameter is given, its value is used as
     * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
     * To comply with the specification strictly, the description must not include characters outside
     * the set `%x20-21 / %x23-5B / %x5D-7E`.
     */
    public Optional<String> errorDescription() {
        return Optional.ofNullable(this.errorDescription);
    }

    /**
     * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
     * property in the response to the client.
     */
    public Optional<String> errorUri() {
        return Optional.ofNullable(this.errorUri);
    }

    /**
     * JSON that represents additional JWS header parameters for ID tokens.
     */
    public Optional<String> idtHeaderParams() {
        return Optional.ofNullable(this.idtHeaderParams);
    }

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public Optional<List<String>> consentedClaims() {
        return Optional.ofNullable(this.consentedClaims);
    }

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public Optional<String> jwtAtClaims() {
        return Optional.ofNullable(this.jwtAtClaims);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A user code.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withUserCode(@Nonnull String userCode) {
        this.userCode = Utils.checkNotNull(userCode, "userCode");
        return this;
    }


    /**
     * The result of the end-user authentication and authorization. One of the following. Details are
     * described in the description.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withResult(@Nonnull 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result) {
        this.result = Utils.checkNotNull(result, "result");
        return this;
    }


    /**
     * The subject (= unique identifier) of the end-user.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withSubject(@Nonnull String subject) {
        this.subject = Utils.checkNotNull(subject, "subject");
        return this;
    }


    /**
     * The value of the sub claim that should be used in the ID token.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withSub(@Nullable String sub) {
        this.sub = sub;
        return this;
    }


    /**
     * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withAuthTime(@Nullable Long authTime) {
        this.authTime = authTime;
        return this;
    }


    /**
     * The reference of the authentication context class which the end-user authentication satisfied.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withAcr(@Nullable String acr) {
        this.acr = acr;
        return this;
    }


    /**
     * Additional claims which will be embedded in the ID token.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withClaims(@Nullable String claims) {
        this.claims = claims;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * Scopes to replace the scopes specified in the original device authorization request with.
     * When nothing is specified for this parameter, replacement is not performed.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The description of the error. If this optional request parameter is given, its value is used as
     * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
     * To comply with the specification strictly, the description must not include characters outside
     * the set `%x20-21 / %x23-5B / %x5D-7E`.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withErrorDescription(@Nullable String errorDescription) {
        this.errorDescription = errorDescription;
        return this;
    }


    /**
     * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
     * property in the response to the client.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withErrorUri(@Nullable String errorUri) {
        this.errorUri = errorUri;
        return this;
    }


    /**
     * JSON that represents additional JWS header parameters for ID tokens.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withIdtHeaderParams(@Nullable String idtHeaderParams) {
        this.idtHeaderParams = idtHeaderParams;
        return this;
    }


    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withConsentedClaims(@Nullable List<String> consentedClaims) {
        this.consentedClaims = consentedClaims;
        return this;
    }


    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema withJwtAtClaims(@Nullable String jwtAtClaims) {
        this.jwtAtClaims = jwtAtClaims;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.userCode, other.userCode) &&
            Utils.enhancedDeepEquals(this.result, other.result) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.authTime, other.authTime) &&
            Utils.enhancedDeepEquals(this.acr, other.acr) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.errorDescription, other.errorDescription) &&
            Utils.enhancedDeepEquals(this.errorUri, other.errorUri) &&
            Utils.enhancedDeepEquals(this.idtHeaderParams, other.idtHeaderParams) &&
            Utils.enhancedDeepEquals(this.consentedClaims, other.consentedClaims) &&
            Utils.enhancedDeepEquals(this.jwtAtClaims, other.jwtAtClaims);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            userCode, result, subject,
            sub, authTime, acr,
            claims, properties, scopes,
            errorDescription, errorUri, idtHeaderParams,
            consentedClaims, jwtAtClaims);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema.class,
                "userCode", userCode,
                "result", result,
                "subject", subject,
                "sub", sub,
                "authTime", authTime,
                "acr", acr,
                "claims", claims,
                "properties", properties,
                "scopes", scopes,
                "errorDescription", errorDescription,
                "errorUri", errorUri,
                "idtHeaderParams", idtHeaderParams,
                "consentedClaims", consentedClaims,
                "jwtAtClaims", jwtAtClaims);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String userCode;

        private 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result;

        private String subject;

        private String sub;

        private Long authTime;

        private String acr;

        private String claims;

        private List<Property> properties;

        private List<String> scopes;

        private String errorDescription;

        private String errorUri;

        private String idtHeaderParams;

        private List<String> consentedClaims;

        private String jwtAtClaims;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A user code.
         */
        public Builder userCode(@Nonnull String userCode) {
            this.userCode = Utils.checkNotNull(userCode, "userCode");
            return this;
        }

        /**
         * The result of the end-user authentication and authorization. One of the following. Details are
         * described in the description.
         */
        public Builder result(@Nonnull 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchemaResult result) {
            this.result = Utils.checkNotNull(result, "result");
            return this;
        }

        /**
         * The subject (= unique identifier) of the end-user.
         */
        public Builder subject(@Nonnull String subject) {
            this.subject = Utils.checkNotNull(subject, "subject");
            return this;
        }

        /**
         * The value of the sub claim that should be used in the ID token.
         */
        public Builder sub(@Nullable String sub) {
            this.sub = sub;
            return this;
        }

        /**
         * The time at which the end-user was authenticated. Its value is the number of seconds from `1970-01-01`.
         */
        public Builder authTime(@Nullable Long authTime) {
            this.authTime = authTime;
            return this;
        }

        /**
         * The reference of the authentication context class which the end-user authentication satisfied.
         */
        public Builder acr(@Nullable String acr) {
            this.acr = acr;
            return this;
        }

        /**
         * Additional claims which will be embedded in the ID token.
         */
        public Builder claims(@Nullable String claims) {
            this.claims = claims;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * Scopes to replace the scopes specified in the original device authorization request with.
         * When nothing is specified for this parameter, replacement is not performed.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The description of the error. If this optional request parameter is given, its value is used as
         * the value of the `error_description` property, but it is used only when the result is not `AUTHORIZED`.
         * To comply with the specification strictly, the description must not include characters outside
         * the set `%x20-21 / %x23-5B / %x5D-7E`.
         */
        public Builder errorDescription(@Nullable String errorDescription) {
            this.errorDescription = errorDescription;
            return this;
        }

        /**
         * The URI of a document which describes the error in detail. This corresponds to the `error_uri`
         * property in the response to the client.
         */
        public Builder errorUri(@Nullable String errorUri) {
            this.errorUri = errorUri;
            return this;
        }

        /**
         * JSON that represents additional JWS header parameters for ID tokens.
         */
        public Builder idtHeaderParams(@Nullable String idtHeaderParams) {
            this.idtHeaderParams = idtHeaderParams;
            return this;
        }

        /**
         * the claims that the user has consented for the client application
         * to know.
         */
        public Builder consentedClaims(@Nullable List<String> consentedClaims) {
            this.consentedClaims = consentedClaims;
            return this;
        }

        /**
         * Additional claims that are added to the payload part of the JWT access token.
         */
        public Builder jwtAtClaims(@Nullable String jwtAtClaims) {
            this.jwtAtClaims = jwtAtClaims;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1device1completePostRequestBodyContentApplication1jsonSchema(
                userCode, result, subject,
                sub, authTime, acr,
                claims, properties, scopes,
                errorDescription, errorUri, idtHeaderParams,
                consentedClaims, jwtAtClaims);
        }

    }
}
