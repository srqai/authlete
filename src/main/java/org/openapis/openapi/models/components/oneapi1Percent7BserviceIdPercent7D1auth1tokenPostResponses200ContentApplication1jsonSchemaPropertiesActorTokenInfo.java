/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo {
    /**
     * The client id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The alias of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * Flag specifying if the alias was used to identify the client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * the resource owner unique id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The scopes granted on the token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * time which the token expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Long expiresAt;

    /**
     * Extra properties associated with the token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<Property> properties;

    /**
     * The array of the resources of the token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetailsElement authorizationDetails;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo(
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("expiresAt") @Nullable Long expiresAt,
            @JsonProperty("properties") @Nullable List<Property> properties,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetailsElement authorizationDetails,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed) {
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.subject = subject;
        this.scopes = scopes;
        this.expiresAt = expiresAt;
        this.properties = properties;
        this.resources = resources;
        this.authorizationDetails = authorizationDetails;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The client id.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The alias of the client.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * Flag specifying if the alias was used to identify the client
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * the resource owner unique id
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The scopes granted on the token
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * time which the token expires.
     */
    public Optional<Long> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * Extra properties associated with the token
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The array of the resources of the token.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    public Optional<AuthorizationDetailsElement> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The client id.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The alias of the client.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * Flag specifying if the alias was used to identify the client
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * the resource owner unique id
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The scopes granted on the token
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * time which the token expires.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withExpiresAt(@Nullable Long expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }


    /**
     * Extra properties associated with the token
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The array of the resources of the token.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withAuthorizationDetails(@Nullable AuthorizationDetailsElement authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo other = (1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo) o;
        return 
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientId, clientIdAlias, clientIdAliasUsed,
            subject, scopes, expiresAt,
            properties, resources, authorizationDetails,
            clientEntityId, clientEntityIdUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo.class,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "subject", subject,
                "scopes", scopes,
                "expiresAt", expiresAt,
                "properties", properties,
                "resources", resources,
                "authorizationDetails", authorizationDetails,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String subject;

        private List<String> scopes;

        private Long expiresAt;

        private List<Property> properties;

        private List<String> resources;

        private AuthorizationDetailsElement authorizationDetails;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The client id.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The alias of the client.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * Flag specifying if the alias was used to identify the client
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * the resource owner unique id
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The scopes granted on the token
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * time which the token expires.
         */
        public Builder expiresAt(@Nullable Long expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Extra properties associated with the token
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The array of the resources of the token.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        public Builder authorizationDetails(@Nullable AuthorizationDetailsElement authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo(
                clientId, clientIdAlias, clientIdAliasUsed,
                subject, scopes, expiresAt,
                properties, resources, authorizationDetails,
                clientEntityId, clientEntityIdUsed);
        }

    }
}
