/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.HasSecurity;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class Security implements HasSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=oauth2,name=Authorization")
    private String authlete;


    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private String bearer;

    @JsonCreator
    public Security(
            @Nullable String authlete,
            @Nullable String bearer) {
        this.authlete = authlete;
        this.bearer = bearer;
    }
    
    public Security() {
        this(null, null);
    }

    public Optional<String> authlete() {
        return Optional.ofNullable(this.authlete);
    }

    public Optional<String> bearer() {
        return Optional.ofNullable(this.bearer);
    }

    public static Builder builder() {
        return new Builder();
    }


    public Security withAuthlete(@Nullable String authlete) {
        this.authlete = authlete;
        return this;
    }


    public Security withBearer(@Nullable String bearer) {
        this.bearer = bearer;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Utils.enhancedDeepEquals(this.authlete, other.authlete) &&
            Utils.enhancedDeepEquals(this.bearer, other.bearer);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            authlete, bearer);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "authlete", authlete,
                "bearer", bearer);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String authlete;

        private String bearer;

        private Builder() {
          // force use of static builder() method
        }

        public Builder authlete(@Nullable String authlete) {
            this.authlete = authlete;
            return this;
        }

        public Builder bearer(@Nullable String bearer) {
            this.bearer = bearer;
            return this;
        }

        public Security build() {
            return new Security(
                authlete, bearer);
        }

    }
}
