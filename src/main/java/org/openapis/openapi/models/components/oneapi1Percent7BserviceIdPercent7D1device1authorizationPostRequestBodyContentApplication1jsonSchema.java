/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema {
    /**
     * Parameters of a device authorization request which are the request parameters that the device
     * authorization endpoint of the authorization server implementation received from the client application.
     * 
     * <p>The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
     * of the request from the client application.
     */
    @SpeakeasyMetadata("form:name=parameters")
    private String parameters;

    /**
     * The client ID extracted from Authorization header of the device authorization request from the
     * client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * `Authentication` as a means of client authentication, and the request from the client application
     * contained its client ID in `Authorization` header, the value should be extracted and set to this
     * parameter.
     */
    @SpeakeasyMetadata("form:name=clientId")
    private String clientId;

    /**
     * The client secret extracted from `Authorization` header of the device authorization request from
     * the client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * Authentication as a means of client authentication, and the request from the client application
     * contained its client secret in `Authorization` header, the value should be extracted and set to
     * this parameter.
     */
    @SpeakeasyMetadata("form:name=clientSecret")
    private String clientSecret;

    /**
     * The client certificate used in the TLS connection between the client application and the device
     * authorization endpoint of the authorization server.
     */
    @SpeakeasyMetadata("form:name=clientCertificate")
    private String clientCertificate;

    /**
     * The client certificate path presented by the client during client authentication. Each element
     * is a string in PEM format.
     */
    @SpeakeasyMetadata("form:name=clientCertificatePath")
    private String clientCertificatePath;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String parameters,
            @Nullable String clientId,
            @Nullable String clientSecret,
            @Nullable String clientCertificate,
            @Nullable String clientCertificatePath) {
        this.parameters = Optional.ofNullable(parameters)
            .orElseThrow(() -> new IllegalArgumentException("parameters cannot be null"));
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.clientCertificate = clientCertificate;
        this.clientCertificatePath = clientCertificatePath;
    }
    
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String parameters) {
        this(parameters, null, null,
            null, null);
    }

    /**
     * Parameters of a device authorization request which are the request parameters that the device
     * authorization endpoint of the authorization server implementation received from the client application.
     * 
     * <p>The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
     * of the request from the client application.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * The client ID extracted from Authorization header of the device authorization request from the
     * client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * `Authentication` as a means of client authentication, and the request from the client application
     * contained its client ID in `Authorization` header, the value should be extracted and set to this
     * parameter.
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret extracted from `Authorization` header of the device authorization request from
     * the client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * Authentication as a means of client authentication, and the request from the client application
     * contained its client secret in `Authorization` header, the value should be extracted and set to
     * this parameter.
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The client certificate used in the TLS connection between the client application and the device
     * authorization endpoint of the authorization server.
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * The client certificate path presented by the client during client authentication. Each element
     * is a string in PEM format.
     */
    public Optional<String> clientCertificatePath() {
        return Optional.ofNullable(this.clientCertificatePath);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Parameters of a device authorization request which are the request parameters that the device
     * authorization endpoint of the authorization server implementation received from the client application.
     * 
     * <p>The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
     * of the request from the client application.
     */
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema withParameters(@Nonnull String parameters) {
        this.parameters = Utils.checkNotNull(parameters, "parameters");
        return this;
    }


    /**
     * The client ID extracted from Authorization header of the device authorization request from the
     * client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * `Authentication` as a means of client authentication, and the request from the client application
     * contained its client ID in `Authorization` header, the value should be extracted and set to this
     * parameter.
     */
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema withClientId(@Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client secret extracted from `Authorization` header of the device authorization request from
     * the client application.
     * 
     * <p>If the device authorization endpoint of the authorization server implementation supports Basic
     * Authentication as a means of client authentication, and the request from the client application
     * contained its client secret in `Authorization` header, the value should be extracted and set to
     * this parameter.
     */
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema withClientSecret(@Nullable String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }


    /**
     * The client certificate used in the TLS connection between the client application and the device
     * authorization endpoint of the authorization server.
     */
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema withClientCertificate(@Nullable String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }


    /**
     * The client certificate path presented by the client during client authentication. Each element
     * is a string in PEM format.
     */
    public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema withClientCertificatePath(@Nullable String clientCertificatePath) {
        this.clientCertificatePath = clientCertificatePath;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.parameters, other.parameters) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientSecret, other.clientSecret) &&
            Utils.enhancedDeepEquals(this.clientCertificate, other.clientCertificate) &&
            Utils.enhancedDeepEquals(this.clientCertificatePath, other.clientCertificatePath);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parameters, clientId, clientSecret,
            clientCertificate, clientCertificatePath);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema.class,
                "parameters", parameters,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "clientCertificate", clientCertificate,
                "clientCertificatePath", clientCertificatePath);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String parameters;

        private String clientId;

        private String clientSecret;

        private String clientCertificate;

        private String clientCertificatePath;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Parameters of a device authorization request which are the request parameters that the device
         * authorization endpoint of the authorization server implementation received from the client application.
         * 
         * <p>The value of `parameters` is the entire entity body (which is formatted in `application/x-www-form-urlencoded`)
         * of the request from the client application.
         */
        public Builder parameters(@Nonnull String parameters) {
            this.parameters = Utils.checkNotNull(parameters, "parameters");
            return this;
        }

        /**
         * The client ID extracted from Authorization header of the device authorization request from the
         * client application.
         * 
         * <p>If the device authorization endpoint of the authorization server implementation supports Basic
         * `Authentication` as a means of client authentication, and the request from the client application
         * contained its client ID in `Authorization` header, the value should be extracted and set to this
         * parameter.
         */
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client secret extracted from `Authorization` header of the device authorization request from
         * the client application.
         * 
         * <p>If the device authorization endpoint of the authorization server implementation supports Basic
         * Authentication as a means of client authentication, and the request from the client application
         * contained its client secret in `Authorization` header, the value should be extracted and set to
         * this parameter.
         */
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The client certificate used in the TLS connection between the client application and the device
         * authorization endpoint of the authorization server.
         */
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * The client certificate path presented by the client during client authentication. Each element
         * is a string in PEM format.
         */
        public Builder clientCertificatePath(@Nullable String clientCertificatePath) {
            this.clientCertificatePath = clientCertificatePath;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1device1authorizationPostRequestBodyContentApplication1jsonSchema(
                parameters, clientId, clientSecret,
                clientCertificate, clientCertificatePath);
        }

    }
}
