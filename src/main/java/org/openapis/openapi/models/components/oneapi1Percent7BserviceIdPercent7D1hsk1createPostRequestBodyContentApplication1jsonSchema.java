/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema {
    /**
     * The key type (EC or RSA)
     */
    @SpeakeasyMetadata("form:name=kty")
    private String kty;

    /**
     * The key on the HSM. 
     * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
     * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
     */
    @SpeakeasyMetadata("form:name=use")
    private String use;

    /**
     * Key ID for the key on the HSM.
     */
    @SpeakeasyMetadata("form:name=kid")
    private String kid;

    /**
     * The name of the HSM.
     * The identifier for the HSM that sits behind the Authlete server. For example, "google".
     */
    @SpeakeasyMetadata("form:name=hsmName")
    private String hsmName;

    /**
     * The handle for the key on the HSM.
     * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
     */
    @SpeakeasyMetadata("form:name=handle")
    private String handle;

    /**
     * The public key that corresponds to the key on the HSM.
     */
    @SpeakeasyMetadata("form:name=publicKey")
    private String publicKey;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema(
            @Nullable String kty,
            @Nullable String use,
            @Nullable String kid,
            @Nullable String hsmName,
            @Nullable String handle,
            @Nullable String publicKey) {
        this.kty = kty;
        this.use = use;
        this.kid = kid;
        this.hsmName = hsmName;
        this.handle = handle;
        this.publicKey = publicKey;
    }
    
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * The key type (EC or RSA)
     */
    public Optional<String> kty() {
        return Optional.ofNullable(this.kty);
    }

    /**
     * The key on the HSM. 
     * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
     * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
     */
    public Optional<String> use() {
        return Optional.ofNullable(this.use);
    }

    /**
     * Key ID for the key on the HSM.
     */
    public Optional<String> kid() {
        return Optional.ofNullable(this.kid);
    }

    /**
     * The name of the HSM.
     * The identifier for the HSM that sits behind the Authlete server. For example, "google".
     */
    public Optional<String> hsmName() {
        return Optional.ofNullable(this.hsmName);
    }

    /**
     * The handle for the key on the HSM.
     * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
     */
    public Optional<String> handle() {
        return Optional.ofNullable(this.handle);
    }

    /**
     * The public key that corresponds to the key on the HSM.
     */
    public Optional<String> publicKey() {
        return Optional.ofNullable(this.publicKey);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The key type (EC or RSA)
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withKty(@Nullable String kty) {
        this.kty = kty;
        return this;
    }


    /**
     * The key on the HSM. 
     * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
     * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withUse(@Nullable String use) {
        this.use = use;
        return this;
    }


    /**
     * Key ID for the key on the HSM.
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withKid(@Nullable String kid) {
        this.kid = kid;
        return this;
    }


    /**
     * The name of the HSM.
     * The identifier for the HSM that sits behind the Authlete server. For example, "google".
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withHsmName(@Nullable String hsmName) {
        this.hsmName = hsmName;
        return this;
    }


    /**
     * The handle for the key on the HSM.
     * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withHandle(@Nullable String handle) {
        this.handle = handle;
        return this;
    }


    /**
     * The public key that corresponds to the key on the HSM.
     */
    public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema withPublicKey(@Nullable String publicKey) {
        this.publicKey = publicKey;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.kty, other.kty) &&
            Utils.enhancedDeepEquals(this.use, other.use) &&
            Utils.enhancedDeepEquals(this.kid, other.kid) &&
            Utils.enhancedDeepEquals(this.hsmName, other.hsmName) &&
            Utils.enhancedDeepEquals(this.handle, other.handle) &&
            Utils.enhancedDeepEquals(this.publicKey, other.publicKey);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            kty, use, kid,
            hsmName, handle, publicKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema.class,
                "kty", kty,
                "use", use,
                "kid", kid,
                "hsmName", hsmName,
                "handle", handle,
                "publicKey", publicKey);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String kty;

        private String use;

        private String kid;

        private String hsmName;

        private String handle;

        private String publicKey;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The key type (EC or RSA)
         */
        public Builder kty(@Nullable String kty) {
            this.kty = kty;
            return this;
        }

        /**
         * The key on the HSM. 
         * When the key use is "sig" (signature), the private key on the HSM is used to sign data and the corresponding public key is used to verify the signature.
         * When the key use is "enc" (encryption), the private key on the HSM is used to decrypt encrypted data which have been encrypted with the corresponding public key
         */
        public Builder use(@Nullable String use) {
            this.use = use;
            return this;
        }

        /**
         * Key ID for the key on the HSM.
         */
        public Builder kid(@Nullable String kid) {
            this.kid = kid;
            return this;
        }

        /**
         * The name of the HSM.
         * The identifier for the HSM that sits behind the Authlete server. For example, "google".
         */
        public Builder hsmName(@Nullable String hsmName) {
            this.hsmName = hsmName;
            return this;
        }

        /**
         * The handle for the key on the HSM.
         * A handle is a base64url-encoded 256-bit random value (43 letters) which is assigned by Authlete on the call of the /api/hsk/create API
         */
        public Builder handle(@Nullable String handle) {
            this.handle = handle;
            return this;
        }

        /**
         * The public key that corresponds to the key on the HSM.
         */
        public Builder publicKey(@Nullable String publicKey) {
            this.publicKey = publicKey;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1hsk1createPostRequestBodyContentApplication1jsonSchema(
                kty, use, kid,
                hsmName, handle, publicKey);
        }

    }
}
