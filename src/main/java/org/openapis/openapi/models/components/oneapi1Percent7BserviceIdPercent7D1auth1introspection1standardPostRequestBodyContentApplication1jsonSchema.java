/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema {
    /**
     * Request parameters which comply with the introspection request defined
     * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662.
     * 
     * <p>The implementation of the introspection endpoint of your authorization server will receive an
     * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
     * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
     * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
     */
    @SpeakeasyMetadata("form:name=parameters")
    private String parameters;

    /**
     * Flag indicating whether to include hidden properties in the output.
     * 
     * <p>Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
     * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
     * is set to `true` are not embedded in the standard introspection output.
     * 
     * <p>If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
     * API includes all the associated key-value pairs into the output regardless of the value of the
     * hidden attribute.
     */
    @SpeakeasyMetadata("form:name=withHiddenProperties")
    private String withHiddenProperties;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String parameters,
            @Nullable String withHiddenProperties) {
        this.parameters = Optional.ofNullable(parameters)
            .orElseThrow(() -> new IllegalArgumentException("parameters cannot be null"));
        this.withHiddenProperties = withHiddenProperties;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String parameters) {
        this(parameters, null);
    }

    /**
     * Request parameters which comply with the introspection request defined
     * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662.
     * 
     * <p>The implementation of the introspection endpoint of your authorization server will receive an
     * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
     * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
     * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * Flag indicating whether to include hidden properties in the output.
     * 
     * <p>Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
     * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
     * is set to `true` are not embedded in the standard introspection output.
     * 
     * <p>If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
     * API includes all the associated key-value pairs into the output regardless of the value of the
     * hidden attribute.
     */
    public Optional<String> withHiddenProperties() {
        return Optional.ofNullable(this.withHiddenProperties);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Request parameters which comply with the introspection request defined
     * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662.
     * 
     * <p>The implementation of the introspection endpoint of your authorization server will receive an
     * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
     * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
     * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema withParameters(@Nonnull String parameters) {
        this.parameters = Utils.checkNotNull(parameters, "parameters");
        return this;
    }


    /**
     * Flag indicating whether to include hidden properties in the output.
     * 
     * <p>Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
     * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
     * is set to `true` are not embedded in the standard introspection output.
     * 
     * <p>If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
     * API includes all the associated key-value pairs into the output regardless of the value of the
     * hidden attribute.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema withWithHiddenProperties(@Nullable String withHiddenProperties) {
        this.withHiddenProperties = withHiddenProperties;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.parameters, other.parameters) &&
            Utils.enhancedDeepEquals(this.withHiddenProperties, other.withHiddenProperties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parameters, withHiddenProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema.class,
                "parameters", parameters,
                "withHiddenProperties", withHiddenProperties);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String parameters;

        private String withHiddenProperties;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Request parameters which comply with the introspection request defined
         * in "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
         * RFC 7662.
         * 
         * <p>The implementation of the introspection endpoint of your authorization server will receive an
         * HTTP POST [[RFC 7231](https://datatracker.ietf.org/doc/html/rfc7231)] request with parameters
         * in the `application/x-www-form-urlencoded` format. It is the entity body of the request that
         * Authlete's  `/api/auth/introspection/standard` API expects as the value of `parameters`.
         */
        public Builder parameters(@Nonnull String parameters) {
            this.parameters = Utils.checkNotNull(parameters, "parameters");
            return this;
        }

        /**
         * Flag indicating whether to include hidden properties in the output.
         * 
         * <p>Authlete has a mechanism whereby to associate arbitrary key-value pairs with an access token.
         * Each key-value pair has a hidden attribute. By default, key-value pairs whose hidden attribute
         * is set to `true` are not embedded in the standard introspection output.
         * 
         * <p>If the `withHiddenProperties` request parameter is given and its value is `true`, `/api/auth/introspection/standard
         * API includes all the associated key-value pairs into the output regardless of the value of the
         * hidden attribute.
         */
        public Builder withHiddenProperties(@Nullable String withHiddenProperties) {
            this.withHiddenProperties = withHiddenProperties;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1introspection1standardPostRequestBodyContentApplication1jsonSchema(
                parameters, withHiddenProperties);
        }

    }
}
