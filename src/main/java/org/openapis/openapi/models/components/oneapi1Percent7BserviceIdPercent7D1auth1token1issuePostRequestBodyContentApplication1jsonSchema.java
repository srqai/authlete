/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema {
    /**
     * The ticket issued from Authlete `/auth/token` API.
     */
    @SpeakeasyMetadata("form:name=ticket")
    private String ticket;

    /**
     * The subject (= unique identifier) of the authenticated user.
     */
    @SpeakeasyMetadata("form:name=subject")
    private String subject;

    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
     * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify properties.
     */
    @SpeakeasyMetadata("form:name=properties,json")
    private List<Property> properties;

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    @SpeakeasyMetadata("form:name=jwtAtClaims")
    private String jwtAtClaims;

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    @SpeakeasyMetadata("form:name=accessToken")
    private String accessToken;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String ticket,
            @Nonnull String subject,
            @Nullable List<Property> properties,
            @Nullable String jwtAtClaims,
            @Nullable String accessToken) {
        this.ticket = Optional.ofNullable(ticket)
            .orElseThrow(() -> new IllegalArgumentException("ticket cannot be null"));
        this.subject = Optional.ofNullable(subject)
            .orElseThrow(() -> new IllegalArgumentException("subject cannot be null"));
        this.properties = properties;
        this.jwtAtClaims = jwtAtClaims;
        this.accessToken = accessToken;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String ticket,
            @Nonnull String subject) {
        this(ticket, subject, null,
            null, null);
    }

    /**
     * The ticket issued from Authlete `/auth/token` API.
     */
    public String ticket() {
        return this.ticket;
    }

    /**
     * The subject (= unique identifier) of the authenticated user.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
     * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify properties.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public Optional<String> jwtAtClaims() {
        return Optional.ofNullable(this.jwtAtClaims);
    }

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ticket issued from Authlete `/auth/token` API.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema withTicket(@Nonnull String ticket) {
        this.ticket = Utils.checkNotNull(ticket, "ticket");
        return this;
    }


    /**
     * The subject (= unique identifier) of the authenticated user.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema withSubject(@Nonnull String subject) {
        this.subject = Utils.checkNotNull(subject, "subject");
        return this;
    }


    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
     * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify properties.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema withJwtAtClaims(@Nullable String jwtAtClaims) {
        this.jwtAtClaims = jwtAtClaims;
        return this;
    }


    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.jwtAtClaims, other.jwtAtClaims) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ticket, subject, properties,
            jwtAtClaims, accessToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema.class,
                "ticket", ticket,
                "subject", subject,
                "properties", properties,
                "jwtAtClaims", jwtAtClaims,
                "accessToken", accessToken);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ticket;

        private String subject;

        private List<Property> properties;

        private String jwtAtClaims;

        private String accessToken;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ticket issued from Authlete `/auth/token` API.
         */
        public Builder ticket(@Nonnull String ticket) {
            this.ticket = Utils.checkNotNull(ticket, "ticket");
            return this;
        }

        /**
         * The subject (= unique identifier) of the authenticated user.
         */
        public Builder subject(@Nonnull String subject) {
            this.subject = Utils.checkNotNull(subject, "subject");
            return this;
        }

        /**
         * Extra properties to associate with a newly created access token. Note that properties parameter is accepted only
         * when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
         * if you want to specify properties.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * Additional claims that are added to the payload part of the JWT access token.
         */
        public Builder jwtAtClaims(@Nullable String jwtAtClaims) {
            this.jwtAtClaims = jwtAtClaims;
            return this;
        }

        /**
         * The representation of an access token that may be issued as a result of the Authlete API call.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1token1issuePostRequestBodyContentApplication1jsonSchema(
                ticket, subject, properties,
                jwtAtClaims, accessToken);
        }

    }
}
