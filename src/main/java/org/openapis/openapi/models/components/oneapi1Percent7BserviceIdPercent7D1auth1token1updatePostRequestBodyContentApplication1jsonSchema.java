/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema {
    /**
     * An access token.
     */
    @SpeakeasyMetadata("form:name=accessToken")
    private String accessToken;

    /**
     * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
     * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
     * (or negative), the expiration date of the access token is not changed.
     */
    @SpeakeasyMetadata("form:name=accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * A new set of scopes assigned to the access token. Scopes that are not supported by the service
     * and those that the client application associated with the access token is not allowed to request
     * are ignored on the server side. If the `scopes` request parameter is not included in a request or
     * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
     * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify `properties`.
     */
    @SpeakeasyMetadata("form:name=scopes")
    private List<String> scopes;

    /**
     * A new set of properties assigned to the access token. If the `properties` request parameter is
     * not included in a request or its value is null, the properties of the access token are not changed.
     */
    @SpeakeasyMetadata("form:name=properties,json")
    private List<Property> properties;

    /**
     * A boolean request parameter which indicates whether the API attempts to update the expiration
     * date of the access token when the scopes linked to the access token are changed by this request.
     */
    @SpeakeasyMetadata("form:name=accessTokenExpiresAtUpdatedOnScopeUpdate")
    private Boolean accessTokenExpiresAtUpdatedOnScopeUpdate;

    /**
     * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
     * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
     */
    @SpeakeasyMetadata("form:name=accessTokenHash")
    private String accessTokenHash;

    /**
     * A boolean request parameter which indicates whether to update the value of the access token in
     * the data store. If this parameter is set to `true` then a new access token value is generated
     * by the server and returned in the response.
     */
    @SpeakeasyMetadata("form:name=accessTokenValueUpdated")
    private Boolean accessTokenValueUpdated;

    /**
     * The flag which indicates whether the access token expires or not. By default, all access tokens
     * expire after a period of time determined by their service. If this request parameter is `true`
     * then the access token will not automatically expire and must be revoked or deleted manually at
     * the service.
     * 
     * <p>If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
     * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
     * normally.
     */
    @SpeakeasyMetadata("form:name=accessTokenPersistent")
    private Boolean accessTokenPersistent;

    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    @SpeakeasyMetadata("form:name=certificateThumbprint")
    private String certificateThumbprint;

    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    @SpeakeasyMetadata("form:name=dpopKeyThumbprint")
    private String dpopKeyThumbprint;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @SpeakeasyMetadata("form:name=authorizationDetails,json")
    private AuthorizationDetails authorizationDetails;

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    @SpeakeasyMetadata("form:name=forExternalAttachment")
    private Boolean forExternalAttachment;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String accessToken,
            @Nullable Long accessTokenExpiresAt,
            @Nullable List<String> scopes,
            @Nullable List<Property> properties,
            @Nullable Boolean accessTokenExpiresAtUpdatedOnScopeUpdate,
            @Nullable String accessTokenHash,
            @Nullable Boolean accessTokenValueUpdated,
            @Nullable Boolean accessTokenPersistent,
            @Nullable String certificateThumbprint,
            @Nullable String dpopKeyThumbprint,
            @Nullable AuthorizationDetails authorizationDetails,
            @Nullable Boolean forExternalAttachment) {
        this.accessToken = Optional.ofNullable(accessToken)
            .orElseThrow(() -> new IllegalArgumentException("accessToken cannot be null"));
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.scopes = scopes;
        this.properties = properties;
        this.accessTokenExpiresAtUpdatedOnScopeUpdate = accessTokenExpiresAtUpdatedOnScopeUpdate;
        this.accessTokenHash = accessTokenHash;
        this.accessTokenValueUpdated = accessTokenValueUpdated;
        this.accessTokenPersistent = accessTokenPersistent;
        this.certificateThumbprint = certificateThumbprint;
        this.dpopKeyThumbprint = dpopKeyThumbprint;
        this.authorizationDetails = authorizationDetails;
        this.forExternalAttachment = forExternalAttachment;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String accessToken) {
        this(accessToken, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * An access token.
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
     * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
     * (or negative), the expiration date of the access token is not changed.
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * A new set of scopes assigned to the access token. Scopes that are not supported by the service
     * and those that the client application associated with the access token is not allowed to request
     * are ignored on the server side. If the `scopes` request parameter is not included in a request or
     * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
     * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify `properties`.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * A new set of properties assigned to the access token. If the `properties` request parameter is
     * not included in a request or its value is null, the properties of the access token are not changed.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * A boolean request parameter which indicates whether the API attempts to update the expiration
     * date of the access token when the scopes linked to the access token are changed by this request.
     */
    public Optional<Boolean> accessTokenExpiresAtUpdatedOnScopeUpdate() {
        return Optional.ofNullable(this.accessTokenExpiresAtUpdatedOnScopeUpdate);
    }

    /**
     * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
     * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
     */
    public Optional<String> accessTokenHash() {
        return Optional.ofNullable(this.accessTokenHash);
    }

    /**
     * A boolean request parameter which indicates whether to update the value of the access token in
     * the data store. If this parameter is set to `true` then a new access token value is generated
     * by the server and returned in the response.
     */
    public Optional<Boolean> accessTokenValueUpdated() {
        return Optional.ofNullable(this.accessTokenValueUpdated);
    }

    /**
     * The flag which indicates whether the access token expires or not. By default, all access tokens
     * expire after a period of time determined by their service. If this request parameter is `true`
     * then the access token will not automatically expire and must be revoked or deleted manually at
     * the service.
     * 
     * <p>If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
     * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
     * normally.
     */
    public Optional<Boolean> accessTokenPersistent() {
        return Optional.ofNullable(this.accessTokenPersistent);
    }

    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    public Optional<String> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    public Optional<String> dpopKeyThumbprint() {
        return Optional.ofNullable(this.dpopKeyThumbprint);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public Optional<Boolean> forExternalAttachment() {
        return Optional.ofNullable(this.forExternalAttachment);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An access token.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessToken(@Nonnull String accessToken) {
        this.accessToken = Utils.checkNotNull(accessToken, "accessToken");
        return this;
    }


    /**
     * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
     * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
     * (or negative), the expiration date of the access token is not changed.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * A new set of scopes assigned to the access token. Scopes that are not supported by the service
     * and those that the client application associated with the access token is not allowed to request
     * are ignored on the server side. If the `scopes` request parameter is not included in a request or
     * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
     * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
     * if you want to specify `properties`.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * A new set of properties assigned to the access token. If the `properties` request parameter is
     * not included in a request or its value is null, the properties of the access token are not changed.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * A boolean request parameter which indicates whether the API attempts to update the expiration
     * date of the access token when the scopes linked to the access token are changed by this request.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessTokenExpiresAtUpdatedOnScopeUpdate(@Nullable Boolean accessTokenExpiresAtUpdatedOnScopeUpdate) {
        this.accessTokenExpiresAtUpdatedOnScopeUpdate = accessTokenExpiresAtUpdatedOnScopeUpdate;
        return this;
    }


    /**
     * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
     * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessTokenHash(@Nullable String accessTokenHash) {
        this.accessTokenHash = accessTokenHash;
        return this;
    }


    /**
     * A boolean request parameter which indicates whether to update the value of the access token in
     * the data store. If this parameter is set to `true` then a new access token value is generated
     * by the server and returned in the response.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessTokenValueUpdated(@Nullable Boolean accessTokenValueUpdated) {
        this.accessTokenValueUpdated = accessTokenValueUpdated;
        return this;
    }


    /**
     * The flag which indicates whether the access token expires or not. By default, all access tokens
     * expire after a period of time determined by their service. If this request parameter is `true`
     * then the access token will not automatically expire and must be revoked or deleted manually at
     * the service.
     * 
     * <p>If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
     * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
     * normally.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAccessTokenPersistent(@Nullable Boolean accessTokenPersistent) {
        this.accessTokenPersistent = accessTokenPersistent;
        return this;
    }


    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withCertificateThumbprint(@Nullable String certificateThumbprint) {
        this.certificateThumbprint = certificateThumbprint;
        return this;
    }


    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withDpopKeyThumbprint(@Nullable String dpopKeyThumbprint) {
        this.dpopKeyThumbprint = dpopKeyThumbprint;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema withForExternalAttachment(@Nullable Boolean forExternalAttachment) {
        this.forExternalAttachment = forExternalAttachment;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAtUpdatedOnScopeUpdate, other.accessTokenExpiresAtUpdatedOnScopeUpdate) &&
            Utils.enhancedDeepEquals(this.accessTokenHash, other.accessTokenHash) &&
            Utils.enhancedDeepEquals(this.accessTokenValueUpdated, other.accessTokenValueUpdated) &&
            Utils.enhancedDeepEquals(this.accessTokenPersistent, other.accessTokenPersistent) &&
            Utils.enhancedDeepEquals(this.certificateThumbprint, other.certificateThumbprint) &&
            Utils.enhancedDeepEquals(this.dpopKeyThumbprint, other.dpopKeyThumbprint) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.forExternalAttachment, other.forExternalAttachment);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessToken, accessTokenExpiresAt, scopes,
            properties, accessTokenExpiresAtUpdatedOnScopeUpdate, accessTokenHash,
            accessTokenValueUpdated, accessTokenPersistent, certificateThumbprint,
            dpopKeyThumbprint, authorizationDetails, forExternalAttachment);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema.class,
                "accessToken", accessToken,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "scopes", scopes,
                "properties", properties,
                "accessTokenExpiresAtUpdatedOnScopeUpdate", accessTokenExpiresAtUpdatedOnScopeUpdate,
                "accessTokenHash", accessTokenHash,
                "accessTokenValueUpdated", accessTokenValueUpdated,
                "accessTokenPersistent", accessTokenPersistent,
                "certificateThumbprint", certificateThumbprint,
                "dpopKeyThumbprint", dpopKeyThumbprint,
                "authorizationDetails", authorizationDetails,
                "forExternalAttachment", forExternalAttachment);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessToken;

        private Long accessTokenExpiresAt;

        private List<String> scopes;

        private List<Property> properties;

        private Boolean accessTokenExpiresAtUpdatedOnScopeUpdate;

        private String accessTokenHash;

        private Boolean accessTokenValueUpdated;

        private Boolean accessTokenPersistent;

        private String certificateThumbprint;

        private String dpopKeyThumbprint;

        private AuthorizationDetails authorizationDetails;

        private Boolean forExternalAttachment;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * An access token.
         */
        public Builder accessToken(@Nonnull String accessToken) {
            this.accessToken = Utils.checkNotNull(accessToken, "accessToken");
            return this;
        }

        /**
         * A new date at which the access token will expire in milliseconds since the Unix epoch (1970-01-01).
         * If the `accessTokenExpiresAt` request parameter is not included in a request or its value is 0
         * (or negative), the expiration date of the access token is not changed.
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * A new set of scopes assigned to the access token. Scopes that are not supported by the service
         * and those that the client application associated with the access token is not allowed to request
         * are ignored on the server side. If the `scopes` request parameter is not included in a request or
         * its value is `null`, the scopes of the access token are not changed. Note that `properties` parameter
         * is accepted only when `Content-Type` of the request is `application/json`, so don't use `application/x-www-form-urlencoded`
         * if you want to specify `properties`.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * A new set of properties assigned to the access token. If the `properties` request parameter is
         * not included in a request or its value is null, the properties of the access token are not changed.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * A boolean request parameter which indicates whether the API attempts to update the expiration
         * date of the access token when the scopes linked to the access token are changed by this request.
         */
        public Builder accessTokenExpiresAtUpdatedOnScopeUpdate(@Nullable Boolean accessTokenExpiresAtUpdatedOnScopeUpdate) {
            this.accessTokenExpiresAtUpdatedOnScopeUpdate = accessTokenExpiresAtUpdatedOnScopeUpdate;
            return this;
        }

        /**
         * The hash of the access token value. Used when the hash of the token is known (perhaps from lookup)
         * but the value of the token itself is not. The value of the `accessToken` parameter takes precedence.
         */
        public Builder accessTokenHash(@Nullable String accessTokenHash) {
            this.accessTokenHash = accessTokenHash;
            return this;
        }

        /**
         * A boolean request parameter which indicates whether to update the value of the access token in
         * the data store. If this parameter is set to `true` then a new access token value is generated
         * by the server and returned in the response.
         */
        public Builder accessTokenValueUpdated(@Nullable Boolean accessTokenValueUpdated) {
            this.accessTokenValueUpdated = accessTokenValueUpdated;
            return this;
        }

        /**
         * The flag which indicates whether the access token expires or not. By default, all access tokens
         * expire after a period of time determined by their service. If this request parameter is `true`
         * then the access token will not automatically expire and must be revoked or deleted manually at
         * the service.
         * 
         * <p>If this request parameter is `true`, the `accessTokenExpiresAt` request parameter is ignored.
         * If this request parameter is `false`, the `accessTokenExpiresAt` request parameter is processed
         * normally.
         */
        public Builder accessTokenPersistent(@Nullable Boolean accessTokenPersistent) {
            this.accessTokenPersistent = accessTokenPersistent;
            return this;
        }

        /**
         * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
         * with the corresponding value MUST be presented with the access token when it is used by a client.
         * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
         */
        public Builder certificateThumbprint(@Nullable String certificateThumbprint) {
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }

        /**
         * The thumbprint of the public key used for DPoP presentation of this token. If this property is
         * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
         * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
         */
        public Builder dpopKeyThumbprint(@Nullable String dpopKeyThumbprint) {
            this.dpopKeyThumbprint = dpopKeyThumbprint;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * the flag which indicates whether the access token is for an external
         * attachment.
         */
        public Builder forExternalAttachment(@Nullable Boolean forExternalAttachment) {
            this.forExternalAttachment = forExternalAttachment;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1token1updatePostRequestBodyContentApplication1jsonSchema(
                accessToken, accessTokenExpiresAt, scopes,
                properties, accessTokenExpiresAtUpdatedOnScopeUpdate, accessTokenHash,
                accessTokenValueUpdated, accessTokenPersistent, certificateThumbprint,
                dpopKeyThumbprint, authorizationDetails, forExternalAttachment);
        }

    }
}
