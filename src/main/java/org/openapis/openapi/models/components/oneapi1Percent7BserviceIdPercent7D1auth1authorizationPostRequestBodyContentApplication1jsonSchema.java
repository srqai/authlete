/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema {
    /**
     * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
     * the authorization server implementation received from the client application.
     * 
     * <p>The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
     * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
     * the client application is `POST`.
     */
    @SpeakeasyMetadata("form:name=parameters")
    private String parameters;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String parameters) {
        this.parameters = Optional.ofNullable(parameters)
            .orElseThrow(() -> new IllegalArgumentException("parameters cannot be null"));
    }

    /**
     * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
     * the authorization server implementation received from the client application.
     * 
     * <p>The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
     * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
     * the client application is `POST`.
     */
    public String parameters() {
        return this.parameters;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
     * the authorization server implementation received from the client application.
     * 
     * <p>The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
     * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
     * the client application is `POST`.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema withParameters(@Nonnull String parameters) {
        this.parameters = Utils.checkNotNull(parameters, "parameters");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.parameters, other.parameters);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parameters);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema.class,
                "parameters", parameters);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String parameters;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * OAuth 2.0 authorization request parameters which are the request parameters that the OAuth 2.0 authorization endpoint of
         * the authorization server implementation received from the client application.
         * 
         * <p>The value of parameters is either (1) the entire query string when the HTTP method of the request from the client application is `GET`
         * or (2) the entire entity body (which is formatted in `application/x-www-form-urlencoded`) when the HTTP method of the request from
         * the client application is `POST`.
         */
        public Builder parameters(@Nonnull String parameters) {
            this.parameters = Utils.checkNotNull(parameters, "parameters");
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1authorizationPostRequestBodyContentApplication1jsonSchema(
                parameters);
        }

    }
}
