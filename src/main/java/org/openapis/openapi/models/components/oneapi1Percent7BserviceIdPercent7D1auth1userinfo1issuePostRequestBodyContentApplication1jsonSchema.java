/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema {
    /**
     * The access token that has been passed to the userinfo endpoint by the client application. In other words,
     * the access token which was contained in the userinfo request.
     */
    @SpeakeasyMetadata("form:name=token")
    private String token;

    /**
     * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
     */
    @SpeakeasyMetadata("form:name=claims")
    private String claims;

    /**
     * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
     * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
     */
    @SpeakeasyMetadata("form:name=sub")
    private String sub;

    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    @SpeakeasyMetadata("form:name=claimsForTx")
    private String claimsForTx;

    /**
     * The Signature header value from the request.
     */
    @SpeakeasyMetadata("form:name=requestSignature")
    private String requestSignature;

    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    @SpeakeasyMetadata("form:name=headers,json")
    private List<Pair> headers;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String token,
            @Nullable String claims,
            @Nullable String sub,
            @Nullable String claimsForTx,
            @Nullable String requestSignature,
            @Nullable List<Pair> headers) {
        this.token = Optional.ofNullable(token)
            .orElseThrow(() -> new IllegalArgumentException("token cannot be null"));
        this.claims = claims;
        this.sub = sub;
        this.claimsForTx = claimsForTx;
        this.requestSignature = requestSignature;
        this.headers = headers;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String token) {
        this(token, null, null,
            null, null, null);
    }

    /**
     * The access token that has been passed to the userinfo endpoint by the client application. In other words,
     * the access token which was contained in the userinfo request.
     */
    public String token() {
        return this.token;
    }

    /**
     * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
     */
    public Optional<String> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
     * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
     */
    public Optional<String> sub() {
        return Optional.ofNullable(this.sub);
    }

    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    public Optional<String> claimsForTx() {
        return Optional.ofNullable(this.claimsForTx);
    }

    /**
     * The Signature header value from the request.
     */
    public Optional<String> requestSignature() {
        return Optional.ofNullable(this.requestSignature);
    }

    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    public Optional<List<Pair>> headers() {
        return Optional.ofNullable(this.headers);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The access token that has been passed to the userinfo endpoint by the client application. In other words,
     * the access token which was contained in the userinfo request.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withToken(@Nonnull String token) {
        this.token = Utils.checkNotNull(token, "token");
        return this;
    }


    /**
     * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withClaims(@Nullable String claims) {
        this.claims = claims;
        return this;
    }


    /**
     * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
     * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withSub(@Nullable String sub) {
        this.sub = sub;
        return this;
    }


    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withClaimsForTx(@Nullable String claimsForTx) {
        this.claimsForTx = claimsForTx;
        return this;
    }


    /**
     * The Signature header value from the request.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withRequestSignature(@Nullable String requestSignature) {
        this.requestSignature = requestSignature;
        return this;
    }


    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema withHeaders(@Nullable List<Pair> headers) {
        this.headers = headers;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.claimsForTx, other.claimsForTx) &&
            Utils.enhancedDeepEquals(this.requestSignature, other.requestSignature) &&
            Utils.enhancedDeepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            token, claims, sub,
            claimsForTx, requestSignature, headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema.class,
                "token", token,
                "claims", claims,
                "sub", sub,
                "claimsForTx", claimsForTx,
                "requestSignature", requestSignature,
                "headers", headers);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String token;

        private String claims;

        private String sub;

        private String claimsForTx;

        private String requestSignature;

        private List<Pair> headers;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The access token that has been passed to the userinfo endpoint by the client application. In other words,
         * the access token which was contained in the userinfo request.
         */
        public Builder token(@Nonnull String token) {
            this.token = Utils.checkNotNull(token, "token");
            return this;
        }

        /**
         * Claims in JSON format. As for the format, see [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims).
         */
        public Builder claims(@Nullable String claims) {
            this.claims = claims;
            return this;
        }

        /**
         * The value of the `sub` claim. If the value of this request parameter is not empty, it is used as the value of
         * the `sub` claim. Otherwise, the value of the subject associated with the access token is used.
         */
        public Builder sub(@Nullable String sub) {
            this.sub = sub;
            return this;
        }

        /**
         * Claim key-value pairs that are used to compute transformed claims.
         */
        public Builder claimsForTx(@Nullable String claimsForTx) {
            this.claimsForTx = claimsForTx;
            return this;
        }

        /**
         * The Signature header value from the request.
         */
        public Builder requestSignature(@Nullable String requestSignature) {
            this.requestSignature = requestSignature;
            return this;
        }

        /**
         * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
         * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
         */
        public Builder headers(@Nullable List<Pair> headers) {
            this.headers = headers;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1userinfo1issuePostRequestBodyContentApplication1jsonSchema(
                token, claims, sub,
                claimsForTx, requestSignature, headers);
        }

    }
}
