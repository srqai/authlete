/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema {
    /**
     * The ticket issued from Authlete's `/backchannel/authentication` API.
     */
    @SpeakeasyMetadata("form:name=ticket")
    private String ticket;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema(
            @Nonnull String ticket) {
        this.ticket = Optional.ofNullable(ticket)
            .orElseThrow(() -> new IllegalArgumentException("ticket cannot be null"));
    }

    /**
     * The ticket issued from Authlete's `/backchannel/authentication` API.
     */
    public String ticket() {
        return this.ticket;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ticket issued from Authlete's `/backchannel/authentication` API.
     */
    public 1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema withTicket(@Nonnull String ticket) {
        this.ticket = Utils.checkNotNull(ticket, "ticket");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.ticket, other.ticket);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ticket);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema.class,
                "ticket", ticket);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ticket;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ticket issued from Authlete's `/backchannel/authentication` API.
         */
        public Builder ticket(@Nonnull String ticket) {
            this.ticket = Utils.checkNotNull(ticket, "ticket");
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1backchannel1authentication1issuePostRequestBodyContentApplication1jsonSchema(
                ticket);
        }

    }
}
