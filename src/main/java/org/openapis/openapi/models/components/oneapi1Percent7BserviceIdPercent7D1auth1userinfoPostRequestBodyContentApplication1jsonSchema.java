/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema {
    /**
     * An access token.
     */
    @SpeakeasyMetadata("form:name=token")
    private String token;

    /**
     * Client certificate used in the TLS connection established between the client application and the userinfo endpoint.
     * 
     * <p>The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
     * a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
     * (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
     */
    @SpeakeasyMetadata("form:name=clientCertificate")
    private String clientCertificate;

    /**
     * `DPoP` header presented by the client during the request to the user info endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @SpeakeasyMetadata("form:name=dpop")
    private String dpop;

    /**
     * HTTP method of the user info request. This field is used to validate the DPoP header.
     * In normal cases, the value is either `GET` or `POST`.
     */
    @SpeakeasyMetadata("form:name=htm")
    private String htm;

    /**
     * URL of the user info endpoint. This field is used to validate the DPoP header.
     * 
     * <p>If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @SpeakeasyMetadata("form:name=htu")
    private String htu;

    /**
     * The full URL of the userinfo endpoint.
     */
    @SpeakeasyMetadata("form:name=uri")
    private String uri;

    /**
     * The HTTP message body of the request, if present.
     */
    @SpeakeasyMetadata("form:name=message")
    private String message;

    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    @SpeakeasyMetadata("form:name=headers,json")
    private List<Pair> headers;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String token,
            @Nullable String clientCertificate,
            @Nullable String dpop,
            @Nullable String htm,
            @Nullable String htu,
            @Nullable String uri,
            @Nullable String message,
            @Nullable List<Pair> headers) {
        this.token = Optional.ofNullable(token)
            .orElseThrow(() -> new IllegalArgumentException("token cannot be null"));
        this.clientCertificate = clientCertificate;
        this.dpop = dpop;
        this.htm = htm;
        this.htu = htu;
        this.uri = uri;
        this.message = message;
        this.headers = headers;
    }
    
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String token) {
        this(token, null, null,
            null, null, null,
            null, null);
    }

    /**
     * An access token.
     */
    public String token() {
        return this.token;
    }

    /**
     * Client certificate used in the TLS connection established between the client application and the userinfo endpoint.
     * 
     * <p>The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
     * a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
     * (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * `DPoP` header presented by the client during the request to the user info endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> dpop() {
        return Optional.ofNullable(this.dpop);
    }

    /**
     * HTTP method of the user info request. This field is used to validate the DPoP header.
     * In normal cases, the value is either `GET` or `POST`.
     */
    public Optional<String> htm() {
        return Optional.ofNullable(this.htm);
    }

    /**
     * URL of the user info endpoint. This field is used to validate the DPoP header.
     * 
     * <p>If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> htu() {
        return Optional.ofNullable(this.htu);
    }

    /**
     * The full URL of the userinfo endpoint.
     */
    public Optional<String> uri() {
        return Optional.ofNullable(this.uri);
    }

    /**
     * The HTTP message body of the request, if present.
     */
    public Optional<String> message() {
        return Optional.ofNullable(this.message);
    }

    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    public Optional<List<Pair>> headers() {
        return Optional.ofNullable(this.headers);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An access token.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withToken(@Nonnull String token) {
        this.token = Utils.checkNotNull(token, "token");
        return this;
    }


    /**
     * Client certificate used in the TLS connection established between the client application and the userinfo endpoint.
     * 
     * <p>The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
     * a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
     * (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withClientCertificate(@Nullable String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }


    /**
     * `DPoP` header presented by the client during the request to the user info endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withDpop(@Nullable String dpop) {
        this.dpop = dpop;
        return this;
    }


    /**
     * HTTP method of the user info request. This field is used to validate the DPoP header.
     * In normal cases, the value is either `GET` or `POST`.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withHtm(@Nullable String htm) {
        this.htm = htm;
        return this;
    }


    /**
     * URL of the user info endpoint. This field is used to validate the DPoP header.
     * 
     * <p>If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withHtu(@Nullable String htu) {
        this.htu = htu;
        return this;
    }


    /**
     * The full URL of the userinfo endpoint.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withUri(@Nullable String uri) {
        this.uri = uri;
        return this;
    }


    /**
     * The HTTP message body of the request, if present.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withMessage(@Nullable String message) {
        this.message = message;
        return this;
    }


    /**
     * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
     * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
     */
    public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema withHeaders(@Nullable List<Pair> headers) {
        this.headers = headers;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.clientCertificate, other.clientCertificate) &&
            Utils.enhancedDeepEquals(this.dpop, other.dpop) &&
            Utils.enhancedDeepEquals(this.htm, other.htm) &&
            Utils.enhancedDeepEquals(this.htu, other.htu) &&
            Utils.enhancedDeepEquals(this.uri, other.uri) &&
            Utils.enhancedDeepEquals(this.message, other.message) &&
            Utils.enhancedDeepEquals(this.headers, other.headers);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            token, clientCertificate, dpop,
            htm, htu, uri,
            message, headers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema.class,
                "token", token,
                "clientCertificate", clientCertificate,
                "dpop", dpop,
                "htm", htm,
                "htu", htu,
                "uri", uri,
                "message", message,
                "headers", headers);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String token;

        private String clientCertificate;

        private String dpop;

        private String htm;

        private String htu;

        private String uri;

        private String message;

        private List<Pair> headers;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * An access token.
         */
        public Builder token(@Nonnull String token) {
            this.token = Utils.checkNotNull(token, "token");
            return this;
        }

        /**
         * Client certificate used in the TLS connection established between the client application and the userinfo endpoint.
         * 
         * <p>The value of this request parameter is referred to when the access token given to the userinfo endpoint was bound to
         * a client certificate when it was issued. See [OAuth 2.0 Mutual TLS Client Authentication and Certificate-Bound Access Tokens]
         * (https://datatracker.ietf.org/doc/rfc8705/) for details about the specification of certificate-bound access tokens.
         */
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * `DPoP` header presented by the client during the request to the user info endpoint.
         * 
         * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
         * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder dpop(@Nullable String dpop) {
            this.dpop = dpop;
            return this;
        }

        /**
         * HTTP method of the user info request. This field is used to validate the DPoP header.
         * In normal cases, the value is either `GET` or `POST`.
         */
        public Builder htm(@Nullable String htm) {
            this.htm = htm;
            return this;
        }

        /**
         * URL of the user info endpoint. This field is used to validate the DPoP header.
         * 
         * <p>If this parameter is omitted, the `userInfoEndpoint` property of the service is used as the default value.
         * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder htu(@Nullable String htu) {
            this.htu = htu;
            return this;
        }

        /**
         * The full URL of the userinfo endpoint.
         */
        public Builder uri(@Nullable String uri) {
            this.uri = uri;
            return this;
        }

        /**
         * The HTTP message body of the request, if present.
         */
        public Builder message(@Nullable String message) {
            this.message = message;
            return this;
        }

        /**
         * HTTP headers to be included in processing the signature. If this is a signed request, this must include the 
         * Signature and Signature-Input headers, as well as any additional headers covered by the signature.
         */
        public Builder headers(@Nullable List<Pair> headers) {
            this.headers = headers;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1auth1userinfoPostRequestBodyContentApplication1jsonSchema(
                token, clientCertificate, dpop,
                htm, htu, uri,
                message, headers);
        }

    }
}
