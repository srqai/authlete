/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema {
    /**
     * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
     * (OAuth 2.0 Dynamic Client Registration Protocol).
     */
    @JsonProperty("json")
    @SpeakeasyMetadata("form:name=json")
    private String json;

    /**
     * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    @SpeakeasyMetadata("form:name=token")
    private String token;

    /**
     * The client's identifier. Used for GET, UPDATE, and DELETE requests
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    @SpeakeasyMetadata("form:name=clientId")
    private String clientId;

    @JsonCreator
    public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema(
            @JsonProperty("json") @Nonnull String json,
            @JsonProperty("token") @Nullable String token,
            @JsonProperty("clientId") @Nullable String clientId) {
        this.json = Optional.ofNullable(json)
            .orElseThrow(() -> new IllegalArgumentException("json cannot be null"));
        this.token = token;
        this.clientId = clientId;
    }
    
    public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema(
            @Nonnull String json) {
        this(json, null, null);
    }

    /**
     * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
     * (OAuth 2.0 Dynamic Client Registration Protocol).
     */
    public String json() {
        return this.json;
    }

    /**
     * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The client's identifier. Used for GET, UPDATE, and DELETE requests
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
     * (OAuth 2.0 Dynamic Client Registration Protocol).
     */
    public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema withJson(@Nonnull String json) {
        this.json = Utils.checkNotNull(json, "json");
        return this;
    }


    /**
     * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
     */
    public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema withToken(@Nullable String token) {
        this.token = token;
        return this;
    }


    /**
     * The client's identifier. Used for GET, UPDATE, and DELETE requests
     */
    public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema withClientId(@Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema other = (1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema) o;
        return 
            Utils.enhancedDeepEquals(this.json, other.json) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            json, token, clientId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema.class,
                "json", json,
                "token", token,
                "clientId", clientId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String json;

        private String token;

        private String clientId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client metadata in JSON format that complies with [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591)
         * (OAuth 2.0 Dynamic Client Registration Protocol).
         */
        public Builder json(@Nonnull String json) {
            this.json = Utils.checkNotNull(json, "json");
            return this;
        }

        /**
         * The client registration access token. Used only for GET, UPDATE, and DELETE requests.
         */
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }

        /**
         * The client's identifier. Used for GET, UPDATE, and DELETE requests
         */
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }

        public 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema build() {
            return new 1api1Percent7BserviceIdPercent7D1client1registrationPostRequestBodyContentApplication1jsonSchema(
                json, token, clientId);
        }

    }
}
