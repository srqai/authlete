/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.components;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ScopePath {
    /**
     * Space-delimited scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    private String scope;

    /**
     * List of resource indicators.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource")
    private List<String> resource;

    @JsonCreator
    public ScopePath(
            @JsonProperty("scope") @Nullable String scope,
            @JsonProperty("resource") @Nullable List<String> resource) {
        this.scope = scope;
        this.resource = resource;
    }
    
    public ScopePath() {
        this(null, null);
    }

    /**
     * Space-delimited scopes.
     */
    public Optional<String> scope() {
        return Optional.ofNullable(this.scope);
    }

    /**
     * List of resource indicators.
     */
    public Optional<List<String>> resource() {
        return Optional.ofNullable(this.resource);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Space-delimited scopes.
     */
    public ScopePath withScope(@Nullable String scope) {
        this.scope = scope;
        return this;
    }


    /**
     * List of resource indicators.
     */
    public ScopePath withResource(@Nullable List<String> resource) {
        this.resource = resource;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScopePath other = (ScopePath) o;
        return 
            Utils.enhancedDeepEquals(this.scope, other.scope) &&
            Utils.enhancedDeepEquals(this.resource, other.resource);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            scope, resource);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ScopePath.class,
                "scope", scope,
                "resource", resource);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String scope;

        private List<String> resource;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Space-delimited scopes.
         */
        public Builder scope(@Nullable String scope) {
            this.scope = scope;
            return this;
        }

        /**
         * List of resource indicators.
         */
        public Builder resource(@Nullable List<String> resource) {
            this.resource = resource;
            return this;
        }

        public ScopePath build() {
            return new ScopePath(
                scope, resource);
        }

    }
}
