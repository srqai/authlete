/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ClientAuthorizationUpdateApiRequestBody {
    /**
     * The subject (= unique identifier) of the end-user who has granted authorization to the client
     * application.
     */
    @JsonProperty("subject")
    private String subject;

    /**
     * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
     * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
     * scope names listed in this request parameter should be delimited by spaces (after form encoding,
     * spaces are converted to `+`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    @JsonCreator
    public ClientAuthorizationUpdateApiRequestBody(
            @JsonProperty("subject") @Nonnull String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes) {
        this.subject = Optional.ofNullable(subject)
            .orElseThrow(() -> new IllegalArgumentException("subject cannot be null"));
        this.scopes = scopes;
    }
    
    public ClientAuthorizationUpdateApiRequestBody(
            @Nonnull String subject) {
        this(subject, null);
    }

    /**
     * The subject (= unique identifier) of the end-user who has granted authorization to the client
     * application.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
     * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
     * scope names listed in this request parameter should be delimited by spaces (after form encoding,
     * spaces are converted to `+`).
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The subject (= unique identifier) of the end-user who has granted authorization to the client
     * application.
     */
    public ClientAuthorizationUpdateApiRequestBody withSubject(@Nonnull String subject) {
        this.subject = Utils.checkNotNull(subject, "subject");
        return this;
    }


    /**
     * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
     * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
     * scope names listed in this request parameter should be delimited by spaces (after form encoding,
     * spaces are converted to `+`).
     */
    public ClientAuthorizationUpdateApiRequestBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientAuthorizationUpdateApiRequestBody other = (ClientAuthorizationUpdateApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subject, scopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientAuthorizationUpdateApiRequestBody.class,
                "subject", subject,
                "scopes", scopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String subject;

        private List<String> scopes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The subject (= unique identifier) of the end-user who has granted authorization to the client
         * application.
         */
        public Builder subject(@Nonnull String subject) {
            this.subject = Utils.checkNotNull(subject, "subject");
            return this;
        }

        /**
         * An array of new scopes. Optional. If a non-null value is given, the new scopes are set to all
         * existing access tokens. If an API call is made using `"Content-Type: application/x-www-form-urlencoded"`,
         * scope names listed in this request parameter should be delimited by spaces (after form encoding,
         * spaces are converted to `+`).
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        public ClientAuthorizationUpdateApiRequestBody build() {
            return new ClientAuthorizationUpdateApiRequestBody(
                subject, scopes);
        }

    }
}
