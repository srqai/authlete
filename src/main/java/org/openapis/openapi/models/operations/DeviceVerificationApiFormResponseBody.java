/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant;
import org.openapis.openapi.models.components.1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction;
import org.openapis.openapi.models.components.AuthorizationDetails;
import org.openapis.openapi.models.components.DynamicScope;
import org.openapis.openapi.models.components.Pair;
import org.openapis.openapi.models.components.Scope;
import org.openapis.openapi.utils.Utils;


public class DeviceVerificationApiFormResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private DeviceVerificationApiFormAction action;

    /**
     * The client ID of the client application to which the user code has been issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias of the client application to which the user code has been issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * `true` if the value of the `client_id` request parameter included in the device authorization
     * request is the client ID alias. `false` if the value is the original numeric client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The name of the client application to which the user code has been issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientName")
    private String clientName;

    /**
     * The scopes requested by the device authorization request.
     * 
     * <p>Note that `description` property and `descriptions` property of each scope object in
     * the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<Scope> scopes;

    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     * 
     * <p>This property is always `null` if the `scope` request parameter of the device authorization
     * request does not include the `openid` scope even if special scopes (such as `profile`)
     * are included in the request (unless the openid scope is included in the default set
     * of scopes which is used when the `scope` request parameter is omitted).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claimNames")
    private List<String> claimNames;

    /**
     * The list of ACR values requested by the device authorization request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acrs")
    private List<String> acrs;

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<Pair> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<Pair> clientAttributes;

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicScopes")
    private List<DynamicScope> dynamicScopes;

    /**
     * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Long expiresAt;

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmAction")
    private 1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction gmAction;

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant")
    private 1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant grant;

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantSubject")
    private String grantSubject;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    @JsonCreator
    public DeviceVerificationApiFormResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable DeviceVerificationApiFormAction action,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("clientName") @Nullable String clientName,
            @JsonProperty("scopes") @Nullable List<Scope> scopes,
            @JsonProperty("claimNames") @Nullable List<String> claimNames,
            @JsonProperty("acrs") @Nullable List<String> acrs,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<Pair> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<Pair> clientAttributes,
            @JsonProperty("dynamicScopes") @Nullable List<DynamicScope> dynamicScopes,
            @JsonProperty("expiresAt") @Nullable Long expiresAt,
            @JsonProperty("gmAction") @Nullable 1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction gmAction,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("grant") @Nullable 1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant grant,
            @JsonProperty("grantSubject") @Nullable String grantSubject,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.clientName = clientName;
        this.scopes = scopes;
        this.claimNames = claimNames;
        this.acrs = acrs;
        this.resources = resources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.dynamicScopes = dynamicScopes;
        this.expiresAt = expiresAt;
        this.gmAction = gmAction;
        this.grantId = grantId;
        this.grant = grant;
        this.grantSubject = grantSubject;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
    }
    
    public DeviceVerificationApiFormResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<DeviceVerificationApiFormAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The client ID of the client application to which the user code has been issued.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias of the client application to which the user code has been issued.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * `true` if the value of the `client_id` request parameter included in the device authorization
     * request is the client ID alias. `false` if the value is the original numeric client ID.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The name of the client application to which the user code has been issued.
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    /**
     * The scopes requested by the device authorization request.
     * 
     * <p>Note that `description` property and `descriptions` property of each scope object in
     * the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    public Optional<List<Scope>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     * 
     * <p>This property is always `null` if the `scope` request parameter of the device authorization
     * request does not include the `openid` scope even if special scopes (such as `profile`)
     * are included in the request (unless the openid scope is included in the default set
     * of scopes which is used when the `scope` request parameter is omitted).
     */
    public Optional<List<String>> claimNames() {
        return Optional.ofNullable(this.claimNames);
    }

    /**
     * The list of ACR values requested by the device authorization request.
     */
    public Optional<List<String>> acrs() {
        return Optional.ofNullable(this.acrs);
    }

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<Pair>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<Pair>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public Optional<List<DynamicScope>> dynamicScopes() {
        return Optional.ofNullable(this.dynamicScopes);
    }

    /**
     * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
     */
    public Optional<Long> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public Optional<1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction> gmAction() {
        return Optional.ofNullable(this.gmAction);
    }

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    public Optional<1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public Optional<String> grantSubject() {
        return Optional.ofNullable(this.grantSubject);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public DeviceVerificationApiFormResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public DeviceVerificationApiFormResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public DeviceVerificationApiFormResponseBody withAction(@Nullable DeviceVerificationApiFormAction action) {
        this.action = action;
        return this;
    }


    /**
     * The client ID of the client application to which the user code has been issued.
     */
    public DeviceVerificationApiFormResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias of the client application to which the user code has been issued.
     */
    public DeviceVerificationApiFormResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * `true` if the value of the `client_id` request parameter included in the device authorization
     * request is the client ID alias. `false` if the value is the original numeric client ID.
     */
    public DeviceVerificationApiFormResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The name of the client application to which the user code has been issued.
     */
    public DeviceVerificationApiFormResponseBody withClientName(@Nullable String clientName) {
        this.clientName = clientName;
        return this;
    }


    /**
     * The scopes requested by the device authorization request.
     * 
     * <p>Note that `description` property and `descriptions` property of each scope object in
     * the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    public DeviceVerificationApiFormResponseBody withScopes(@Nullable List<Scope> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     * 
     * <p>This property is always `null` if the `scope` request parameter of the device authorization
     * request does not include the `openid` scope even if special scopes (such as `profile`)
     * are included in the request (unless the openid scope is included in the default set
     * of scopes which is used when the `scope` request parameter is omitted).
     */
    public DeviceVerificationApiFormResponseBody withClaimNames(@Nullable List<String> claimNames) {
        this.claimNames = claimNames;
        return this;
    }


    /**
     * The list of ACR values requested by the device authorization request.
     */
    public DeviceVerificationApiFormResponseBody withAcrs(@Nullable List<String> acrs) {
        this.acrs = acrs;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public DeviceVerificationApiFormResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public DeviceVerificationApiFormResponseBody withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public DeviceVerificationApiFormResponseBody withServiceAttributes(@Nullable List<Pair> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public DeviceVerificationApiFormResponseBody withClientAttributes(@Nullable List<Pair> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public DeviceVerificationApiFormResponseBody withDynamicScopes(@Nullable List<DynamicScope> dynamicScopes) {
        this.dynamicScopes = dynamicScopes;
        return this;
    }


    /**
     * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
     */
    public DeviceVerificationApiFormResponseBody withExpiresAt(@Nullable Long expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }


    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public DeviceVerificationApiFormResponseBody withGmAction(@Nullable 1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction gmAction) {
        this.gmAction = gmAction;
        return this;
    }


    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public DeviceVerificationApiFormResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    public DeviceVerificationApiFormResponseBody withGrant(@Nullable 1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant grant) {
        this.grant = grant;
        return this;
    }


    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public DeviceVerificationApiFormResponseBody withGrantSubject(@Nullable String grantSubject) {
        this.grantSubject = grantSubject;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public DeviceVerificationApiFormResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public DeviceVerificationApiFormResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DeviceVerificationApiFormResponseBody other = (DeviceVerificationApiFormResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.clientName, other.clientName) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.claimNames, other.claimNames) &&
            Utils.enhancedDeepEquals(this.acrs, other.acrs) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.dynamicScopes, other.dynamicScopes) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.gmAction, other.gmAction) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.grant, other.grant) &&
            Utils.enhancedDeepEquals(this.grantSubject, other.grantSubject) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            clientId, clientIdAlias, clientIdAliasUsed,
            clientName, scopes, claimNames,
            acrs, resources, authorizationDetails,
            serviceAttributes, clientAttributes, dynamicScopes,
            expiresAt, gmAction, grantId,
            grant, grantSubject, clientEntityId,
            clientEntityIdUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DeviceVerificationApiFormResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "clientName", clientName,
                "scopes", scopes,
                "claimNames", claimNames,
                "acrs", acrs,
                "resources", resources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "dynamicScopes", dynamicScopes,
                "expiresAt", expiresAt,
                "gmAction", gmAction,
                "grantId", grantId,
                "grant", grant,
                "grantSubject", grantSubject,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private DeviceVerificationApiFormAction action;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String clientName;

        private List<Scope> scopes;

        private List<String> claimNames;

        private List<String> acrs;

        private List<String> resources;

        private AuthorizationDetails authorizationDetails;

        private List<Pair> serviceAttributes;

        private List<Pair> clientAttributes;

        private List<DynamicScope> dynamicScopes;

        private Long expiresAt;

        private 1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction gmAction;

        private String grantId;

        private 1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant grant;

        private String grantSubject;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable DeviceVerificationApiFormAction action) {
            this.action = action;
            return this;
        }

        /**
         * The client ID of the client application to which the user code has been issued.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias of the client application to which the user code has been issued.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * `true` if the value of the `client_id` request parameter included in the device authorization
         * request is the client ID alias. `false` if the value is the original numeric client ID.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The name of the client application to which the user code has been issued.
         */
        public Builder clientName(@Nullable String clientName) {
            this.clientName = clientName;
            return this;
        }

        /**
         * The scopes requested by the device authorization request.
         * 
         * <p>Note that `description` property and `descriptions` property of each scope object in
         * the array contained in this property is always null even if descriptions of the scopes
         * are registered.
         */
        public Builder scopes(@Nullable List<Scope> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The names of the claims which were requested indirectly via some special scopes.
         * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
         * in OpenID Connect Core 1.0 for details.
         * 
         * <p>This property is always `null` if the `scope` request parameter of the device authorization
         * request does not include the `openid` scope even if special scopes (such as `profile`)
         * are included in the request (unless the openid scope is included in the default set
         * of scopes which is used when the `scope` request parameter is omitted).
         */
        public Builder claimNames(@Nullable List<String> claimNames) {
            this.claimNames = claimNames;
            return this;
        }

        /**
         * The list of ACR values requested by the device authorization request.
         */
        public Builder acrs(@Nullable List<String> acrs) {
            this.acrs = acrs;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters or by the `resource` property
         * in the request object. If both are given, the values in the request object should be
         * set. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<Pair> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<Pair> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * The dynamic scopes which the client application requested by the scope request parameter.
         */
        public Builder dynamicScopes(@Nullable List<DynamicScope> dynamicScopes) {
            this.dynamicScopes = dynamicScopes;
            return this;
        }

        /**
         * Get the date in milliseconds since the Unix epoch (1970-01-01) at which the user code will expire.
         */
        public Builder expiresAt(@Nullable Long expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The grant management action of the device authorization request.
         * 
         * <p>The `grant_management_action` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
         */
        public Builder gmAction(@Nullable 1api1Percent7BserviceIdPercent7D1gmPostRequestBodyContentApplication1jsonSchemaPropertiesGmAction gmAction) {
            this.gmAction = gmAction;
            return this;
        }

        /**
         * the value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        public Builder grant(@Nullable 1api1Percent7BserviceIdPercent7D1auth1authorizationPostResponses200ContentApplication1jsonSchemaPropertiesGrant grant) {
            this.grant = grant;
            return this;
        }

        /**
         * The subject identifying the user who has given the grant identified
         * by the `grant_id` request parameter of the device authorization
         * request.
         * 
         * <p>Authlete 2.3 and newer versions support &lt;a href=
         * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
         * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
         * request parameter which is defined in the specification. If the value of
         * the request parameter is valid, #getGrantSubject() will return
         * the subject of the user who has given the grant to the client application.
         * Authorization server implementations may use the value returned from
         * #getGrantSubject() in order to determine the user to authenticate.
         * 
         * <p>The user your system will authenticate during the authorization process
         * (or has already authenticated) may be different from the user of the
         * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
         * does not mention anything about the case, so the behavior in the case is
         * left to implementations. Authlete will not perform the grant management
         * action when the `subject` passed to Authlete does not match the
         * user of the grant.
         */
        public Builder grantSubject(@Nullable String grantSubject) {
            this.grantSubject = grantSubject;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        public DeviceVerificationApiFormResponseBody build() {
            return new DeviceVerificationApiFormResponseBody(
                resultCode, resultMessage, action,
                clientId, clientIdAlias, clientIdAliasUsed,
                clientName, scopes, claimNames,
                acrs, resources, authorizationDetails,
                serviceAttributes, clientAttributes, dynamicScopes,
                expiresAt, gmAction, grantId,
                grant, grantSubject, clientEntityId,
                clientEntityIdUsed);
        }

    }
}
