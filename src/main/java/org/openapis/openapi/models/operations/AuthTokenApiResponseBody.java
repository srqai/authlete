/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo;
import org.openapis.openapi.models.components.1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType;
import org.openapis.openapi.models.components.AuthorizationDetails;
import org.openapis.openapi.models.components.Pair;
import org.openapis.openapi.models.components.Property;
import org.openapis.openapi.utils.Utils;


public class AuthTokenApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthTokenApiAction action;

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The value of `username` request parameter in the token request.
     * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private String username;

    /**
     * The value of `password` request parameter in the token request.
     * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private String password;

    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket")
    private String ticket;

    /**
     * The newly issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * The duration of the newly issued access token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The newly issued refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenExpiresAt")
    private Long refreshTokenExpiresAt;

    /**
     * The duration of the newly issued refresh token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenDuration")
    private Long refreshTokenDuration;

    /**
     * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
     * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    private String idToken;

    /**
     * The grant type of the token request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantType")
    private String grantType;

    /**
     * The client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
     * is not associated with any specific end-user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The scopes covered by the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<Property> properties;

    /**
     * The newly issued access token in JWT format. If the authorization server is configured
     * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
     * non-null value), a JWT-based access token is issued along with the original random-string
     * one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAccessToken")
    private String jwtAccessToken;

    /**
     * The resources specified by the `resource` request parameters in the token request.
     * See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenResources")
    private List<String> accessTokenResources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<Pair> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<Pair> clientAttributes;

    /**
     * The client authentication method that was performed at the token endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAuthMethod")
    private String clientAuthMethod;

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;

    /**
     * The audiences on the token exchange request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("audiences")
    private List<String> audiences;

    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedTokenType")
    private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType requestedTokenType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectToken")
    private String subjectToken;

    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectTokenType")
    private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType subjectTokenType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectTokenInfo")
    private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo subjectTokenInfo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actorToken")
    private String actorToken;

    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actorTokenType")
    private AuthTokenApiActorTokenType actorTokenType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("actorTokenInfo")
    private AuthTokenApiActorTokenInfo actorTokenInfo;

    /**
     * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assertion")
    private String assertion;

    /**
     * Indicate whether the previous refresh token that had been kept in the database for a short time was used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("previousRefreshTokenUsed")
    private Boolean previousRefreshTokenUsed;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    /**
     * Duration of the `c_nonce` in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cnonceDuration")
    private Long cnonceDuration;

    /**
     * Get the expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpopNonce")
    private String dpopNonce;

    /**
     * Get the `c_nonce`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cnonce")
    private String cnonce;

    /**
     * Get the time at which the `c_nonce` expires in milliseconds since
     * the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cnonceExpiresAt")
    private Long cnonceExpiresAt;

    /**
     * Get the names of the claims that the authorization request (which resulted
     * in generation of the access token) requested to be embedded in ID tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedIdTokenClaims")
    private List<String> requestedIdTokenClaims;

    /**
     * Scopes associated with the refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenScopes")
    private List<String> refreshTokenScopes;

    @JsonCreator
    public AuthTokenApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthTokenApiAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("username") @Nullable String username,
            @JsonProperty("password") @Nullable String password,
            @JsonProperty("ticket") @Nullable String ticket,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("accessTokenExpiresAt") @Nullable Long accessTokenExpiresAt,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("refreshToken") @Nullable String refreshToken,
            @JsonProperty("refreshTokenExpiresAt") @Nullable Long refreshTokenExpiresAt,
            @JsonProperty("refreshTokenDuration") @Nullable Long refreshTokenDuration,
            @JsonProperty("idToken") @Nullable String idToken,
            @JsonProperty("grantType") @Nullable String grantType,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("properties") @Nullable List<Property> properties,
            @JsonProperty("jwtAccessToken") @Nullable String jwtAccessToken,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("accessTokenResources") @Nullable List<String> accessTokenResources,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<Pair> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<Pair> clientAttributes,
            @JsonProperty("clientAuthMethod") @Nullable String clientAuthMethod,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("audiences") @Nullable List<String> audiences,
            @JsonProperty("requestedTokenType") @Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType requestedTokenType,
            @JsonProperty("subjectToken") @Nullable String subjectToken,
            @JsonProperty("subjectTokenType") @Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType subjectTokenType,
            @JsonProperty("subjectTokenInfo") @Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo subjectTokenInfo,
            @JsonProperty("actorToken") @Nullable String actorToken,
            @JsonProperty("actorTokenType") @Nullable AuthTokenApiActorTokenType actorTokenType,
            @JsonProperty("actorTokenInfo") @Nullable AuthTokenApiActorTokenInfo actorTokenInfo,
            @JsonProperty("assertion") @Nullable String assertion,
            @JsonProperty("previousRefreshTokenUsed") @Nullable Boolean previousRefreshTokenUsed,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed,
            @JsonProperty("cnonceDuration") @Nullable Long cnonceDuration,
            @JsonProperty("dpopNonce") @Nullable String dpopNonce,
            @JsonProperty("cnonce") @Nullable String cnonce,
            @JsonProperty("cnonceExpiresAt") @Nullable Long cnonceExpiresAt,
            @JsonProperty("requestedIdTokenClaims") @Nullable List<String> requestedIdTokenClaims,
            @JsonProperty("refreshTokenScopes") @Nullable List<String> refreshTokenScopes) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.username = username;
        this.password = password;
        this.ticket = ticket;
        this.accessToken = accessToken;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.accessTokenDuration = accessTokenDuration;
        this.refreshToken = refreshToken;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        this.refreshTokenDuration = refreshTokenDuration;
        this.idToken = idToken;
        this.grantType = grantType;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.subject = subject;
        this.scopes = scopes;
        this.properties = properties;
        this.jwtAccessToken = jwtAccessToken;
        this.resources = resources;
        this.accessTokenResources = accessTokenResources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.clientAuthMethod = clientAuthMethod;
        this.grantId = grantId;
        this.audiences = audiences;
        this.requestedTokenType = requestedTokenType;
        this.subjectToken = subjectToken;
        this.subjectTokenType = subjectTokenType;
        this.subjectTokenInfo = subjectTokenInfo;
        this.actorToken = actorToken;
        this.actorTokenType = actorTokenType;
        this.actorTokenInfo = actorTokenInfo;
        this.assertion = assertion;
        this.previousRefreshTokenUsed = previousRefreshTokenUsed;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
        this.cnonceDuration = cnonceDuration;
        this.dpopNonce = dpopNonce;
        this.cnonce = cnonce;
        this.cnonceExpiresAt = cnonceExpiresAt;
        this.requestedIdTokenClaims = requestedIdTokenClaims;
        this.refreshTokenScopes = refreshTokenScopes;
    }
    
    public AuthTokenApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthTokenApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The value of `username` request parameter in the token request.
     * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public Optional<String> username() {
        return Optional.ofNullable(this.username);
    }

    /**
     * The value of `password` request parameter in the token request.
     * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public Optional<String> password() {
        return Optional.ofNullable(this.password);
    }

    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public Optional<String> ticket() {
        return Optional.ofNullable(this.ticket);
    }

    /**
     * The newly issued access token.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * The duration of the newly issued access token in seconds.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The newly issued refresh token.
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }

    /**
     * The duration of the newly issued refresh token in seconds.
     */
    public Optional<Long> refreshTokenDuration() {
        return Optional.ofNullable(this.refreshTokenDuration);
    }

    /**
     * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
     * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
     */
    public Optional<String> idToken() {
        return Optional.ofNullable(this.idToken);
    }

    /**
     * The grant type of the token request.
     */
    public Optional<String> grantType() {
        return Optional.ofNullable(this.grantType);
    }

    /**
     * The client ID.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
     * is not associated with any specific end-user.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The scopes covered by the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The newly issued access token in JWT format. If the authorization server is configured
     * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
     * non-null value), a JWT-based access token is issued along with the original random-string
     * one.
     */
    public Optional<String> jwtAccessToken() {
        return Optional.ofNullable(this.jwtAccessToken);
    }

    /**
     * The resources specified by the `resource` request parameters in the token request.
     * See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> accessTokenResources() {
        return Optional.ofNullable(this.accessTokenResources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<Pair>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<Pair>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * The client authentication method that was performed at the token endpoint.
     */
    public Optional<String> clientAuthMethod() {
        return Optional.ofNullable(this.clientAuthMethod);
    }

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    /**
     * The audiences on the token exchange request
     */
    public Optional<List<String>> audiences() {
        return Optional.ofNullable(this.audiences);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public Optional<1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType> requestedTokenType() {
        return Optional.ofNullable(this.requestedTokenType);
    }

    public Optional<String> subjectToken() {
        return Optional.ofNullable(this.subjectToken);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public Optional<1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType> subjectTokenType() {
        return Optional.ofNullable(this.subjectTokenType);
    }

    public Optional<1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo> subjectTokenInfo() {
        return Optional.ofNullable(this.subjectTokenInfo);
    }

    public Optional<String> actorToken() {
        return Optional.ofNullable(this.actorToken);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public Optional<AuthTokenApiActorTokenType> actorTokenType() {
        return Optional.ofNullable(this.actorTokenType);
    }

    public Optional<AuthTokenApiActorTokenInfo> actorTokenInfo() {
        return Optional.ofNullable(this.actorTokenInfo);
    }

    /**
     * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
     */
    public Optional<String> assertion() {
        return Optional.ofNullable(this.assertion);
    }

    /**
     * Indicate whether the previous refresh token that had been kept in the database for a short time was used
     */
    public Optional<Boolean> previousRefreshTokenUsed() {
        return Optional.ofNullable(this.previousRefreshTokenUsed);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    /**
     * Duration of the `c_nonce` in seconds.
     */
    public Optional<Long> cnonceDuration() {
        return Optional.ofNullable(this.cnonceDuration);
    }

    /**
     * Get the expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public Optional<String> dpopNonce() {
        return Optional.ofNullable(this.dpopNonce);
    }

    /**
     * Get the `c_nonce`.
     */
    public Optional<String> cnonce() {
        return Optional.ofNullable(this.cnonce);
    }

    /**
     * Get the time at which the `c_nonce` expires in milliseconds since
     * the Unix epoch (1970-01-01).
     */
    public Optional<Long> cnonceExpiresAt() {
        return Optional.ofNullable(this.cnonceExpiresAt);
    }

    /**
     * Get the names of the claims that the authorization request (which resulted
     * in generation of the access token) requested to be embedded in ID tokens.
     */
    public Optional<List<String>> requestedIdTokenClaims() {
        return Optional.ofNullable(this.requestedIdTokenClaims);
    }

    /**
     * Scopes associated with the refresh token.
     */
    public Optional<List<String>> refreshTokenScopes() {
        return Optional.ofNullable(this.refreshTokenScopes);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthTokenApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthTokenApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthTokenApiResponseBody withAction(@Nullable AuthTokenApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public AuthTokenApiResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The value of `username` request parameter in the token request.
     * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public AuthTokenApiResponseBody withUsername(@Nullable String username) {
        this.username = username;
        return this;
    }


    /**
     * The value of `password` request parameter in the token request.
     * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
     * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public AuthTokenApiResponseBody withPassword(@Nullable String password) {
        this.password = password;
        return this;
    }


    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public AuthTokenApiResponseBody withTicket(@Nullable String ticket) {
        this.ticket = ticket;
        return this;
    }


    /**
     * The newly issued access token.
     */
    public AuthTokenApiResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthTokenApiResponseBody withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * The duration of the newly issued access token in seconds.
     */
    public AuthTokenApiResponseBody withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The newly issued refresh token.
     */
    public AuthTokenApiResponseBody withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }


    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthTokenApiResponseBody withRefreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        return this;
    }


    /**
     * The duration of the newly issued refresh token in seconds.
     */
    public AuthTokenApiResponseBody withRefreshTokenDuration(@Nullable Long refreshTokenDuration) {
        this.refreshTokenDuration = refreshTokenDuration;
        return this;
    }


    /**
     * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
     * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
     */
    public AuthTokenApiResponseBody withIdToken(@Nullable String idToken) {
        this.idToken = idToken;
        return this;
    }


    /**
     * The grant type of the token request.
     */
    public AuthTokenApiResponseBody withGrantType(@Nullable String grantType) {
        this.grantType = grantType;
        return this;
    }


    /**
     * The client ID.
     */
    public AuthTokenApiResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    public AuthTokenApiResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public AuthTokenApiResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
     * is not associated with any specific end-user.
     */
    public AuthTokenApiResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The scopes covered by the access token.
     */
    public AuthTokenApiResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    public AuthTokenApiResponseBody withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The newly issued access token in JWT format. If the authorization server is configured
     * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
     * non-null value), a JWT-based access token is issued along with the original random-string
     * one.
     */
    public AuthTokenApiResponseBody withJwtAccessToken(@Nullable String jwtAccessToken) {
        this.jwtAccessToken = jwtAccessToken;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters in the token request.
     * See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthTokenApiResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthTokenApiResponseBody withAccessTokenResources(@Nullable List<String> accessTokenResources) {
        this.accessTokenResources = accessTokenResources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthTokenApiResponseBody withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public AuthTokenApiResponseBody withServiceAttributes(@Nullable List<Pair> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public AuthTokenApiResponseBody withClientAttributes(@Nullable List<Pair> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * The client authentication method that was performed at the token endpoint.
     */
    public AuthTokenApiResponseBody withClientAuthMethod(@Nullable String clientAuthMethod) {
        this.clientAuthMethod = clientAuthMethod;
        return this;
    }


    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public AuthTokenApiResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    /**
     * The audiences on the token exchange request
     */
    public AuthTokenApiResponseBody withAudiences(@Nullable List<String> audiences) {
        this.audiences = audiences;
        return this;
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthTokenApiResponseBody withRequestedTokenType(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType requestedTokenType) {
        this.requestedTokenType = requestedTokenType;
        return this;
    }


    public AuthTokenApiResponseBody withSubjectToken(@Nullable String subjectToken) {
        this.subjectToken = subjectToken;
        return this;
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthTokenApiResponseBody withSubjectTokenType(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType subjectTokenType) {
        this.subjectTokenType = subjectTokenType;
        return this;
    }


    public AuthTokenApiResponseBody withSubjectTokenInfo(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo subjectTokenInfo) {
        this.subjectTokenInfo = subjectTokenInfo;
        return this;
    }


    public AuthTokenApiResponseBody withActorToken(@Nullable String actorToken) {
        this.actorToken = actorToken;
        return this;
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthTokenApiResponseBody withActorTokenType(@Nullable AuthTokenApiActorTokenType actorTokenType) {
        this.actorTokenType = actorTokenType;
        return this;
    }


    public AuthTokenApiResponseBody withActorTokenInfo(@Nullable AuthTokenApiActorTokenInfo actorTokenInfo) {
        this.actorTokenInfo = actorTokenInfo;
        return this;
    }


    /**
     * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
     */
    public AuthTokenApiResponseBody withAssertion(@Nullable String assertion) {
        this.assertion = assertion;
        return this;
    }


    /**
     * Indicate whether the previous refresh token that had been kept in the database for a short time was used
     */
    public AuthTokenApiResponseBody withPreviousRefreshTokenUsed(@Nullable Boolean previousRefreshTokenUsed) {
        this.previousRefreshTokenUsed = previousRefreshTokenUsed;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public AuthTokenApiResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthTokenApiResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    /**
     * Duration of the `c_nonce` in seconds.
     */
    public AuthTokenApiResponseBody withCnonceDuration(@Nullable Long cnonceDuration) {
        this.cnonceDuration = cnonceDuration;
        return this;
    }


    /**
     * Get the expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public AuthTokenApiResponseBody withDpopNonce(@Nullable String dpopNonce) {
        this.dpopNonce = dpopNonce;
        return this;
    }


    /**
     * Get the `c_nonce`.
     */
    public AuthTokenApiResponseBody withCnonce(@Nullable String cnonce) {
        this.cnonce = cnonce;
        return this;
    }


    /**
     * Get the time at which the `c_nonce` expires in milliseconds since
     * the Unix epoch (1970-01-01).
     */
    public AuthTokenApiResponseBody withCnonceExpiresAt(@Nullable Long cnonceExpiresAt) {
        this.cnonceExpiresAt = cnonceExpiresAt;
        return this;
    }


    /**
     * Get the names of the claims that the authorization request (which resulted
     * in generation of the access token) requested to be embedded in ID tokens.
     */
    public AuthTokenApiResponseBody withRequestedIdTokenClaims(@Nullable List<String> requestedIdTokenClaims) {
        this.requestedIdTokenClaims = requestedIdTokenClaims;
        return this;
    }


    /**
     * Scopes associated with the refresh token.
     */
    public AuthTokenApiResponseBody withRefreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
        this.refreshTokenScopes = refreshTokenScopes;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenApiResponseBody other = (AuthTokenApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.username, other.username) &&
            Utils.enhancedDeepEquals(this.password, other.password) &&
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.refreshTokenExpiresAt, other.refreshTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.refreshTokenDuration, other.refreshTokenDuration) &&
            Utils.enhancedDeepEquals(this.idToken, other.idToken) &&
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.jwtAccessToken, other.jwtAccessToken) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.accessTokenResources, other.accessTokenResources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.clientAuthMethod, other.clientAuthMethod) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.audiences, other.audiences) &&
            Utils.enhancedDeepEquals(this.requestedTokenType, other.requestedTokenType) &&
            Utils.enhancedDeepEquals(this.subjectToken, other.subjectToken) &&
            Utils.enhancedDeepEquals(this.subjectTokenType, other.subjectTokenType) &&
            Utils.enhancedDeepEquals(this.subjectTokenInfo, other.subjectTokenInfo) &&
            Utils.enhancedDeepEquals(this.actorToken, other.actorToken) &&
            Utils.enhancedDeepEquals(this.actorTokenType, other.actorTokenType) &&
            Utils.enhancedDeepEquals(this.actorTokenInfo, other.actorTokenInfo) &&
            Utils.enhancedDeepEquals(this.assertion, other.assertion) &&
            Utils.enhancedDeepEquals(this.previousRefreshTokenUsed, other.previousRefreshTokenUsed) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed) &&
            Utils.enhancedDeepEquals(this.cnonceDuration, other.cnonceDuration) &&
            Utils.enhancedDeepEquals(this.dpopNonce, other.dpopNonce) &&
            Utils.enhancedDeepEquals(this.cnonce, other.cnonce) &&
            Utils.enhancedDeepEquals(this.cnonceExpiresAt, other.cnonceExpiresAt) &&
            Utils.enhancedDeepEquals(this.requestedIdTokenClaims, other.requestedIdTokenClaims) &&
            Utils.enhancedDeepEquals(this.refreshTokenScopes, other.refreshTokenScopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, username, password,
            ticket, accessToken, accessTokenExpiresAt,
            accessTokenDuration, refreshToken, refreshTokenExpiresAt,
            refreshTokenDuration, idToken, grantType,
            clientId, clientIdAlias, clientIdAliasUsed,
            subject, scopes, properties,
            jwtAccessToken, resources, accessTokenResources,
            authorizationDetails, serviceAttributes, clientAttributes,
            clientAuthMethod, grantId, audiences,
            requestedTokenType, subjectToken, subjectTokenType,
            subjectTokenInfo, actorToken, actorTokenType,
            actorTokenInfo, assertion, previousRefreshTokenUsed,
            clientEntityId, clientEntityIdUsed, cnonceDuration,
            dpopNonce, cnonce, cnonceExpiresAt,
            requestedIdTokenClaims, refreshTokenScopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "username", username,
                "password", password,
                "ticket", ticket,
                "accessToken", accessToken,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "accessTokenDuration", accessTokenDuration,
                "refreshToken", refreshToken,
                "refreshTokenExpiresAt", refreshTokenExpiresAt,
                "refreshTokenDuration", refreshTokenDuration,
                "idToken", idToken,
                "grantType", grantType,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "subject", subject,
                "scopes", scopes,
                "properties", properties,
                "jwtAccessToken", jwtAccessToken,
                "resources", resources,
                "accessTokenResources", accessTokenResources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "clientAuthMethod", clientAuthMethod,
                "grantId", grantId,
                "audiences", audiences,
                "requestedTokenType", requestedTokenType,
                "subjectToken", subjectToken,
                "subjectTokenType", subjectTokenType,
                "subjectTokenInfo", subjectTokenInfo,
                "actorToken", actorToken,
                "actorTokenType", actorTokenType,
                "actorTokenInfo", actorTokenInfo,
                "assertion", assertion,
                "previousRefreshTokenUsed", previousRefreshTokenUsed,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed,
                "cnonceDuration", cnonceDuration,
                "dpopNonce", dpopNonce,
                "cnonce", cnonce,
                "cnonceExpiresAt", cnonceExpiresAt,
                "requestedIdTokenClaims", requestedIdTokenClaims,
                "refreshTokenScopes", refreshTokenScopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthTokenApiAction action;

        private String responseContent;

        private String username;

        private String password;

        private String ticket;

        private String accessToken;

        private Long accessTokenExpiresAt;

        private Long accessTokenDuration;

        private String refreshToken;

        private Long refreshTokenExpiresAt;

        private Long refreshTokenDuration;

        private String idToken;

        private String grantType;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String subject;

        private List<String> scopes;

        private List<Property> properties;

        private String jwtAccessToken;

        private List<String> resources;

        private List<String> accessTokenResources;

        private AuthorizationDetails authorizationDetails;

        private List<Pair> serviceAttributes;

        private List<Pair> clientAttributes;

        private String clientAuthMethod;

        private String grantId;

        private List<String> audiences;

        private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType requestedTokenType;

        private String subjectToken;

        private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType subjectTokenType;

        private 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo subjectTokenInfo;

        private String actorToken;

        private AuthTokenApiActorTokenType actorTokenType;

        private AuthTokenApiActorTokenInfo actorTokenInfo;

        private String assertion;

        private Boolean previousRefreshTokenUsed;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Long cnonceDuration;

        private String dpopNonce;

        private String cnonce;

        private Long cnonceExpiresAt;

        private List<String> requestedIdTokenClaims;

        private List<String> refreshTokenScopes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthTokenApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client application.
         * Its format varies depending on the value of `action` parameter.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The value of `username` request parameter in the token request.
         * The client application must specify username when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
         * In other words, when the value of `grant_type` request parameter is `password`, `username` request parameter must come along.
         * 
         * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
         */
        public Builder username(@Nullable String username) {
            this.username = username;
            return this;
        }

        /**
         * The value of `password` request parameter in the token request.
         * The client application must specify password when it uses [Resource Owner Password Grant](https://datatracker.ietf.org/doc/html/rfc6749#section-4.3).
         * In other words, when the value of `grant_type` request parameter is `password`, `password` request parameter must come along.
         * 
         * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
         */
        public Builder password(@Nullable String password) {
            this.password = password;
            return this;
        }

        /**
         * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
         * 
         * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
         */
        public Builder ticket(@Nullable String ticket) {
            this.ticket = ticket;
            return this;
        }

        /**
         * The newly issued access token.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The datetime at which the newly issued access token will expire.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * The duration of the newly issued access token in seconds.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The newly issued refresh token.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * The datetime at which the newly issued refresh token will expire.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder refreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        /**
         * The duration of the newly issued refresh token in seconds.
         */
        public Builder refreshTokenDuration(@Nullable Long refreshTokenDuration) {
            this.refreshTokenDuration = refreshTokenDuration;
            return this;
        }

        /**
         * The newly issued ID token. Note that an ID token is issued from a token endpoint only when the `response_type` request parameter
         * of the authorization request to an authorization endpoint has contained `code` and the `scope` request parameter has contained `openid`.
         */
        public Builder idToken(@Nullable String idToken) {
            this.idToken = idToken;
            return this;
        }

        /**
         * The grant type of the token request.
         */
        public Builder grantType(@Nullable String grantType) {
            this.grantType = grantType;
            return this;
        }

        /**
         * The client ID.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
         * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * The flag which indicates whether the client ID alias was used when the token request was made.
         * `true` if the client ID alias was used when the token request was made.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The subject (= resource owner's ID) of the access token.
         * Even if an access token has been issued by the call of `/api/auth/token` API, this parameter is `null` if the flow of the token request was
         * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means the access token
         * is not associated with any specific end-user.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The scopes covered by the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         * This parameter is `null` when no extra property is associated with the issued access token.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The newly issued access token in JWT format. If the authorization server is configured
         * to issue JWT-based access tokens (= if the service's `accessTokenSignAlg` value is a
         * non-null value), a JWT-based access token is issued along with the original random-string
         * one.
         */
        public Builder jwtAccessToken(@Nullable String jwtAccessToken) {
            this.jwtAccessToken = jwtAccessToken;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters in the token request.
         * See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder accessTokenResources(@Nullable List<String> accessTokenResources) {
            this.accessTokenResources = accessTokenResources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<Pair> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<Pair> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * The client authentication method that was performed at the token endpoint.
         */
        public Builder clientAuthMethod(@Nullable String clientAuthMethod) {
            this.clientAuthMethod = clientAuthMethod;
            return this;
        }

        /**
         * the value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        /**
         * The audiences on the token exchange request
         */
        public Builder audiences(@Nullable List<String> audiences) {
            this.audiences = audiences;
            return this;
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder requestedTokenType(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType requestedTokenType) {
            this.requestedTokenType = requestedTokenType;
            return this;
        }

        public Builder subjectToken(@Nullable String subjectToken) {
            this.subjectToken = subjectToken;
            return this;
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder subjectTokenType(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenType subjectTokenType) {
            this.subjectTokenType = subjectTokenType;
            return this;
        }

        public Builder subjectTokenInfo(@Nullable 1api1Percent7BserviceIdPercent7D1auth1tokenPostResponses200ContentApplication1jsonSchemaPropertiesActorTokenInfo subjectTokenInfo) {
            this.subjectTokenInfo = subjectTokenInfo;
            return this;
        }

        public Builder actorToken(@Nullable String actorToken) {
            this.actorToken = actorToken;
            return this;
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder actorTokenType(@Nullable AuthTokenApiActorTokenType actorTokenType) {
            this.actorTokenType = actorTokenType;
            return this;
        }

        public Builder actorTokenInfo(@Nullable AuthTokenApiActorTokenInfo actorTokenInfo) {
            this.actorTokenInfo = actorTokenInfo;
            return this;
        }

        /**
         * For RFC 7523 JSON Web Token (JWT) Profile for OAuth 2.0 Client Authentication and Authorization Grants
         */
        public Builder assertion(@Nullable String assertion) {
            this.assertion = assertion;
            return this;
        }

        /**
         * Indicate whether the previous refresh token that had been kept in the database for a short time was used
         */
        public Builder previousRefreshTokenUsed(@Nullable Boolean previousRefreshTokenUsed) {
            this.previousRefreshTokenUsed = previousRefreshTokenUsed;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        /**
         * Duration of the `c_nonce` in seconds.
         */
        public Builder cnonceDuration(@Nullable Long cnonceDuration) {
            this.cnonceDuration = cnonceDuration;
            return this;
        }

        /**
         * Get the expected nonce value for DPoP proof JWT, which should be used
         * as the value of the `DPoP-Nonce` HTTP header.
         */
        public Builder dpopNonce(@Nullable String dpopNonce) {
            this.dpopNonce = dpopNonce;
            return this;
        }

        /**
         * Get the `c_nonce`.
         */
        public Builder cnonce(@Nullable String cnonce) {
            this.cnonce = cnonce;
            return this;
        }

        /**
         * Get the time at which the `c_nonce` expires in milliseconds since
         * the Unix epoch (1970-01-01).
         */
        public Builder cnonceExpiresAt(@Nullable Long cnonceExpiresAt) {
            this.cnonceExpiresAt = cnonceExpiresAt;
            return this;
        }

        /**
         * Get the names of the claims that the authorization request (which resulted
         * in generation of the access token) requested to be embedded in ID tokens.
         */
        public Builder requestedIdTokenClaims(@Nullable List<String> requestedIdTokenClaims) {
            this.requestedIdTokenClaims = requestedIdTokenClaims;
            return this;
        }

        /**
         * Scopes associated with the refresh token.
         */
        public Builder refreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
            this.refreshTokenScopes = refreshTokenScopes;
            return this;
        }

        public AuthTokenApiResponseBody build() {
            return new AuthTokenApiResponseBody(
                resultCode, resultMessage, action,
                responseContent, username, password,
                ticket, accessToken, accessTokenExpiresAt,
                accessTokenDuration, refreshToken, refreshTokenExpiresAt,
                refreshTokenDuration, idToken, grantType,
                clientId, clientIdAlias, clientIdAliasUsed,
                subject, scopes, properties,
                jwtAccessToken, resources, accessTokenResources,
                authorizationDetails, serviceAttributes, clientAttributes,
                clientAuthMethod, grantId, audiences,
                requestedTokenType, subjectToken, subjectTokenType,
                subjectTokenInfo, actorToken, actorTokenType,
                actorTokenInfo, assertion, previousRefreshTokenUsed,
                clientEntityId, clientEntityIdUsed, cnonceDuration,
                dpopNonce, cnonce, cnonceExpiresAt,
                requestedIdTokenClaims, refreshTokenScopes);
        }

    }
}
