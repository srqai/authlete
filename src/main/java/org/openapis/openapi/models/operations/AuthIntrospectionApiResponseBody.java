/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthIntrospectionApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthIntrospectionApiAction action;

    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The time at which the access token expires.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Long expiresAt;

    /**
     * The subject who is associated with the access token.
     * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The scopes covered by the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * `true` if the access token exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("existent")
    private Boolean existent;

    /**
     * true` if the access token is usable (= exists and has not expired).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("usable")
    private Boolean usable;

    /**
     * `true` if the access token exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sufficient")
    private Boolean sufficient;

    /**
     * `true` if the access token can be refreshed using the associated refresh token which had been issued
     * along with the access token. `false` if the refresh token for the access token has expired or the access
     * token has no associated refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshable")
    private Boolean refreshable;

    /**
     * The extra properties associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthIntrospectionApiProperty> properties;

    /**
     * The client certificate thumbprint used to validate the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateThumbprint")
    private String certificateThumbprint;

    /**
     * The target resources. This represents the resources specified by the `resource` request parameters
     * or by the `resource` property in the request object.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
     * 
     * <p>In some flows, the initial request and the subsequent token request are sent to different endpoints.
     * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
     * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
     * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
     * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
     * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenResources")
    private List<String> accessTokenResources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthIntrospectionApiAuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<AuthIntrospectionApiServiceAttribute> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<AuthIntrospectionApiClientAttribute> clientAttributes;

    /**
     * The scopes property of this class is a list of scope names. The property does not hold information
     * about scope attributes. This scopeDetails property was newly created to convey information about
     * scope attributes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopeDetails")
    private List<AuthIntrospectionApiScopeDetail> scopeDetails;

    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant")
    private AuthIntrospectionApiGrant grant;

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forExternalAttachment")
    private Boolean forExternalAttachment;

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consentedClaims")
    private List<String> consentedClaims;

    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantType")
    private AuthIntrospectionApiGrantType grantType;

    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acr")
    private String acr;

    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTime")
    private Long authTime;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    /**
     * The flag indicating whether the token is for credential issuance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forCredentialIssuance")
    private Boolean forCredentialIssuance;

    /**
     * The c_nonce
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cnonce")
    private String cnonce;

    /**
     * The time at which the `c_nonce` expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cnonceExpiresAt")
    private Long cnonceExpiresAt;

    /**
     * The credentials that can be obtained by presenting the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuableCredentials")
    private String issuableCredentials;

    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpopNonce")
    private String dpopNonce;

    @JsonCreator
    public AuthIntrospectionApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthIntrospectionApiAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("expiresAt") @Nullable Long expiresAt,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("existent") @Nullable Boolean existent,
            @JsonProperty("usable") @Nullable Boolean usable,
            @JsonProperty("sufficient") @Nullable Boolean sufficient,
            @JsonProperty("refreshable") @Nullable Boolean refreshable,
            @JsonProperty("properties") @Nullable List<AuthIntrospectionApiProperty> properties,
            @JsonProperty("certificateThumbprint") @Nullable String certificateThumbprint,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("accessTokenResources") @Nullable List<String> accessTokenResources,
            @JsonProperty("authorizationDetails") @Nullable AuthIntrospectionApiAuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<AuthIntrospectionApiServiceAttribute> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<AuthIntrospectionApiClientAttribute> clientAttributes,
            @JsonProperty("scopeDetails") @Nullable List<AuthIntrospectionApiScopeDetail> scopeDetails,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("grant") @Nullable AuthIntrospectionApiGrant grant,
            @JsonProperty("forExternalAttachment") @Nullable Boolean forExternalAttachment,
            @JsonProperty("consentedClaims") @Nullable List<String> consentedClaims,
            @JsonProperty("grantType") @Nullable AuthIntrospectionApiGrantType grantType,
            @JsonProperty("acr") @Nullable String acr,
            @JsonProperty("authTime") @Nullable Long authTime,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed,
            @JsonProperty("forCredentialIssuance") @Nullable Boolean forCredentialIssuance,
            @JsonProperty("cnonce") @Nullable String cnonce,
            @JsonProperty("cnonceExpiresAt") @Nullable Long cnonceExpiresAt,
            @JsonProperty("issuableCredentials") @Nullable String issuableCredentials,
            @JsonProperty("dpopNonce") @Nullable String dpopNonce) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.expiresAt = expiresAt;
        this.subject = subject;
        this.scopes = scopes;
        this.existent = existent;
        this.usable = usable;
        this.sufficient = sufficient;
        this.refreshable = refreshable;
        this.properties = properties;
        this.certificateThumbprint = certificateThumbprint;
        this.resources = resources;
        this.accessTokenResources = accessTokenResources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.scopeDetails = scopeDetails;
        this.grantId = grantId;
        this.grant = grant;
        this.forExternalAttachment = forExternalAttachment;
        this.consentedClaims = consentedClaims;
        this.grantType = grantType;
        this.acr = acr;
        this.authTime = authTime;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
        this.forCredentialIssuance = forCredentialIssuance;
        this.cnonce = cnonce;
        this.cnonceExpiresAt = cnonceExpiresAt;
        this.issuableCredentials = issuableCredentials;
        this.dpopNonce = dpopNonce;
    }
    
    public AuthIntrospectionApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthIntrospectionApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The client ID.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The time at which the access token expires.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The subject who is associated with the access token.
     * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The scopes covered by the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * `true` if the access token exists.
     */
    public Optional<Boolean> existent() {
        return Optional.ofNullable(this.existent);
    }

    /**
     * true` if the access token is usable (= exists and has not expired).
     */
    public Optional<Boolean> usable() {
        return Optional.ofNullable(this.usable);
    }

    /**
     * `true` if the access token exists.
     */
    public Optional<Boolean> sufficient() {
        return Optional.ofNullable(this.sufficient);
    }

    /**
     * `true` if the access token can be refreshed using the associated refresh token which had been issued
     * along with the access token. `false` if the refresh token for the access token has expired or the access
     * token has no associated refresh token.
     */
    public Optional<Boolean> refreshable() {
        return Optional.ofNullable(this.refreshable);
    }

    /**
     * The extra properties associated with the access token.
     */
    public Optional<List<AuthIntrospectionApiProperty>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The client certificate thumbprint used to validate the access token.
     */
    public Optional<String> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * The target resources. This represents the resources specified by the `resource` request parameters
     * or by the `resource` property in the request object.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
     * 
     * <p>In some flows, the initial request and the subsequent token request are sent to different endpoints.
     * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
     * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
     * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
     * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
     * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> accessTokenResources() {
        return Optional.ofNullable(this.accessTokenResources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthIntrospectionApiAuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<AuthIntrospectionApiServiceAttribute>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<AuthIntrospectionApiClientAttribute>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * The scopes property of this class is a list of scope names. The property does not hold information
     * about scope attributes. This scopeDetails property was newly created to convey information about
     * scope attributes.
     */
    public Optional<List<AuthIntrospectionApiScopeDetail>> scopeDetails() {
        return Optional.ofNullable(this.scopeDetails);
    }

    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    public Optional<AuthIntrospectionApiGrant> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public Optional<Boolean> forExternalAttachment() {
        return Optional.ofNullable(this.forExternalAttachment);
    }

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public Optional<List<String>> consentedClaims() {
        return Optional.ofNullable(this.consentedClaims);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public Optional<AuthIntrospectionApiGrantType> grantType() {
        return Optional.ofNullable(this.grantType);
    }

    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    public Optional<String> acr() {
        return Optional.ofNullable(this.acr);
    }

    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    public Optional<Long> authTime() {
        return Optional.ofNullable(this.authTime);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    /**
     * The flag indicating whether the token is for credential issuance.
     */
    public Optional<Boolean> forCredentialIssuance() {
        return Optional.ofNullable(this.forCredentialIssuance);
    }

    /**
     * The c_nonce
     */
    public Optional<String> cnonce() {
        return Optional.ofNullable(this.cnonce);
    }

    /**
     * The time at which the `c_nonce` expires.
     */
    public Optional<Long> cnonceExpiresAt() {
        return Optional.ofNullable(this.cnonceExpiresAt);
    }

    /**
     * The credentials that can be obtained by presenting the access token.
     */
    public Optional<String> issuableCredentials() {
        return Optional.ofNullable(this.issuableCredentials);
    }

    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public Optional<String> dpopNonce() {
        return Optional.ofNullable(this.dpopNonce);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthIntrospectionApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthIntrospectionApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthIntrospectionApiResponseBody withAction(@Nullable AuthIntrospectionApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
     */
    public AuthIntrospectionApiResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The client ID.
     */
    public AuthIntrospectionApiResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
     * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
     */
    public AuthIntrospectionApiResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public AuthIntrospectionApiResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The time at which the access token expires.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthIntrospectionApiResponseBody withExpiresAt(@Nullable Long expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }


    /**
     * The subject who is associated with the access token.
     * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
     */
    public AuthIntrospectionApiResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The scopes covered by the access token.
     */
    public AuthIntrospectionApiResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * `true` if the access token exists.
     */
    public AuthIntrospectionApiResponseBody withExistent(@Nullable Boolean existent) {
        this.existent = existent;
        return this;
    }


    /**
     * true` if the access token is usable (= exists and has not expired).
     */
    public AuthIntrospectionApiResponseBody withUsable(@Nullable Boolean usable) {
        this.usable = usable;
        return this;
    }


    /**
     * `true` if the access token exists.
     */
    public AuthIntrospectionApiResponseBody withSufficient(@Nullable Boolean sufficient) {
        this.sufficient = sufficient;
        return this;
    }


    /**
     * `true` if the access token can be refreshed using the associated refresh token which had been issued
     * along with the access token. `false` if the refresh token for the access token has expired or the access
     * token has no associated refresh token.
     */
    public AuthIntrospectionApiResponseBody withRefreshable(@Nullable Boolean refreshable) {
        this.refreshable = refreshable;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     */
    public AuthIntrospectionApiResponseBody withProperties(@Nullable List<AuthIntrospectionApiProperty> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The client certificate thumbprint used to validate the access token.
     */
    public AuthIntrospectionApiResponseBody withCertificateThumbprint(@Nullable String certificateThumbprint) {
        this.certificateThumbprint = certificateThumbprint;
        return this;
    }


    /**
     * The target resources. This represents the resources specified by the `resource` request parameters
     * or by the `resource` property in the request object.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthIntrospectionApiResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
     * 
     * <p>In some flows, the initial request and the subsequent token request are sent to different endpoints.
     * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
     * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
     * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
     * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
     * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
     * 
     * <p>See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthIntrospectionApiResponseBody withAccessTokenResources(@Nullable List<String> accessTokenResources) {
        this.accessTokenResources = accessTokenResources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthIntrospectionApiResponseBody withAuthorizationDetails(@Nullable AuthIntrospectionApiAuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public AuthIntrospectionApiResponseBody withServiceAttributes(@Nullable List<AuthIntrospectionApiServiceAttribute> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public AuthIntrospectionApiResponseBody withClientAttributes(@Nullable List<AuthIntrospectionApiClientAttribute> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * The scopes property of this class is a list of scope names. The property does not hold information
     * about scope attributes. This scopeDetails property was newly created to convey information about
     * scope attributes.
     */
    public AuthIntrospectionApiResponseBody withScopeDetails(@Nullable List<AuthIntrospectionApiScopeDetail> scopeDetails) {
        this.scopeDetails = scopeDetails;
        return this;
    }


    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public AuthIntrospectionApiResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    public AuthIntrospectionApiResponseBody withGrant(@Nullable AuthIntrospectionApiGrant grant) {
        this.grant = grant;
        return this;
    }


    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public AuthIntrospectionApiResponseBody withForExternalAttachment(@Nullable Boolean forExternalAttachment) {
        this.forExternalAttachment = forExternalAttachment;
        return this;
    }


    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public AuthIntrospectionApiResponseBody withConsentedClaims(@Nullable List<String> consentedClaims) {
        this.consentedClaims = consentedClaims;
        return this;
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthIntrospectionApiResponseBody withGrantType(@Nullable AuthIntrospectionApiGrantType grantType) {
        this.grantType = grantType;
        return this;
    }


    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    public AuthIntrospectionApiResponseBody withAcr(@Nullable String acr) {
        this.acr = acr;
        return this;
    }


    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    public AuthIntrospectionApiResponseBody withAuthTime(@Nullable Long authTime) {
        this.authTime = authTime;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public AuthIntrospectionApiResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthIntrospectionApiResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    /**
     * The flag indicating whether the token is for credential issuance.
     */
    public AuthIntrospectionApiResponseBody withForCredentialIssuance(@Nullable Boolean forCredentialIssuance) {
        this.forCredentialIssuance = forCredentialIssuance;
        return this;
    }


    /**
     * The c_nonce
     */
    public AuthIntrospectionApiResponseBody withCnonce(@Nullable String cnonce) {
        this.cnonce = cnonce;
        return this;
    }


    /**
     * The time at which the `c_nonce` expires.
     */
    public AuthIntrospectionApiResponseBody withCnonceExpiresAt(@Nullable Long cnonceExpiresAt) {
        this.cnonceExpiresAt = cnonceExpiresAt;
        return this;
    }


    /**
     * The credentials that can be obtained by presenting the access token.
     */
    public AuthIntrospectionApiResponseBody withIssuableCredentials(@Nullable String issuableCredentials) {
        this.issuableCredentials = issuableCredentials;
        return this;
    }


    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public AuthIntrospectionApiResponseBody withDpopNonce(@Nullable String dpopNonce) {
        this.dpopNonce = dpopNonce;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthIntrospectionApiResponseBody other = (AuthIntrospectionApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.existent, other.existent) &&
            Utils.enhancedDeepEquals(this.usable, other.usable) &&
            Utils.enhancedDeepEquals(this.sufficient, other.sufficient) &&
            Utils.enhancedDeepEquals(this.refreshable, other.refreshable) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.certificateThumbprint, other.certificateThumbprint) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.accessTokenResources, other.accessTokenResources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.scopeDetails, other.scopeDetails) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.grant, other.grant) &&
            Utils.enhancedDeepEquals(this.forExternalAttachment, other.forExternalAttachment) &&
            Utils.enhancedDeepEquals(this.consentedClaims, other.consentedClaims) &&
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.acr, other.acr) &&
            Utils.enhancedDeepEquals(this.authTime, other.authTime) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed) &&
            Utils.enhancedDeepEquals(this.forCredentialIssuance, other.forCredentialIssuance) &&
            Utils.enhancedDeepEquals(this.cnonce, other.cnonce) &&
            Utils.enhancedDeepEquals(this.cnonceExpiresAt, other.cnonceExpiresAt) &&
            Utils.enhancedDeepEquals(this.issuableCredentials, other.issuableCredentials) &&
            Utils.enhancedDeepEquals(this.dpopNonce, other.dpopNonce);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, clientId, clientIdAlias,
            clientIdAliasUsed, expiresAt, subject,
            scopes, existent, usable,
            sufficient, refreshable, properties,
            certificateThumbprint, resources, accessTokenResources,
            authorizationDetails, serviceAttributes, clientAttributes,
            scopeDetails, grantId, grant,
            forExternalAttachment, consentedClaims, grantType,
            acr, authTime, clientEntityId,
            clientEntityIdUsed, forCredentialIssuance, cnonce,
            cnonceExpiresAt, issuableCredentials, dpopNonce);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthIntrospectionApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "expiresAt", expiresAt,
                "subject", subject,
                "scopes", scopes,
                "existent", existent,
                "usable", usable,
                "sufficient", sufficient,
                "refreshable", refreshable,
                "properties", properties,
                "certificateThumbprint", certificateThumbprint,
                "resources", resources,
                "accessTokenResources", accessTokenResources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "scopeDetails", scopeDetails,
                "grantId", grantId,
                "grant", grant,
                "forExternalAttachment", forExternalAttachment,
                "consentedClaims", consentedClaims,
                "grantType", grantType,
                "acr", acr,
                "authTime", authTime,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed,
                "forCredentialIssuance", forCredentialIssuance,
                "cnonce", cnonce,
                "cnonceExpiresAt", cnonceExpiresAt,
                "issuableCredentials", issuableCredentials,
                "dpopNonce", dpopNonce);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthIntrospectionApiAction action;

        private String responseContent;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private Long expiresAt;

        private String subject;

        private List<String> scopes;

        private Boolean existent;

        private Boolean usable;

        private Boolean sufficient;

        private Boolean refreshable;

        private List<AuthIntrospectionApiProperty> properties;

        private String certificateThumbprint;

        private List<String> resources;

        private List<String> accessTokenResources;

        private AuthIntrospectionApiAuthorizationDetails authorizationDetails;

        private List<AuthIntrospectionApiServiceAttribute> serviceAttributes;

        private List<AuthIntrospectionApiClientAttribute> clientAttributes;

        private List<AuthIntrospectionApiScopeDetail> scopeDetails;

        private String grantId;

        private AuthIntrospectionApiGrant grant;

        private Boolean forExternalAttachment;

        private List<String> consentedClaims;

        private AuthIntrospectionApiGrantType grantType;

        private String acr;

        private Long authTime;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Boolean forCredentialIssuance;

        private String cnonce;

        private Long cnonceExpiresAt;

        private String issuableCredentials;

        private String dpopNonce;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthIntrospectionApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation can use as the value of `WWW-Authenticate` header on errors.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The client ID.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias when the token request was made. If the client did not have an alias, this parameter is `null`.
         * Also, if the token request was invalid and it failed to identify a client, this parameter is `null`.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * The flag which indicates whether the client ID alias was used when the token request was made.
         * `true` if the client ID alias was used when the token request was made.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The time at which the access token expires.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder expiresAt(@Nullable Long expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The subject who is associated with the access token.
         * The value of this property is `null` if the access token was issued using the flow of [Client Credentials Grant](tools.ietf.org/html/rfc6749#section-4.4).
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The scopes covered by the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * `true` if the access token exists.
         */
        public Builder existent(@Nullable Boolean existent) {
            this.existent = existent;
            return this;
        }

        /**
         * true` if the access token is usable (= exists and has not expired).
         */
        public Builder usable(@Nullable Boolean usable) {
            this.usable = usable;
            return this;
        }

        /**
         * `true` if the access token exists.
         */
        public Builder sufficient(@Nullable Boolean sufficient) {
            this.sufficient = sufficient;
            return this;
        }

        /**
         * `true` if the access token can be refreshed using the associated refresh token which had been issued
         * along with the access token. `false` if the refresh token for the access token has expired or the access
         * token has no associated refresh token.
         */
        public Builder refreshable(@Nullable Boolean refreshable) {
            this.refreshable = refreshable;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         */
        public Builder properties(@Nullable List<AuthIntrospectionApiProperty> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The client certificate thumbprint used to validate the access token.
         */
        public Builder certificateThumbprint(@Nullable String certificateThumbprint) {
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }

        /**
         * The target resources. This represents the resources specified by the `resource` request parameters
         * or by the `resource` property in the request object.
         * 
         * <p>See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The target resources this proeprty holds may be the same as or different from the ones `resource` property holds.
         * 
         * <p>In some flows, the initial request and the subsequent token request are sent to different endpoints.
         * Example flows are the Authorization Code Flow, the Refresh Token Flow, the CIBA Ping Mode, the CIBA Poll Mode and the Device Flow.
         * In these flows, not only the initial request but also the subsequent token request can include the `resource` request parameters.
         * The purpose of the `resource` request parameters in the token request is to narrow the range of the target resources from the original
         * set of target resources requested by the preceding initial request. If narrowing down is performed, the target resources holded by the
         * `resource` proeprty and the ones holded by this property are different. This property holds the narrowed set of target resources.
         * 
         * <p>See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder accessTokenResources(@Nullable List<String> accessTokenResources) {
            this.accessTokenResources = accessTokenResources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthIntrospectionApiAuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<AuthIntrospectionApiServiceAttribute> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<AuthIntrospectionApiClientAttribute> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * The scopes property of this class is a list of scope names. The property does not hold information
         * about scope attributes. This scopeDetails property was newly created to convey information about
         * scope attributes.
         */
        public Builder scopeDetails(@Nullable List<AuthIntrospectionApiScopeDetail> scopeDetails) {
            this.scopeDetails = scopeDetails;
            return this;
        }

        /**
         * The value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        public Builder grant(@Nullable AuthIntrospectionApiGrant grant) {
            this.grant = grant;
            return this;
        }

        /**
         * the flag which indicates whether the access token is for an external
         * attachment.
         */
        public Builder forExternalAttachment(@Nullable Boolean forExternalAttachment) {
            this.forExternalAttachment = forExternalAttachment;
            return this;
        }

        /**
         * the claims that the user has consented for the client application
         * to know.
         */
        public Builder consentedClaims(@Nullable List<String> consentedClaims) {
            this.consentedClaims = consentedClaims;
            return this;
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder grantType(@Nullable AuthIntrospectionApiGrantType grantType) {
            this.grantType = grantType;
            return this;
        }

        /**
         * The Authentication Context Class Reference of the user authentication that the authorization server performed 
         * during the course of issuing the access token.
         */
        public Builder acr(@Nullable String acr) {
            this.acr = acr;
            return this;
        }

        /**
         * The time when the user authentication was performed during the course of issuing the access token.
         */
        public Builder authTime(@Nullable Long authTime) {
            this.authTime = authTime;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        /**
         * The flag indicating whether the token is for credential issuance.
         */
        public Builder forCredentialIssuance(@Nullable Boolean forCredentialIssuance) {
            this.forCredentialIssuance = forCredentialIssuance;
            return this;
        }

        /**
         * The c_nonce
         */
        public Builder cnonce(@Nullable String cnonce) {
            this.cnonce = cnonce;
            return this;
        }

        /**
         * The time at which the `c_nonce` expires.
         */
        public Builder cnonceExpiresAt(@Nullable Long cnonceExpiresAt) {
            this.cnonceExpiresAt = cnonceExpiresAt;
            return this;
        }

        /**
         * The credentials that can be obtained by presenting the access token.
         */
        public Builder issuableCredentials(@Nullable String issuableCredentials) {
            this.issuableCredentials = issuableCredentials;
            return this;
        }

        /**
         * The expected nonce value for DPoP proof JWT, which should be used
         * as the value of the `DPoP-Nonce` HTTP header.
         */
        public Builder dpopNonce(@Nullable String dpopNonce) {
            this.dpopNonce = dpopNonce;
            return this;
        }

        public AuthIntrospectionApiResponseBody build() {
            return new AuthIntrospectionApiResponseBody(
                resultCode, resultMessage, action,
                responseContent, clientId, clientIdAlias,
                clientIdAliasUsed, expiresAt, subject,
                scopes, existent, usable,
                sufficient, refreshable, properties,
                certificateThumbprint, resources, accessTokenResources,
                authorizationDetails, serviceAttributes, clientAttributes,
                scopeDetails, grantId, grant,
                forExternalAttachment, consentedClaims, grantType,
                acr, authTime, clientEntityId,
                clientEntityIdUsed, forCredentialIssuance, cnonce,
                cnonceExpiresAt, issuableCredentials, dpopNonce);
        }

    }
}
