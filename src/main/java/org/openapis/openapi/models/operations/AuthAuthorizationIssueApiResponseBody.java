/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthAuthorizationIssueApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthAuthorizationIssueApiAction action;

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The newly issued access token. Note that an access token is issued from an authorization endpoint only
     * when `response_type` contains token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
     * since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * The duration of the newly issued access token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
     * when `response_type` contains `id_token`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    private String idToken;

    /**
     * The newly issued authorization code. Note that an authorization code is issued only
     * when `response_type` contains code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationCode")
    private String authorizationCode;

    /**
     * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
     * this property is always set to `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAccessToken")
    private String jwtAccessToken;

    /**
     * The information about the ticket.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticketInfo")
    private String ticketInfo;

    @JsonCreator
    public AuthAuthorizationIssueApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthAuthorizationIssueApiAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("accessTokenExpiresAt") @Nullable Long accessTokenExpiresAt,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("idToken") @Nullable String idToken,
            @JsonProperty("authorizationCode") @Nullable String authorizationCode,
            @JsonProperty("jwtAccessToken") @Nullable String jwtAccessToken,
            @JsonProperty("ticketInfo") @Nullable String ticketInfo) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.accessToken = accessToken;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.accessTokenDuration = accessTokenDuration;
        this.idToken = idToken;
        this.authorizationCode = authorizationCode;
        this.jwtAccessToken = jwtAccessToken;
        this.ticketInfo = ticketInfo;
    }
    
    public AuthAuthorizationIssueApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthAuthorizationIssueApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The newly issued access token. Note that an access token is issued from an authorization endpoint only
     * when `response_type` contains token.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
     * since the Unix epoch (1970-01-01).
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * The duration of the newly issued access token in seconds.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
     * when `response_type` contains `id_token`.
     */
    public Optional<String> idToken() {
        return Optional.ofNullable(this.idToken);
    }

    /**
     * The newly issued authorization code. Note that an authorization code is issued only
     * when `response_type` contains code.
     */
    public Optional<String> authorizationCode() {
        return Optional.ofNullable(this.authorizationCode);
    }

    /**
     * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
     * this property is always set to `null`.
     */
    public Optional<String> jwtAccessToken() {
        return Optional.ofNullable(this.jwtAccessToken);
    }

    /**
     * The information about the ticket.
     */
    public Optional<String> ticketInfo() {
        return Optional.ofNullable(this.ticketInfo);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthAuthorizationIssueApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthAuthorizationIssueApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthAuthorizationIssueApiResponseBody withAction(@Nullable AuthAuthorizationIssueApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public AuthAuthorizationIssueApiResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The newly issued access token. Note that an access token is issued from an authorization endpoint only
     * when `response_type` contains token.
     */
    public AuthAuthorizationIssueApiResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
     * since the Unix epoch (1970-01-01).
     */
    public AuthAuthorizationIssueApiResponseBody withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * The duration of the newly issued access token in seconds.
     */
    public AuthAuthorizationIssueApiResponseBody withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
     * when `response_type` contains `id_token`.
     */
    public AuthAuthorizationIssueApiResponseBody withIdToken(@Nullable String idToken) {
        this.idToken = idToken;
        return this;
    }


    /**
     * The newly issued authorization code. Note that an authorization code is issued only
     * when `response_type` contains code.
     */
    public AuthAuthorizationIssueApiResponseBody withAuthorizationCode(@Nullable String authorizationCode) {
        this.authorizationCode = authorizationCode;
        return this;
    }


    /**
     * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
     * this property is always set to `null`.
     */
    public AuthAuthorizationIssueApiResponseBody withJwtAccessToken(@Nullable String jwtAccessToken) {
        this.jwtAccessToken = jwtAccessToken;
        return this;
    }


    /**
     * The information about the ticket.
     */
    public AuthAuthorizationIssueApiResponseBody withTicketInfo(@Nullable String ticketInfo) {
        this.ticketInfo = ticketInfo;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthAuthorizationIssueApiResponseBody other = (AuthAuthorizationIssueApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.idToken, other.idToken) &&
            Utils.enhancedDeepEquals(this.authorizationCode, other.authorizationCode) &&
            Utils.enhancedDeepEquals(this.jwtAccessToken, other.jwtAccessToken) &&
            Utils.enhancedDeepEquals(this.ticketInfo, other.ticketInfo);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, accessToken, accessTokenExpiresAt,
            accessTokenDuration, idToken, authorizationCode,
            jwtAccessToken, ticketInfo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthAuthorizationIssueApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "accessToken", accessToken,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "accessTokenDuration", accessTokenDuration,
                "idToken", idToken,
                "authorizationCode", authorizationCode,
                "jwtAccessToken", jwtAccessToken,
                "ticketInfo", ticketInfo);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthAuthorizationIssueApiAction action;

        private String responseContent;

        private String accessToken;

        private Long accessTokenExpiresAt;

        private Long accessTokenDuration;

        private String idToken;

        private String authorizationCode;

        private String jwtAccessToken;

        private String ticketInfo;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthAuthorizationIssueApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client application.
         * Its format varies depending on the value of `action` parameter.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The newly issued access token. Note that an access token is issued from an authorization endpoint only
         * when `response_type` contains token.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The datetime at which the newly issued access token will expire. The value is represented in milliseconds
         * since the Unix epoch (1970-01-01).
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * The duration of the newly issued access token in seconds.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The newly issued ID token. Note that an ID token is issued from an authorization endpoint only
         * when `response_type` contains `id_token`.
         */
        public Builder idToken(@Nullable String idToken) {
            this.idToken = idToken;
            return this;
        }

        /**
         * The newly issued authorization code. Note that an authorization code is issued only
         * when `response_type` contains code.
         */
        public Builder authorizationCode(@Nullable String authorizationCode) {
            this.authorizationCode = authorizationCode;
            return this;
        }

        /**
         * The newly issued access token in JWT format. If the service is not configured to issue JWT-based access tokens,
         * this property is always set to `null`.
         */
        public Builder jwtAccessToken(@Nullable String jwtAccessToken) {
            this.jwtAccessToken = jwtAccessToken;
            return this;
        }

        /**
         * The information about the ticket.
         */
        public Builder ticketInfo(@Nullable String ticketInfo) {
            this.ticketInfo = ticketInfo;
            return this;
        }

        public AuthAuthorizationIssueApiResponseBody build() {
            return new AuthAuthorizationIssueApiResponseBody(
                resultCode, resultMessage, action,
                responseContent, accessToken, accessTokenExpiresAt,
                accessTokenDuration, idToken, authorizationCode,
                jwtAccessToken, ticketInfo);
        }

    }
}
