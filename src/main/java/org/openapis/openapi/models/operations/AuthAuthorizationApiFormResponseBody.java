/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthAuthorizationApiFormResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthAuthorizationApiFormAction action;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client")
    private AuthAuthorizationApiFormClient client;

    /**
     * The display mode which the client application requests by `display` request parameter.
     * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
     * 
     * <p>It is ensured that the value of `display` is one of the supported display modes which are specified
     * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
     * authorization request is not supported, an error is raised.
     * 
     * <p>Values for this property correspond to the values listed in
     * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display")
    private AuthAuthorizationApiFormDisplay display;

    /**
     * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
     * of the client application when the authorization request does not contain `max_age` request parameter.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
     * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
     * for `defaultMaxAge` configuration parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxAge")
    private Integer maxAge;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("service")
    private AuthAuthorizationApiFormService service;

    /**
     * The scopes that the client application requests. This value comes from `scope` request parameter.
     * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
     * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
     * the value of this parameter is `null`.
     * 
     * <p>It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
     * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
     * an error and are just ignored.
     * 
     * <p>OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
     * 
     * <p>| Name | Description |
     * | --- | --- |
     * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
     * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).&lt;br&gt;&lt;br&gt; The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
     * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
     * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). &lt;blockquote&gt;This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).&lt;/blockquote&gt;  |
     * 
     * <p>Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
     * when scope request parameter contains `offline_access`. This behavior is a requirement written in
     * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<AuthAuthorizationApiFormScope> scopes;

    /**
     * The locales that the client application presented as candidates to be used for UI.
     * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
     * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
     * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
     * cause an error and are just ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uiLocales")
    private List<String> uiLocales;

    /**
     * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
     * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported claim locales
     * which are specified by `supportedClaimsLocales` configuration parameter of the service.
     * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claimsLocales")
    private List<String> claimsLocales;

    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
     * which are expanded to claims.
     * 
     * <p>See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
     * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * for the special scopes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private List<String> claims;

    /**
     * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
     * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
     * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acrEssential")
    private Boolean acrEssential;

    /**
     * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
     * `false` if the value is the original numeric client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
     * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
     * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * default_acr_values" for `defaultAcrs` configuration parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acrs")
    private List<String> acrs;

    /**
     * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
     * The value comes from `sub` claim in `claims` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loginHint")
    private String loginHint;

    /**
     * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("prompts")
    private List<AuthAuthorizationApiFormPrompt> prompts;

    /**
     * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
     * 
     * <p>When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lowestPrompt")
    private AuthAuthorizationApiFormLowestPrompt lowestPrompt;

    /**
     * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestObjectPayload")
    private String requestObjectPayload;

    /**
     * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification.
     * You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ```
     * 
     * <p>This value of this property is the value of the `id_token` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "auth_time": { "essential": true },
     *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * this property holds the former value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenClaims")
    private String idTokenClaims;

    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoClaims")
    private String userInfoClaims;

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
     * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthAuthorizationApiFormAuthorizationDetails authorizationDetails;

    /**
     * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
     * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
     * 
     * <p>&gt; purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
     * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("purpose")
    private String purpose;

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * A ticket issued by Authlete to the service implementation. This is needed when the service
     * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
     * API.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket")
    private String ticket;

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicScopes")
    private List<AuthAuthorizationApiFormDynamicScope> dynamicScopes;

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmAction")
    private AuthAuthorizationApiFormGmAction gmAction;

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant")
    private AuthAuthorizationApiFormGrant grant;

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantSubject")
    private String grantSubject;

    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedClaimsForTx")
    private List<String> requestedClaimsForTx;

    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedVerifiedClaimsForTx")
    private List<List<String>> requestedVerifiedClaimsForTx;

    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformedClaims")
    private String transformedClaims;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    /**
     * Get the list of claims that the client application requests to be
     * embedded in userinfo responses. The value comes from the `"scope"`
     * and `"claims"` request parameters of the original authorization
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claimsAtUserInfo")
    private List<String> claimsAtUserInfo;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialOfferInfo")
    private AuthAuthorizationApiFormCredentialOfferInfo credentialOfferInfo;

    /**
     * Get the information about the &lt;b&gt;issuable credentials&lt;/b&gt; that can
     * be obtained by presenting the access token that will be issued as a
     * result of the authorization request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuableCredentials")
    private String issuableCredentials;

    @JsonCreator
    public AuthAuthorizationApiFormResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthAuthorizationApiFormAction action,
            @JsonProperty("client") @Nullable AuthAuthorizationApiFormClient client,
            @JsonProperty("display") @Nullable AuthAuthorizationApiFormDisplay display,
            @JsonProperty("maxAge") @Nullable Integer maxAge,
            @JsonProperty("service") @Nullable AuthAuthorizationApiFormService service,
            @JsonProperty("scopes") @Nullable List<AuthAuthorizationApiFormScope> scopes,
            @JsonProperty("uiLocales") @Nullable List<String> uiLocales,
            @JsonProperty("claimsLocales") @Nullable List<String> claimsLocales,
            @JsonProperty("claims") @Nullable List<String> claims,
            @JsonProperty("acrEssential") @Nullable Boolean acrEssential,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("acrs") @Nullable List<String> acrs,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("loginHint") @Nullable String loginHint,
            @JsonProperty("prompts") @Nullable List<AuthAuthorizationApiFormPrompt> prompts,
            @JsonProperty("lowestPrompt") @Nullable AuthAuthorizationApiFormLowestPrompt lowestPrompt,
            @JsonProperty("requestObjectPayload") @Nullable String requestObjectPayload,
            @JsonProperty("idTokenClaims") @Nullable String idTokenClaims,
            @JsonProperty("userInfoClaims") @Nullable String userInfoClaims,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("authorizationDetails") @Nullable AuthAuthorizationApiFormAuthorizationDetails authorizationDetails,
            @JsonProperty("purpose") @Nullable String purpose,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("ticket") @Nullable String ticket,
            @JsonProperty("dynamicScopes") @Nullable List<AuthAuthorizationApiFormDynamicScope> dynamicScopes,
            @JsonProperty("gmAction") @Nullable AuthAuthorizationApiFormGmAction gmAction,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("grant") @Nullable AuthAuthorizationApiFormGrant grant,
            @JsonProperty("grantSubject") @Nullable String grantSubject,
            @JsonProperty("requestedClaimsForTx") @Nullable List<String> requestedClaimsForTx,
            @JsonProperty("requestedVerifiedClaimsForTx") @Nullable List<List<String>> requestedVerifiedClaimsForTx,
            @JsonProperty("transformedClaims") @Nullable String transformedClaims,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed,
            @JsonProperty("claimsAtUserInfo") @Nullable List<String> claimsAtUserInfo,
            @JsonProperty("credentialOfferInfo") @Nullable AuthAuthorizationApiFormCredentialOfferInfo credentialOfferInfo,
            @JsonProperty("issuableCredentials") @Nullable String issuableCredentials) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.client = client;
        this.display = display;
        this.maxAge = maxAge;
        this.service = service;
        this.scopes = scopes;
        this.uiLocales = uiLocales;
        this.claimsLocales = claimsLocales;
        this.claims = claims;
        this.acrEssential = acrEssential;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.acrs = acrs;
        this.subject = subject;
        this.loginHint = loginHint;
        this.prompts = prompts;
        this.lowestPrompt = lowestPrompt;
        this.requestObjectPayload = requestObjectPayload;
        this.idTokenClaims = idTokenClaims;
        this.userInfoClaims = userInfoClaims;
        this.resources = resources;
        this.authorizationDetails = authorizationDetails;
        this.purpose = purpose;
        this.responseContent = responseContent;
        this.ticket = ticket;
        this.dynamicScopes = dynamicScopes;
        this.gmAction = gmAction;
        this.grantId = grantId;
        this.grant = grant;
        this.grantSubject = grantSubject;
        this.requestedClaimsForTx = requestedClaimsForTx;
        this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
        this.transformedClaims = transformedClaims;
        this.clientEntityIdUsed = clientEntityIdUsed;
        this.claimsAtUserInfo = claimsAtUserInfo;
        this.credentialOfferInfo = credentialOfferInfo;
        this.issuableCredentials = issuableCredentials;
    }
    
    public AuthAuthorizationApiFormResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthAuthorizationApiFormAction> action() {
        return Optional.ofNullable(this.action);
    }

    public Optional<AuthAuthorizationApiFormClient> client() {
        return Optional.ofNullable(this.client);
    }

    /**
     * The display mode which the client application requests by `display` request parameter.
     * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
     * 
     * <p>It is ensured that the value of `display` is one of the supported display modes which are specified
     * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
     * authorization request is not supported, an error is raised.
     * 
     * <p>Values for this property correspond to the values listed in
     * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
     */
    public Optional<AuthAuthorizationApiFormDisplay> display() {
        return Optional.ofNullable(this.display);
    }

    /**
     * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
     * of the client application when the authorization request does not contain `max_age` request parameter.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
     * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
     * for `defaultMaxAge` configuration parameter.
     */
    public Optional<Integer> maxAge() {
        return Optional.ofNullable(this.maxAge);
    }

    public Optional<AuthAuthorizationApiFormService> service() {
        return Optional.ofNullable(this.service);
    }

    /**
     * The scopes that the client application requests. This value comes from `scope` request parameter.
     * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
     * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
     * the value of this parameter is `null`.
     * 
     * <p>It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
     * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
     * an error and are just ignored.
     * 
     * <p>OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
     * 
     * <p>| Name | Description |
     * | --- | --- |
     * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
     * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).&lt;br&gt;&lt;br&gt; The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
     * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
     * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). &lt;blockquote&gt;This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).&lt;/blockquote&gt;  |
     * 
     * <p>Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
     * when scope request parameter contains `offline_access`. This behavior is a requirement written in
     * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
     */
    public Optional<List<AuthAuthorizationApiFormScope>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The locales that the client application presented as candidates to be used for UI.
     * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
     * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
     * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
     * cause an error and are just ignored.
     */
    public Optional<List<String>> uiLocales() {
        return Optional.ofNullable(this.uiLocales);
    }

    /**
     * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
     * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported claim locales
     * which are specified by `supportedClaimsLocales` configuration parameter of the service.
     * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
     */
    public Optional<List<String>> claimsLocales() {
        return Optional.ofNullable(this.claimsLocales);
    }

    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
     * which are expanded to claims.
     * 
     * <p>See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
     * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * for the special scopes.
     */
    public Optional<List<String>> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
     * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
     * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
     */
    public Optional<Boolean> acrEssential() {
        return Optional.ofNullable(this.acrEssential);
    }

    /**
     * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
     * `false` if the value is the original numeric client ID.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
     * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
     * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * default_acr_values" for `defaultAcrs` configuration parameter.
     */
    public Optional<List<String>> acrs() {
        return Optional.ofNullable(this.acrs);
    }

    /**
     * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
     * The value comes from `sub` claim in `claims` request parameter.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
     */
    public Optional<String> loginHint() {
        return Optional.ofNullable(this.loginHint);
    }

    /**
     * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
     */
    public Optional<List<AuthAuthorizationApiFormPrompt>> prompts() {
        return Optional.ofNullable(this.prompts);
    }

    /**
     * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
     * 
     * <p>When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
     */
    public Optional<AuthAuthorizationApiFormLowestPrompt> lowestPrompt() {
        return Optional.ofNullable(this.lowestPrompt);
    }

    /**
     * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
     */
    public Optional<String> requestObjectPayload() {
        return Optional.ofNullable(this.requestObjectPayload);
    }

    /**
     * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification.
     * You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ```
     * 
     * <p>This value of this property is the value of the `id_token` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "auth_time": { "essential": true },
     *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * this property holds the former value.
     */
    public Optional<String> idTokenClaims() {
        return Optional.ofNullable(this.idTokenClaims);
    }

    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    public Optional<String> userInfoClaims() {
        return Optional.ofNullable(this.userInfoClaims);
    }

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
     * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthAuthorizationApiFormAuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
     * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
     * 
     * <p>&gt; purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
     * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
     */
    public Optional<String> purpose() {
        return Optional.ofNullable(this.purpose);
    }

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * A ticket issued by Authlete to the service implementation. This is needed when the service
     * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
     * API.
     */
    public Optional<String> ticket() {
        return Optional.ofNullable(this.ticket);
    }

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public Optional<List<AuthAuthorizationApiFormDynamicScope>> dynamicScopes() {
        return Optional.ofNullable(this.dynamicScopes);
    }

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public Optional<AuthAuthorizationApiFormGmAction> gmAction() {
        return Optional.ofNullable(this.gmAction);
    }

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    public Optional<AuthAuthorizationApiFormGrant> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public Optional<String> grantSubject() {
        return Optional.ofNullable(this.grantSubject);
    }

    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    public Optional<List<String>> requestedClaimsForTx() {
        return Optional.ofNullable(this.requestedClaimsForTx);
    }

    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    public Optional<List<List<String>>> requestedVerifiedClaimsForTx() {
        return Optional.ofNullable(this.requestedVerifiedClaimsForTx);
    }

    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    public Optional<String> transformedClaims() {
        return Optional.ofNullable(this.transformedClaims);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    /**
     * Get the list of claims that the client application requests to be
     * embedded in userinfo responses. The value comes from the `"scope"`
     * and `"claims"` request parameters of the original authorization
     * request.
     */
    public Optional<List<String>> claimsAtUserInfo() {
        return Optional.ofNullable(this.claimsAtUserInfo);
    }

    public Optional<AuthAuthorizationApiFormCredentialOfferInfo> credentialOfferInfo() {
        return Optional.ofNullable(this.credentialOfferInfo);
    }

    /**
     * Get the information about the &lt;b&gt;issuable credentials&lt;/b&gt; that can
     * be obtained by presenting the access token that will be issued as a
     * result of the authorization request.
     */
    public Optional<String> issuableCredentials() {
        return Optional.ofNullable(this.issuableCredentials);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthAuthorizationApiFormResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthAuthorizationApiFormResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthAuthorizationApiFormResponseBody withAction(@Nullable AuthAuthorizationApiFormAction action) {
        this.action = action;
        return this;
    }


    public AuthAuthorizationApiFormResponseBody withClient(@Nullable AuthAuthorizationApiFormClient client) {
        this.client = client;
        return this;
    }


    /**
     * The display mode which the client application requests by `display` request parameter.
     * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
     * 
     * <p>It is ensured that the value of `display` is one of the supported display modes which are specified
     * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
     * authorization request is not supported, an error is raised.
     * 
     * <p>Values for this property correspond to the values listed in
     * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
     */
    public AuthAuthorizationApiFormResponseBody withDisplay(@Nullable AuthAuthorizationApiFormDisplay display) {
        this.display = display;
        return this;
    }


    /**
     * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
     * of the client application when the authorization request does not contain `max_age` request parameter.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
     * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
     * for `defaultMaxAge` configuration parameter.
     */
    public AuthAuthorizationApiFormResponseBody withMaxAge(@Nullable Integer maxAge) {
        this.maxAge = maxAge;
        return this;
    }


    public AuthAuthorizationApiFormResponseBody withService(@Nullable AuthAuthorizationApiFormService service) {
        this.service = service;
        return this;
    }


    /**
     * The scopes that the client application requests. This value comes from `scope` request parameter.
     * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
     * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
     * the value of this parameter is `null`.
     * 
     * <p>It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
     * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
     * an error and are just ignored.
     * 
     * <p>OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
     * 
     * <p>| Name | Description |
     * | --- | --- |
     * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
     * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
     * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).&lt;br&gt;&lt;br&gt; The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
     * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
     * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). &lt;blockquote&gt;This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).&lt;/blockquote&gt;  |
     * 
     * <p>Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
     * when scope request parameter contains `offline_access`. This behavior is a requirement written in
     * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
     */
    public AuthAuthorizationApiFormResponseBody withScopes(@Nullable List<AuthAuthorizationApiFormScope> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The locales that the client application presented as candidates to be used for UI.
     * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
     * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
     * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
     * cause an error and are just ignored.
     */
    public AuthAuthorizationApiFormResponseBody withUiLocales(@Nullable List<String> uiLocales) {
        this.uiLocales = uiLocales;
        return this;
    }


    /**
     * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
     * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
     * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
     * 
     * <p>It is ensured that locales listed by this parameters are contained in the list of supported claim locales
     * which are specified by `supportedClaimsLocales` configuration parameter of the service.
     * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
     */
    public AuthAuthorizationApiFormResponseBody withClaimsLocales(@Nullable List<String> claimsLocales) {
        this.claimsLocales = claimsLocales;
        return this;
    }


    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
     * which are expanded to claims.
     * 
     * <p>See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
     * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * for the special scopes.
     */
    public AuthAuthorizationApiFormResponseBody withClaims(@Nullable List<String> claims) {
        this.claims = claims;
        return this;
    }


    /**
     * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
     * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
     * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
     */
    public AuthAuthorizationApiFormResponseBody withAcrEssential(@Nullable Boolean acrEssential) {
        this.acrEssential = acrEssential;
        return this;
    }


    /**
     * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
     * `false` if the value is the original numeric client ID.
     */
    public AuthAuthorizationApiFormResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
     * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
     * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * default_acr_values" for `defaultAcrs` configuration parameter.
     */
    public AuthAuthorizationApiFormResponseBody withAcrs(@Nullable List<String> acrs) {
        this.acrs = acrs;
        return this;
    }


    /**
     * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
     * The value comes from `sub` claim in `claims` request parameter.
     */
    public AuthAuthorizationApiFormResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
     */
    public AuthAuthorizationApiFormResponseBody withLoginHint(@Nullable String loginHint) {
        this.loginHint = loginHint;
        return this;
    }


    /**
     * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
     */
    public AuthAuthorizationApiFormResponseBody withPrompts(@Nullable List<AuthAuthorizationApiFormPrompt> prompts) {
        this.prompts = prompts;
        return this;
    }


    /**
     * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
     * 
     * <p>When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
     * 
     * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
     */
    public AuthAuthorizationApiFormResponseBody withLowestPrompt(@Nullable AuthAuthorizationApiFormLowestPrompt lowestPrompt) {
        this.lowestPrompt = lowestPrompt;
        return this;
    }


    /**
     * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
     */
    public AuthAuthorizationApiFormResponseBody withRequestObjectPayload(@Nullable String requestObjectPayload) {
        this.requestObjectPayload = requestObjectPayload;
        return this;
    }


    /**
     * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification.
     * You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ```
     * 
     * <p>This value of this property is the value of the `id_token` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "auth_time": { "essential": true },
     *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * this property holds the former value.
     */
    public AuthAuthorizationApiFormResponseBody withIdTokenClaims(@Nullable String idTokenClaims) {
        this.idTokenClaims = idTokenClaims;
        return this;
    }


    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    public AuthAuthorizationApiFormResponseBody withUserInfoClaims(@Nullable String userInfoClaims) {
        this.userInfoClaims = userInfoClaims;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
     * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthAuthorizationApiFormResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthAuthorizationApiFormResponseBody withAuthorizationDetails(@Nullable AuthAuthorizationApiFormAuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
     * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
     * 
     * <p>&gt; purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
     * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
     */
    public AuthAuthorizationApiFormResponseBody withPurpose(@Nullable String purpose) {
        this.purpose = purpose;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format varies depending on the value of `action` parameter.
     */
    public AuthAuthorizationApiFormResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * A ticket issued by Authlete to the service implementation. This is needed when the service
     * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
     * API.
     */
    public AuthAuthorizationApiFormResponseBody withTicket(@Nullable String ticket) {
        this.ticket = ticket;
        return this;
    }


    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public AuthAuthorizationApiFormResponseBody withDynamicScopes(@Nullable List<AuthAuthorizationApiFormDynamicScope> dynamicScopes) {
        this.dynamicScopes = dynamicScopes;
        return this;
    }


    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public AuthAuthorizationApiFormResponseBody withGmAction(@Nullable AuthAuthorizationApiFormGmAction gmAction) {
        this.gmAction = gmAction;
        return this;
    }


    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public AuthAuthorizationApiFormResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    public AuthAuthorizationApiFormResponseBody withGrant(@Nullable AuthAuthorizationApiFormGrant grant) {
        this.grant = grant;
        return this;
    }


    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public AuthAuthorizationApiFormResponseBody withGrantSubject(@Nullable String grantSubject) {
        this.grantSubject = grantSubject;
        return this;
    }


    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    public AuthAuthorizationApiFormResponseBody withRequestedClaimsForTx(@Nullable List<String> requestedClaimsForTx) {
        this.requestedClaimsForTx = requestedClaimsForTx;
        return this;
    }


    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    public AuthAuthorizationApiFormResponseBody withRequestedVerifiedClaimsForTx(@Nullable List<List<String>> requestedVerifiedClaimsForTx) {
        this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
        return this;
    }


    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    public AuthAuthorizationApiFormResponseBody withTransformedClaims(@Nullable String transformedClaims) {
        this.transformedClaims = transformedClaims;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthAuthorizationApiFormResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    /**
     * Get the list of claims that the client application requests to be
     * embedded in userinfo responses. The value comes from the `"scope"`
     * and `"claims"` request parameters of the original authorization
     * request.
     */
    public AuthAuthorizationApiFormResponseBody withClaimsAtUserInfo(@Nullable List<String> claimsAtUserInfo) {
        this.claimsAtUserInfo = claimsAtUserInfo;
        return this;
    }


    public AuthAuthorizationApiFormResponseBody withCredentialOfferInfo(@Nullable AuthAuthorizationApiFormCredentialOfferInfo credentialOfferInfo) {
        this.credentialOfferInfo = credentialOfferInfo;
        return this;
    }


    /**
     * Get the information about the &lt;b&gt;issuable credentials&lt;/b&gt; that can
     * be obtained by presenting the access token that will be issued as a
     * result of the authorization request.
     */
    public AuthAuthorizationApiFormResponseBody withIssuableCredentials(@Nullable String issuableCredentials) {
        this.issuableCredentials = issuableCredentials;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthAuthorizationApiFormResponseBody other = (AuthAuthorizationApiFormResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.client, other.client) &&
            Utils.enhancedDeepEquals(this.display, other.display) &&
            Utils.enhancedDeepEquals(this.maxAge, other.maxAge) &&
            Utils.enhancedDeepEquals(this.service, other.service) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.uiLocales, other.uiLocales) &&
            Utils.enhancedDeepEquals(this.claimsLocales, other.claimsLocales) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.acrEssential, other.acrEssential) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.acrs, other.acrs) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.loginHint, other.loginHint) &&
            Utils.enhancedDeepEquals(this.prompts, other.prompts) &&
            Utils.enhancedDeepEquals(this.lowestPrompt, other.lowestPrompt) &&
            Utils.enhancedDeepEquals(this.requestObjectPayload, other.requestObjectPayload) &&
            Utils.enhancedDeepEquals(this.idTokenClaims, other.idTokenClaims) &&
            Utils.enhancedDeepEquals(this.userInfoClaims, other.userInfoClaims) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.purpose, other.purpose) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.dynamicScopes, other.dynamicScopes) &&
            Utils.enhancedDeepEquals(this.gmAction, other.gmAction) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.grant, other.grant) &&
            Utils.enhancedDeepEquals(this.grantSubject, other.grantSubject) &&
            Utils.enhancedDeepEquals(this.requestedClaimsForTx, other.requestedClaimsForTx) &&
            Utils.enhancedDeepEquals(this.requestedVerifiedClaimsForTx, other.requestedVerifiedClaimsForTx) &&
            Utils.enhancedDeepEquals(this.transformedClaims, other.transformedClaims) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed) &&
            Utils.enhancedDeepEquals(this.claimsAtUserInfo, other.claimsAtUserInfo) &&
            Utils.enhancedDeepEquals(this.credentialOfferInfo, other.credentialOfferInfo) &&
            Utils.enhancedDeepEquals(this.issuableCredentials, other.issuableCredentials);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            client, display, maxAge,
            service, scopes, uiLocales,
            claimsLocales, claims, acrEssential,
            clientIdAliasUsed, acrs, subject,
            loginHint, prompts, lowestPrompt,
            requestObjectPayload, idTokenClaims, userInfoClaims,
            resources, authorizationDetails, purpose,
            responseContent, ticket, dynamicScopes,
            gmAction, grantId, grant,
            grantSubject, requestedClaimsForTx, requestedVerifiedClaimsForTx,
            transformedClaims, clientEntityIdUsed, claimsAtUserInfo,
            credentialOfferInfo, issuableCredentials);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthAuthorizationApiFormResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "client", client,
                "display", display,
                "maxAge", maxAge,
                "service", service,
                "scopes", scopes,
                "uiLocales", uiLocales,
                "claimsLocales", claimsLocales,
                "claims", claims,
                "acrEssential", acrEssential,
                "clientIdAliasUsed", clientIdAliasUsed,
                "acrs", acrs,
                "subject", subject,
                "loginHint", loginHint,
                "prompts", prompts,
                "lowestPrompt", lowestPrompt,
                "requestObjectPayload", requestObjectPayload,
                "idTokenClaims", idTokenClaims,
                "userInfoClaims", userInfoClaims,
                "resources", resources,
                "authorizationDetails", authorizationDetails,
                "purpose", purpose,
                "responseContent", responseContent,
                "ticket", ticket,
                "dynamicScopes", dynamicScopes,
                "gmAction", gmAction,
                "grantId", grantId,
                "grant", grant,
                "grantSubject", grantSubject,
                "requestedClaimsForTx", requestedClaimsForTx,
                "requestedVerifiedClaimsForTx", requestedVerifiedClaimsForTx,
                "transformedClaims", transformedClaims,
                "clientEntityIdUsed", clientEntityIdUsed,
                "claimsAtUserInfo", claimsAtUserInfo,
                "credentialOfferInfo", credentialOfferInfo,
                "issuableCredentials", issuableCredentials);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthAuthorizationApiFormAction action;

        private AuthAuthorizationApiFormClient client;

        private AuthAuthorizationApiFormDisplay display;

        private Integer maxAge;

        private AuthAuthorizationApiFormService service;

        private List<AuthAuthorizationApiFormScope> scopes;

        private List<String> uiLocales;

        private List<String> claimsLocales;

        private List<String> claims;

        private Boolean acrEssential;

        private Boolean clientIdAliasUsed;

        private List<String> acrs;

        private String subject;

        private String loginHint;

        private List<AuthAuthorizationApiFormPrompt> prompts;

        private AuthAuthorizationApiFormLowestPrompt lowestPrompt;

        private String requestObjectPayload;

        private String idTokenClaims;

        private String userInfoClaims;

        private List<String> resources;

        private AuthAuthorizationApiFormAuthorizationDetails authorizationDetails;

        private String purpose;

        private String responseContent;

        private String ticket;

        private List<AuthAuthorizationApiFormDynamicScope> dynamicScopes;

        private AuthAuthorizationApiFormGmAction gmAction;

        private String grantId;

        private AuthAuthorizationApiFormGrant grant;

        private String grantSubject;

        private List<String> requestedClaimsForTx;

        private List<List<String>> requestedVerifiedClaimsForTx;

        private String transformedClaims;

        private Boolean clientEntityIdUsed;

        private List<String> claimsAtUserInfo;

        private AuthAuthorizationApiFormCredentialOfferInfo credentialOfferInfo;

        private String issuableCredentials;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthAuthorizationApiFormAction action) {
            this.action = action;
            return this;
        }

        public Builder client(@Nullable AuthAuthorizationApiFormClient client) {
            this.client = client;
            return this;
        }

        /**
         * The display mode which the client application requests by `display` request parameter.
         * When the authorization request does not have `display` request parameter, `PAGE` is set as the default value.
         * 
         * <p>It is ensured that the value of `display` is one of the supported display modes which are specified
         * by `supportedDisplays` configuration parameter of the service. If the display mode specified by the
         * authorization request is not supported, an error is raised.
         * 
         * <p>Values for this property correspond to the values listed in
         * "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), display".
         */
        public Builder display(@Nullable AuthAuthorizationApiFormDisplay display) {
            this.display = display;
            return this;
        }

        /**
         * The maximum authentication age. This value comes from `max_age` request parameter, or `defaultMaxAge` configuration parameter
         * of the client application when the authorization request does not contain `max_age` request parameter.
         * 
         * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), max_age"
         * for `max_age` request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata), default_max_age"
         * for `defaultMaxAge` configuration parameter.
         */
        public Builder maxAge(@Nullable Integer maxAge) {
            this.maxAge = maxAge;
            return this;
        }

        public Builder service(@Nullable AuthAuthorizationApiFormService service) {
            this.service = service;
            return this;
        }

        /**
         * The scopes that the client application requests. This value comes from `scope` request parameter.
         * If the request does not contain `scope` parameter, this parameter is a list of scopes which are registered as default.
         * If the authorization request does not have `scope` request parameter and the service has not registered any default scope,
         * the value of this parameter is `null`.
         * 
         * <p>It is ensured that scopes listed by this parameters are contained in the list of supported scopes which are specified
         * by `supportedScopes` configuration parameter of the service. Unsupported scopes in the authorization request do not cause
         * an error and are just ignored.
         * 
         * <p>OpenID Connect defines some scope names which need to be treated specially. The table below lists the special scope names.
         * 
         * <p>| Name | Description |
         * | --- | --- |
         * | `openid` | This scope must be contained in `scope` request parameter to promote an OAuth 2.0 authorization request to an OpenID Connect request. It is described in "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), scope". |
         * | `profile` | This scope is used to request some claims to be embedded in the ID token. The claims are `name`, `family_name`, `given_name`, `middle_name`, `nickname`, `preferred_username`, `profile`, `picture`, `website`, `gender`, `birthdate`, `zoneinfo`, `locale`, and `updated_at`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
         * | `email` | This scope is used to request some claims to be embedded in the ID token. The claims are `email` and `email_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims). |
         * | `address` |  This scope is used to request `address` claim to be embedded in the ID token. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).&lt;br&gt;&lt;br&gt; The format of `address` claim is not a simple string. It is described in [OpenID Connect Core 1.0, 5.1.1. Address Claim](https://openid.net/specs/openid-connect-core-1_0.html#AddressClaim).  |
         * | `phone` | This scope is used to request some claims to be embedded in the ID token. The claims are `phone_number` and `phone_number_verified`. It is described in [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims).  |
         * | `offline_access` | The following is an excerpt about this scope from [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess). &lt;blockquote&gt;This scope value requests that an OAuth 2.0 Refresh Token be issued that can be used to obtain an Access Token that grants access to the end-user's userinfo endpoint even when the end-user is not present (not logged in).&lt;/blockquote&gt;  |
         * 
         * <p>Note that, if `response_type` request parameter does not contain code, `offline_acccess` scope is removed from this list even
         * when scope request parameter contains `offline_access`. This behavior is a requirement written in
         * [OpenID Connect Core 1.0, 11. Offline Access](https://openid.net/specs/openid-connect-core-1_0.html#OfflineAccess).
         */
        public Builder scopes(@Nullable List<AuthAuthorizationApiFormScope> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The locales that the client application presented as candidates to be used for UI.
         * This value comes from `ui_locales` request parameter. The format of `ui_locales` is a space-separated list of language tag values
         * defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
         * See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), ui_locales" for details.
         * 
         * <p>It is ensured that locales listed by this parameters are contained in the list of supported UI locales which are specified
         * by `supportedUiLocales` configuration parameter of the service. Unsupported UI locales in the authorization request do not
         * cause an error and are just ignored.
         */
        public Builder uiLocales(@Nullable List<String> uiLocales) {
            this.uiLocales = uiLocales;
            return this;
        }

        /**
         * End-user's preferred languages and scripts for claims. This value comes from `claims_locales` request parameter.
         * The format of `claims_locales` is a space-separated list of language tag values defined in [RFC5646](https://datatracker.ietf.org/doc/html/rfc5646).
         * See "[OpenID Connect Core 1.0, 5.2. Claims Languages and Scripts](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsLanguagesAndScripts)" for details.
         * 
         * <p>It is ensured that locales listed by this parameters are contained in the list of supported claim locales
         * which are specified by `supportedClaimsLocales` configuration parameter of the service.
         * Unsupported claim locales in the authorization request do not cause an error and are just ignored.
         */
        public Builder claimsLocales(@Nullable List<String> claimsLocales) {
            this.claimsLocales = claimsLocales;
            return this;
        }

        /**
         * The list of claims that the client application requests to be embedded in the ID token.
         * The value comes from (1) `id_token` in `claims` request parameter [1] and/or (2) special scopes (`profile`, `email`, `address` and `phone`)
         * which are expanded to claims.
         * 
         * <p>See [OpenID Connect Core 1.0, 5.5. Requesting Claims using the "claims" Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter)
         * for `claims` request parameter, and see [OpenID Connect Core 1.0, 5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
         * for the special scopes.
         */
        public Builder claims(@Nullable List<String> claims) {
            this.claims = claims;
            return this;
        }

        /**
         * This boolean value indicates whether the authentication of the end-user must be one of the ACRs (Authentication Context Class References) listed in `acrs` parameter.
         * This parameter becomes `true` only when (1) the authorization request contains `claims` request parameter and (2) `acr` claim is in it, and (3) `essential` property of
         * the `acr` claim is `true`. See [OpenID Connect Core 1.0, 5.5.1.1. Requesting the "acr" Claim](https://openid.net/specs/openid-connect-core-1_0.html#acrSemantics) for details.
         */
        public Builder acrEssential(@Nullable Boolean acrEssential) {
            this.acrEssential = acrEssential;
            return this;
        }

        /**
         * `true` if the value of the `client_id` request parameter included in the authorization request is the client ID alias.
         * `false` if the value is the original numeric client ID.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The list of ACRs (Authentication Context Class References) one of which the client application requests to be satisfied for the authentication of the end-user.
         * This value comes from `acr_values` request parameter or `defaultAcrs` configuration parameter of the client application.
         * 
         * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), acr_values" for `acr_values`
         * request parameter, and see "[OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
         * default_acr_values" for `defaultAcrs` configuration parameter.
         */
        public Builder acrs(@Nullable List<String> acrs) {
            this.acrs = acrs;
            return this;
        }

        /**
         * The subject (= unique user ID managed by the authorization server implementation) that the client application expects to grant authorization.
         * The value comes from `sub` claim in `claims` request parameter.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * A hint about the login identifier of the end-user. The value comes from `login_hint` request parameter.
         */
        public Builder loginHint(@Nullable String loginHint) {
            this.loginHint = loginHint;
            return this;
        }

        /**
         * The list of values of prompt request parameter. See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for prompt request parameter.
         */
        public Builder prompts(@Nullable List<AuthAuthorizationApiFormPrompt> prompts) {
            this.prompts = prompts;
            return this;
        }

        /**
         * The prompt that the UI displayed to the end-user must satisfy as the minimum level. This value comes from `prompt` request parameter.
         * 
         * <p>When the authorization request does not contain `prompt` request parameter, `CONSENT` is used as the default value.
         * 
         * <p>See "[OpenID Connect Core 1.0, 3.1.2.1. Authentication Request](https://openid.net/specs/openid-connect-core-1_0.html#AuthRequest), prompt" for `prompt` request parameter.
         */
        public Builder lowestPrompt(@Nullable AuthAuthorizationApiFormLowestPrompt lowestPrompt) {
            this.lowestPrompt = lowestPrompt;
            return this;
        }

        /**
         * The payload part of the request object. The value of this proprty is `null` if the authorization request does not include a request object.
         */
        public Builder requestObjectPayload(@Nullable String requestObjectPayload) {
            this.requestObjectPayload = requestObjectPayload;
            return this;
        }

        /**
         * The value of the `id_token` property in the claims request parameter or in the claims property in a request object.
         * 
         * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
         * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
         * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
         * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
         * 
         * <p>The following is an excerpt from the specification.
         * You can find `userinfo` and `id_token` are top-level properties.
         * 
         * <p>```json
         * {
         *   "userinfo":
         *   {
         *     "given_name": { "essential": true },
         *     "nickname": null,
         *     "email": { "essential": true },
         *     "email_verified": { "essential": true },
         *     "picture": null,
         *     "http://example.info/claims/groups": null
         *   },
         *   "id_token":
         *   {
         *     "auth_time": { "essential": true },
         *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
         *   }
         * }
         * ```
         * 
         * <p>This value of this property is the value of the `id_token` property in JSON format.
         * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
         * 
         * <p>```json
         * {
         *   "auth_time": { "essential": true },
         *   "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
         * }
         * ```
         * 
         * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
         * this property holds the former value.
         */
        public Builder idTokenClaims(@Nullable String idTokenClaims) {
            this.idTokenClaims = idTokenClaims;
            return this;
        }

        /**
         * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in a request object.
         * 
         * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
         * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
         * In both the cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
         * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
         * 
         * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
         * 
         * <p>```json
         * {
         *   "userinfo":
         *   {
         *     "given_name": { "essential": true },
         *     "nickname": null,
         *     "email": { "essential": true },
         *     "email_verified": { "essential": true },
         *     "picture": null,
         *     "http://example.info/claims/groups": null
         *   },
         *   "id_token":
         *   {
         *     "auth_time": { "essential": true },
         *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
         *   }
         * }
         * ````
         * 
         * <p>The value of this property is the value of the `userinfo` property in JSON format.
         * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
         * 
         * <p>```json
         * {
         *   "given_name": { "essential": true },
         *   "nickname": null,
         *   "email": { "essential": true },
         *   "email_verified": { "essential": true },
         *   "picture": null,
         *   "http://example.info/claims/groups": null
         * }
         * ```
         * 
         * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
         * the value of this property holds the former value.
         */
        public Builder userInfoClaims(@Nullable String userInfoClaims) {
            this.userInfoClaims = userInfoClaims;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters or by the `resource` property in the request object.
         * If both are given, the values in the request object should be set. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthAuthorizationApiFormAuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The `purpose` request parameter is defined in [9. Transaction-specific Purpose](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-transaction-specific-purpos)
         * of [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html) as follows:
         * 
         * <p>&gt; purpose: OPTIONAL. String describing the purpose for obtaining certain user data from the OP. The purpose MUST NOT be shorter than 3 characters and MUST NOT be longer than 300 characters.
         * If these rules are violated, the authentication request MUST fail and the OP returns an error invalid_request to the RP.
         */
        public Builder purpose(@Nullable String purpose) {
            this.purpose = purpose;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client application.
         * Its format varies depending on the value of `action` parameter.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * A ticket issued by Authlete to the service implementation. This is needed when the service
         * implementation calls either `/auth/authorization/fail` API or `/auth/authorization/issue`
         * API.
         */
        public Builder ticket(@Nullable String ticket) {
            this.ticket = ticket;
            return this;
        }

        /**
         * The dynamic scopes which the client application requested by the scope request parameter.
         */
        public Builder dynamicScopes(@Nullable List<AuthAuthorizationApiFormDynamicScope> dynamicScopes) {
            this.dynamicScopes = dynamicScopes;
            return this;
        }

        /**
         * The grant management action of the device authorization request.
         * 
         * <p>The `grant_management_action` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
         */
        public Builder gmAction(@Nullable AuthAuthorizationApiFormGmAction gmAction) {
            this.gmAction = gmAction;
            return this;
        }

        /**
         * the value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        public Builder grant(@Nullable AuthAuthorizationApiFormGrant grant) {
            this.grant = grant;
            return this;
        }

        /**
         * The subject identifying the user who has given the grant identified
         * by the `grant_id` request parameter of the device authorization
         * request.
         * 
         * <p>Authlete 2.3 and newer versions support &lt;a href=
         * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
         * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
         * request parameter which is defined in the specification. If the value of
         * the request parameter is valid, #getGrantSubject() will return
         * the subject of the user who has given the grant to the client application.
         * Authorization server implementations may use the value returned from
         * #getGrantSubject() in order to determine the user to authenticate.
         * 
         * <p>The user your system will authenticate during the authorization process
         * (or has already authenticated) may be different from the user of the
         * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
         * does not mention anything about the case, so the behavior in the case is
         * left to implementations. Authlete will not perform the grant management
         * action when the `subject` passed to Authlete does not match the
         * user of the grant.
         */
        public Builder grantSubject(@Nullable String grantSubject) {
            this.grantSubject = grantSubject;
            return this;
        }

        /**
         * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
         * claims"&lt;/i&gt;.
         * 
         * <p>&lt;p&gt;
         * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
         * names of transformed claims in the `claims` request parameter.
         * The following is an example of the `claims` request parameter
         * that requests a predefined transformed claim named `18_or_over`
         * and a transformed claim named `nationality_usa` to be embedded
         * in the response from the userinfo endpoint.
         * &lt;/p&gt;
         * 
         * <p>```json
         * {
         *   "transformed_claims": {
         *     "nationality_usa": {
         *       "claim": "nationalities",
         *       "fn": [
         *         [ "eq", "USA" ],
         *         "any"
         *       ]
         *     }
         *   },
         *   "userinfo": {
         *     "::18_or_over": null,
         *     ":nationality_usa": null
         *   }
         * }
         * ```
         * 
         * <p>The example above assumes that a transformed claim named `18_or_over`
         * is predefined by the authorization server like below.
         * 
         * <p>```json
         * {
         *   "18_or_over": {
         *     "claim": "birthdate",
         *     "fn": [
         *       "years_ago",
         *       [ "gte", 18 ]
         *     ]
         *   }
         * }
         * ```
         * 
         * <p>In the example, the `nationalities` claim is requested indirectly
         * by the `nationality_usa` transformed claim. Likewise, the
         * `birthdate` claim is requested indirectly by the `18_or_over`
         * transformed claim.
         * 
         * <p>When the `claims` request parameter of an authorization request is
         * like the example above, this `requestedClaimsForTx` property will
         * hold the following value.
         * 
         * <p>```json
         * [ "birthdate", "nationalities" ]
         * ```
         * 
         * <p>It is expected that the authorization server implementation prepares values
         * of the listed claims and passes them as the value of the `claimsForTx`
         * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
         * is an example of the value of the `claimsForTx` request parameter.
         * 
         * <p>```json
         * {
         *   "birthdate": "1970-01-23",
         *   "nationalities": [ "DEU", "USA" ]
         * }
         * ```
         */
        public Builder requestedClaimsForTx(@Nullable List<String> requestedClaimsForTx) {
            this.requestedClaimsForTx = requestedClaimsForTx;
            return this;
        }

        /**
         * Names of verified claims that will be referenced when transformed claims are computed.
         */
        public Builder requestedVerifiedClaimsForTx(@Nullable List<List<String>> requestedVerifiedClaimsForTx) {
            this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
            return this;
        }

        /**
         * the value of the `transformed_claims` property in the `claims` request
         * parameter of an authorization request or in the `claims` property in a
         * request object.
         */
        public Builder transformedClaims(@Nullable String transformedClaims) {
            this.transformedClaims = transformedClaims;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        /**
         * Get the list of claims that the client application requests to be
         * embedded in userinfo responses. The value comes from the `"scope"`
         * and `"claims"` request parameters of the original authorization
         * request.
         */
        public Builder claimsAtUserInfo(@Nullable List<String> claimsAtUserInfo) {
            this.claimsAtUserInfo = claimsAtUserInfo;
            return this;
        }

        public Builder credentialOfferInfo(@Nullable AuthAuthorizationApiFormCredentialOfferInfo credentialOfferInfo) {
            this.credentialOfferInfo = credentialOfferInfo;
            return this;
        }

        /**
         * Get the information about the &lt;b&gt;issuable credentials&lt;/b&gt; that can
         * be obtained by presenting the access token that will be issued as a
         * result of the authorization request.
         */
        public Builder issuableCredentials(@Nullable String issuableCredentials) {
            this.issuableCredentials = issuableCredentials;
            return this;
        }

        public AuthAuthorizationApiFormResponseBody build() {
            return new AuthAuthorizationApiFormResponseBody(
                resultCode, resultMessage, action,
                client, display, maxAge,
                service, scopes, uiLocales,
                claimsLocales, claims, acrEssential,
                clientIdAliasUsed, acrs, subject,
                loginHint, prompts, lowestPrompt,
                requestObjectPayload, idTokenClaims, userInfoClaims,
                resources, authorizationDetails, purpose,
                responseContent, ticket, dynamicScopes,
                gmAction, grantId, grant,
                grantSubject, requestedClaimsForTx, requestedVerifiedClaimsForTx,
                transformedClaims, clientEntityIdUsed, claimsAtUserInfo,
                credentialOfferInfo, issuableCredentials);
        }

    }
}
