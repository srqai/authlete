/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * ClientRegistrationApiRequestEncryptionEnc
 * 
 * <p>This is the encryption algorithm to be used when encrypting a JWT on client or server side.
 * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
 *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
 *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
 *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
 */
public enum ClientRegistrationApiRequestEncryptionEnc {
    A128_CBC_HS256("A128CBC_HS256"),
    A192_CBC_HS384("A192CBC_HS384"),
    A256_CBC_HS512("A256CBC_HS512"),
    A128_GCM("A128GCM"),
    A192_GCM("A192GCM"),
    A256_GCM("A256GCM");

    @JsonValue
    private final String value;

    ClientRegistrationApiRequestEncryptionEnc(String value) {
        this.value = value;
    }
    
    public String value() {
        return value;
    }
    
    public static Optional<ClientRegistrationApiRequestEncryptionEnc> fromValue(String value) {
        for (ClientRegistrationApiRequestEncryptionEnc o: ClientRegistrationApiRequestEncryptionEnc.values()) {
            if (Objects.deepEquals(o.value, value)) {
                return Optional.of(o);
            }
        }
        return Optional.empty();
    }
}

