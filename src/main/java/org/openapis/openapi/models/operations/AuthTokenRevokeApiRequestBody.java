/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthTokenRevokeApiRequestBody {
    /**
     * The identifier of an access token to revoke
     * 
     * <p>The hash of an access token is recognized as an identifier as well as the access token itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenIdentifier")
    private String accessTokenIdentifier;

    /**
     * The identifier of a refresh token to revoke.
     * 
     * <p>The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenIdentifier")
    private String refreshTokenIdentifier;

    /**
     * The client ID of the access token to be revoked.
     * 
     * <p>Both the numeric client ID and the alias are recognized as an identifier
     * of a client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdentifier")
    private String clientIdentifier;

    /**
     * The subject of a resource owner.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    @JsonCreator
    public AuthTokenRevokeApiRequestBody(
            @JsonProperty("accessTokenIdentifier") @Nullable String accessTokenIdentifier,
            @JsonProperty("refreshTokenIdentifier") @Nullable String refreshTokenIdentifier,
            @JsonProperty("clientIdentifier") @Nullable String clientIdentifier,
            @JsonProperty("subject") @Nullable String subject) {
        this.accessTokenIdentifier = accessTokenIdentifier;
        this.refreshTokenIdentifier = refreshTokenIdentifier;
        this.clientIdentifier = clientIdentifier;
        this.subject = subject;
    }
    
    public AuthTokenRevokeApiRequestBody() {
        this(null, null, null,
            null);
    }

    /**
     * The identifier of an access token to revoke
     * 
     * <p>The hash of an access token is recognized as an identifier as well as the access token itself.
     */
    public Optional<String> accessTokenIdentifier() {
        return Optional.ofNullable(this.accessTokenIdentifier);
    }

    /**
     * The identifier of a refresh token to revoke.
     * 
     * <p>The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
     */
    public Optional<String> refreshTokenIdentifier() {
        return Optional.ofNullable(this.refreshTokenIdentifier);
    }

    /**
     * The client ID of the access token to be revoked.
     * 
     * <p>Both the numeric client ID and the alias are recognized as an identifier
     * of a client.
     */
    public Optional<String> clientIdentifier() {
        return Optional.ofNullable(this.clientIdentifier);
    }

    /**
     * The subject of a resource owner.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The identifier of an access token to revoke
     * 
     * <p>The hash of an access token is recognized as an identifier as well as the access token itself.
     */
    public AuthTokenRevokeApiRequestBody withAccessTokenIdentifier(@Nullable String accessTokenIdentifier) {
        this.accessTokenIdentifier = accessTokenIdentifier;
        return this;
    }


    /**
     * The identifier of a refresh token to revoke.
     * 
     * <p>The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
     */
    public AuthTokenRevokeApiRequestBody withRefreshTokenIdentifier(@Nullable String refreshTokenIdentifier) {
        this.refreshTokenIdentifier = refreshTokenIdentifier;
        return this;
    }


    /**
     * The client ID of the access token to be revoked.
     * 
     * <p>Both the numeric client ID and the alias are recognized as an identifier
     * of a client.
     */
    public AuthTokenRevokeApiRequestBody withClientIdentifier(@Nullable String clientIdentifier) {
        this.clientIdentifier = clientIdentifier;
        return this;
    }


    /**
     * The subject of a resource owner.
     */
    public AuthTokenRevokeApiRequestBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenRevokeApiRequestBody other = (AuthTokenRevokeApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.accessTokenIdentifier, other.accessTokenIdentifier) &&
            Utils.enhancedDeepEquals(this.refreshTokenIdentifier, other.refreshTokenIdentifier) &&
            Utils.enhancedDeepEquals(this.clientIdentifier, other.clientIdentifier) &&
            Utils.enhancedDeepEquals(this.subject, other.subject);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessTokenIdentifier, refreshTokenIdentifier, clientIdentifier,
            subject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenRevokeApiRequestBody.class,
                "accessTokenIdentifier", accessTokenIdentifier,
                "refreshTokenIdentifier", refreshTokenIdentifier,
                "clientIdentifier", clientIdentifier,
                "subject", subject);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessTokenIdentifier;

        private String refreshTokenIdentifier;

        private String clientIdentifier;

        private String subject;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The identifier of an access token to revoke
         * 
         * <p>The hash of an access token is recognized as an identifier as well as the access token itself.
         */
        public Builder accessTokenIdentifier(@Nullable String accessTokenIdentifier) {
            this.accessTokenIdentifier = accessTokenIdentifier;
            return this;
        }

        /**
         * The identifier of a refresh token to revoke.
         * 
         * <p>The hash of a refresh token is recognized as an identifier as well as the refresh token itself.
         */
        public Builder refreshTokenIdentifier(@Nullable String refreshTokenIdentifier) {
            this.refreshTokenIdentifier = refreshTokenIdentifier;
            return this;
        }

        /**
         * The client ID of the access token to be revoked.
         * 
         * <p>Both the numeric client ID and the alias are recognized as an identifier
         * of a client.
         */
        public Builder clientIdentifier(@Nullable String clientIdentifier) {
            this.clientIdentifier = clientIdentifier;
            return this;
        }

        /**
         * The subject of a resource owner.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        public AuthTokenRevokeApiRequestBody build() {
            return new AuthTokenRevokeApiRequestBody(
                accessTokenIdentifier, refreshTokenIdentifier, clientIdentifier,
                subject);
        }

    }
}
