/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ClientRegistrationApiExtension {
    /**
     * The set of scopes that the client application is allowed to request. This paramter will be one
     * of the following.
     * 
     * <p>  - `null`
     *   - an empty set
     *   - a set with at least one element
     * 
     * <p>When the value of this parameter is `null`, it means that the set of scopes that the client
     * application is allowed to request is the set of the scopes that the service supports. When the
     * value of this parameter is an empty set, it means that the client application is not allowed to
     * request any scopes. When the value of this parameter is a set with at least one element, it means
     * that the set is the set of scopes that the client application is allowed to request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestableScopes")
    private List<String> requestableScopes;

    /**
     * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
     * can define the set of scopes which this client application can request. If `false`, this client
     * application can request any scope which is supported by the authorization server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestableScopesEnabled")
    private Boolean requestableScopesEnabled;

    /**
     * The value of the duration of access tokens per client in seconds. In normal cases, the value of
     * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
     * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of access tokens issued to the client application.
     * 
     * <p>Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
     * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
     * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of refresh tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenDuration")
    private Long refreshTokenDuration;

    /**
     * The value of the duration of ID tokens per client in seconds. In normal cases, the value
     * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
     * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of ID tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenDuration")
    private Long idTokenDuration;

    /**
     * Get the flag indicating whether the client is explicitly given a
     * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenExchangePermitted")
    private Boolean tokenExchangePermitted;

    @JsonCreator
    public ClientRegistrationApiExtension(
            @JsonProperty("requestableScopes") @Nullable List<String> requestableScopes,
            @JsonProperty("requestableScopesEnabled") @Nullable Boolean requestableScopesEnabled,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("refreshTokenDuration") @Nullable Long refreshTokenDuration,
            @JsonProperty("idTokenDuration") @Nullable Long idTokenDuration,
            @JsonProperty("tokenExchangePermitted") @Nullable Boolean tokenExchangePermitted) {
        this.requestableScopes = requestableScopes;
        this.requestableScopesEnabled = requestableScopesEnabled;
        this.accessTokenDuration = accessTokenDuration;
        this.refreshTokenDuration = refreshTokenDuration;
        this.idTokenDuration = idTokenDuration;
        this.tokenExchangePermitted = tokenExchangePermitted;
    }
    
    public ClientRegistrationApiExtension() {
        this(null, null, null,
            null, null, null);
    }

    /**
     * The set of scopes that the client application is allowed to request. This paramter will be one
     * of the following.
     * 
     * <p>  - `null`
     *   - an empty set
     *   - a set with at least one element
     * 
     * <p>When the value of this parameter is `null`, it means that the set of scopes that the client
     * application is allowed to request is the set of the scopes that the service supports. When the
     * value of this parameter is an empty set, it means that the client application is not allowed to
     * request any scopes. When the value of this parameter is a set with at least one element, it means
     * that the set is the set of scopes that the client application is allowed to request.
     */
    public Optional<List<String>> requestableScopes() {
        return Optional.ofNullable(this.requestableScopes);
    }

    /**
     * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
     * can define the set of scopes which this client application can request. If `false`, this client
     * application can request any scope which is supported by the authorization server.
     */
    public Optional<Boolean> requestableScopesEnabled() {
        return Optional.ofNullable(this.requestableScopesEnabled);
    }

    /**
     * The value of the duration of access tokens per client in seconds. In normal cases, the value of
     * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
     * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of access tokens issued to the client application.
     * 
     * <p>Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
     * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
     * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of refresh tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public Optional<Long> refreshTokenDuration() {
        return Optional.ofNullable(this.refreshTokenDuration);
    }

    /**
     * The value of the duration of ID tokens per client in seconds. In normal cases, the value
     * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
     * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of ID tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public Optional<Long> idTokenDuration() {
        return Optional.ofNullable(this.idTokenDuration);
    }

    /**
     * Get the flag indicating whether the client is explicitly given a
     * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
     */
    public Optional<Boolean> tokenExchangePermitted() {
        return Optional.ofNullable(this.tokenExchangePermitted);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The set of scopes that the client application is allowed to request. This paramter will be one
     * of the following.
     * 
     * <p>  - `null`
     *   - an empty set
     *   - a set with at least one element
     * 
     * <p>When the value of this parameter is `null`, it means that the set of scopes that the client
     * application is allowed to request is the set of the scopes that the service supports. When the
     * value of this parameter is an empty set, it means that the client application is not allowed to
     * request any scopes. When the value of this parameter is a set with at least one element, it means
     * that the set is the set of scopes that the client application is allowed to request.
     */
    public ClientRegistrationApiExtension withRequestableScopes(@Nullable List<String> requestableScopes) {
        this.requestableScopes = requestableScopes;
        return this;
    }


    /**
     * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
     * can define the set of scopes which this client application can request. If `false`, this client
     * application can request any scope which is supported by the authorization server.
     */
    public ClientRegistrationApiExtension withRequestableScopesEnabled(@Nullable Boolean requestableScopesEnabled) {
        this.requestableScopesEnabled = requestableScopesEnabled;
        return this;
    }


    /**
     * The value of the duration of access tokens per client in seconds. In normal cases, the value of
     * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
     * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of access tokens issued to the client application.
     * 
     * <p>Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public ClientRegistrationApiExtension withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
     * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
     * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of refresh tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public ClientRegistrationApiExtension withRefreshTokenDuration(@Nullable Long refreshTokenDuration) {
        this.refreshTokenDuration = refreshTokenDuration;
        return this;
    }


    /**
     * The value of the duration of ID tokens per client in seconds. In normal cases, the value
     * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
     * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
     * and its value is less than the duration configured by the service, the value is used as the duration
     * of ID tokens issued to the client application.
     * 
     * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
     * too. Authlete chooses the minimum value among the candidates.
     */
    public ClientRegistrationApiExtension withIdTokenDuration(@Nullable Long idTokenDuration) {
        this.idTokenDuration = idTokenDuration;
        return this;
    }


    /**
     * Get the flag indicating whether the client is explicitly given a
     * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
     */
    public ClientRegistrationApiExtension withTokenExchangePermitted(@Nullable Boolean tokenExchangePermitted) {
        this.tokenExchangePermitted = tokenExchangePermitted;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientRegistrationApiExtension other = (ClientRegistrationApiExtension) o;
        return 
            Utils.enhancedDeepEquals(this.requestableScopes, other.requestableScopes) &&
            Utils.enhancedDeepEquals(this.requestableScopesEnabled, other.requestableScopesEnabled) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.refreshTokenDuration, other.refreshTokenDuration) &&
            Utils.enhancedDeepEquals(this.idTokenDuration, other.idTokenDuration) &&
            Utils.enhancedDeepEquals(this.tokenExchangePermitted, other.tokenExchangePermitted);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requestableScopes, requestableScopesEnabled, accessTokenDuration,
            refreshTokenDuration, idTokenDuration, tokenExchangePermitted);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientRegistrationApiExtension.class,
                "requestableScopes", requestableScopes,
                "requestableScopesEnabled", requestableScopesEnabled,
                "accessTokenDuration", accessTokenDuration,
                "refreshTokenDuration", refreshTokenDuration,
                "idTokenDuration", idTokenDuration,
                "tokenExchangePermitted", tokenExchangePermitted);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<String> requestableScopes;

        private Boolean requestableScopesEnabled;

        private Long accessTokenDuration;

        private Long refreshTokenDuration;

        private Long idTokenDuration;

        private Boolean tokenExchangePermitted;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The set of scopes that the client application is allowed to request. This paramter will be one
         * of the following.
         * 
         * <p>  - `null`
         *   - an empty set
         *   - a set with at least one element
         * 
         * <p>When the value of this parameter is `null`, it means that the set of scopes that the client
         * application is allowed to request is the set of the scopes that the service supports. When the
         * value of this parameter is an empty set, it means that the client application is not allowed to
         * request any scopes. When the value of this parameter is a set with at least one element, it means
         * that the set is the set of scopes that the client application is allowed to request.
         */
        public Builder requestableScopes(@Nullable List<String> requestableScopes) {
            this.requestableScopes = requestableScopes;
            return this;
        }

        /**
         * The flag to indicate whether "Requestable Scopes per Client" is enabled or not. If `true`, you
         * can define the set of scopes which this client application can request. If `false`, this client
         * application can request any scope which is supported by the authorization server.
         */
        public Builder requestableScopesEnabled(@Nullable Boolean requestableScopesEnabled) {
            this.requestableScopesEnabled = requestableScopesEnabled;
            return this;
        }

        /**
         * The value of the duration of access tokens per client in seconds. In normal cases, the value of
         * the service's `accessTokenDuration` property is used as the duration of access tokens issued by
         * the service. However, if this `accessTokenDuration` property holds a non-zero positive number
         * and its value is less than the duration configured by the service, the value is used as the duration
         * of access tokens issued to the client application.
         * 
         * <p>Note that the duration of access tokens can be controlled by the scope attribute `access_token.duration`,
         * too. Authlete chooses the minimum value among the candidates.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The value of the duration of refresh tokens per client in seconds. In normal cases, the value
         * of the service's `refreshTokenDuration` property is used as the duration of refresh tokens issued
         * by the service. However, if this `refreshTokenDuration` property holds a non-zero positive number
         * and its value is less than the duration configured by the service, the value is used as the duration
         * of refresh tokens issued to the client application.
         * 
         * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `refresh_token.duration`,
         * too. Authlete chooses the minimum value among the candidates.
         */
        public Builder refreshTokenDuration(@Nullable Long refreshTokenDuration) {
            this.refreshTokenDuration = refreshTokenDuration;
            return this;
        }

        /**
         * The value of the duration of ID tokens per client in seconds. In normal cases, the value
         * of the service's `idTokenDuration` property is used as the duration of ID tokens issued
         * by the service. However, if this `idTokenDuration` property holds a non-zero positive number
         * and its value is less than the duration configured by the service, the value is used as the duration
         * of ID tokens issued to the client application.
         * 
         * <p>Note that the duration of refresh tokens can be controlled by the scope attribute `id_token.duration`,
         * too. Authlete chooses the minimum value among the candidates.
         */
        public Builder idTokenDuration(@Nullable Long idTokenDuration) {
            this.idTokenDuration = idTokenDuration;
            return this;
        }

        /**
         * Get the flag indicating whether the client is explicitly given a
         * permission to make token exchange requests ([RFC 8693][https://www.rfc-editor.org/rfc/rfc8693.html])
         */
        public Builder tokenExchangePermitted(@Nullable Boolean tokenExchangePermitted) {
            this.tokenExchangePermitted = tokenExchangePermitted;
            return this;
        }

        public ClientRegistrationApiExtension build() {
            return new ClientRegistrationApiExtension(
                requestableScopes, requestableScopesEnabled, accessTokenDuration,
                refreshTokenDuration, idTokenDuration, tokenExchangePermitted);
        }

    }
}
