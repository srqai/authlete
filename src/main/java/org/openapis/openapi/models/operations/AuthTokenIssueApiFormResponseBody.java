/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthTokenIssueApiFormResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthTokenIssueApiFormAction action;

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format is JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * The duration of the newly issued access token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
     * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
     * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenExpiresAt")
    private Long refreshTokenExpiresAt;

    /**
     * The duration of the newly issued refresh token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenDuration")
    private Long refreshTokenDuration;

    /**
     * The client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias. If the client did not have an alias, this parameter is `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
     * the access token is not associated with any specific end-user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The scopes covered by the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthTokenIssueApiFormProperty> properties;

    /**
     * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
     * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
     * original random-string one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAccessToken")
    private String jwtAccessToken;

    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenResources")
    private List<String> accessTokenResources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthTokenIssueApiFormAuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<AuthTokenIssueApiFormServiceAttribute> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<AuthTokenIssueApiFormClientAttribute> clientAttributes;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    /**
     * The scopes associated with the refresh token. May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenScopes")
    private List<String> refreshTokenScopes;

    @JsonCreator
    public AuthTokenIssueApiFormResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthTokenIssueApiFormAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("accessTokenExpiresAt") @Nullable Long accessTokenExpiresAt,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("refreshToken") @Nullable String refreshToken,
            @JsonProperty("refreshTokenExpiresAt") @Nullable Long refreshTokenExpiresAt,
            @JsonProperty("refreshTokenDuration") @Nullable Long refreshTokenDuration,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("properties") @Nullable List<AuthTokenIssueApiFormProperty> properties,
            @JsonProperty("jwtAccessToken") @Nullable String jwtAccessToken,
            @JsonProperty("accessTokenResources") @Nullable List<String> accessTokenResources,
            @JsonProperty("authorizationDetails") @Nullable AuthTokenIssueApiFormAuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<AuthTokenIssueApiFormServiceAttribute> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<AuthTokenIssueApiFormClientAttribute> clientAttributes,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed,
            @JsonProperty("refreshTokenScopes") @Nullable List<String> refreshTokenScopes) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.accessToken = accessToken;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.accessTokenDuration = accessTokenDuration;
        this.refreshToken = refreshToken;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        this.refreshTokenDuration = refreshTokenDuration;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.subject = subject;
        this.scopes = scopes;
        this.properties = properties;
        this.jwtAccessToken = jwtAccessToken;
        this.accessTokenResources = accessTokenResources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
        this.refreshTokenScopes = refreshTokenScopes;
    }
    
    public AuthTokenIssueApiFormResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthTokenIssueApiFormAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format is JSON.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * The duration of the newly issued access token in seconds.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
     * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
     * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }

    /**
     * The duration of the newly issued refresh token in seconds.
     */
    public Optional<Long> refreshTokenDuration() {
        return Optional.ofNullable(this.refreshTokenDuration);
    }

    /**
     * The client ID.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias. If the client did not have an alias, this parameter is `null`.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
     * the access token is not associated with any specific end-user.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The scopes covered by the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    public Optional<List<AuthTokenIssueApiFormProperty>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
     * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
     * original random-string one.
     */
    public Optional<String> jwtAccessToken() {
        return Optional.ofNullable(this.jwtAccessToken);
    }

    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> accessTokenResources() {
        return Optional.ofNullable(this.accessTokenResources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthTokenIssueApiFormAuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<AuthTokenIssueApiFormServiceAttribute>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<AuthTokenIssueApiFormClientAttribute>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    /**
     * The scopes associated with the refresh token. May be null.
     */
    public Optional<List<String>> refreshTokenScopes() {
        return Optional.ofNullable(this.refreshTokenScopes);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthTokenIssueApiFormResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthTokenIssueApiFormResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthTokenIssueApiFormResponseBody withAction(@Nullable AuthTokenIssueApiFormAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client application.
     * Its format is JSON.
     */
    public AuthTokenIssueApiFormResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
     */
    public AuthTokenIssueApiFormResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The datetime at which the newly issued access token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthTokenIssueApiFormResponseBody withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * The duration of the newly issued access token in seconds.
     */
    public AuthTokenIssueApiFormResponseBody withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
     * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
     * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
     */
    public AuthTokenIssueApiFormResponseBody withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }


    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthTokenIssueApiFormResponseBody withRefreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        return this;
    }


    /**
     * The duration of the newly issued refresh token in seconds.
     */
    public AuthTokenIssueApiFormResponseBody withRefreshTokenDuration(@Nullable Long refreshTokenDuration) {
        this.refreshTokenDuration = refreshTokenDuration;
        return this;
    }


    /**
     * The client ID.
     */
    public AuthTokenIssueApiFormResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias. If the client did not have an alias, this parameter is `null`.
     */
    public AuthTokenIssueApiFormResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * The flag which indicates whether the client ID alias was used when the token request was made.
     * `true` if the client ID alias was used when the token request was made.
     */
    public AuthTokenIssueApiFormResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The subject (= resource owner's ID) of the access token.
     * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
     * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
     * the access token is not associated with any specific end-user.
     */
    public AuthTokenIssueApiFormResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The scopes covered by the access token.
     */
    public AuthTokenIssueApiFormResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     * This parameter is `null` when no extra property is associated with the issued access token.
     */
    public AuthTokenIssueApiFormResponseBody withProperties(@Nullable List<AuthTokenIssueApiFormProperty> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
     * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
     * original random-string one.
     */
    public AuthTokenIssueApiFormResponseBody withJwtAccessToken(@Nullable String jwtAccessToken) {
        this.jwtAccessToken = jwtAccessToken;
        return this;
    }


    /**
     * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
     */
    public AuthTokenIssueApiFormResponseBody withAccessTokenResources(@Nullable List<String> accessTokenResources) {
        this.accessTokenResources = accessTokenResources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthTokenIssueApiFormResponseBody withAuthorizationDetails(@Nullable AuthTokenIssueApiFormAuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public AuthTokenIssueApiFormResponseBody withServiceAttributes(@Nullable List<AuthTokenIssueApiFormServiceAttribute> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public AuthTokenIssueApiFormResponseBody withClientAttributes(@Nullable List<AuthTokenIssueApiFormClientAttribute> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public AuthTokenIssueApiFormResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthTokenIssueApiFormResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    /**
     * The scopes associated with the refresh token. May be null.
     */
    public AuthTokenIssueApiFormResponseBody withRefreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
        this.refreshTokenScopes = refreshTokenScopes;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenIssueApiFormResponseBody other = (AuthTokenIssueApiFormResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.refreshTokenExpiresAt, other.refreshTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.refreshTokenDuration, other.refreshTokenDuration) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.jwtAccessToken, other.jwtAccessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenResources, other.accessTokenResources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed) &&
            Utils.enhancedDeepEquals(this.refreshTokenScopes, other.refreshTokenScopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, accessToken, accessTokenExpiresAt,
            accessTokenDuration, refreshToken, refreshTokenExpiresAt,
            refreshTokenDuration, clientId, clientIdAlias,
            clientIdAliasUsed, subject, scopes,
            properties, jwtAccessToken, accessTokenResources,
            authorizationDetails, serviceAttributes, clientAttributes,
            clientEntityId, clientEntityIdUsed, refreshTokenScopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenIssueApiFormResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "accessToken", accessToken,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "accessTokenDuration", accessTokenDuration,
                "refreshToken", refreshToken,
                "refreshTokenExpiresAt", refreshTokenExpiresAt,
                "refreshTokenDuration", refreshTokenDuration,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "subject", subject,
                "scopes", scopes,
                "properties", properties,
                "jwtAccessToken", jwtAccessToken,
                "accessTokenResources", accessTokenResources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed,
                "refreshTokenScopes", refreshTokenScopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthTokenIssueApiFormAction action;

        private String responseContent;

        private String accessToken;

        private Long accessTokenExpiresAt;

        private Long accessTokenDuration;

        private String refreshToken;

        private Long refreshTokenExpiresAt;

        private Long refreshTokenDuration;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String subject;

        private List<String> scopes;

        private List<AuthTokenIssueApiFormProperty> properties;

        private String jwtAccessToken;

        private List<String> accessTokenResources;

        private AuthTokenIssueApiFormAuthorizationDetails authorizationDetails;

        private List<AuthTokenIssueApiFormServiceAttribute> serviceAttributes;

        private List<AuthTokenIssueApiFormClientAttribute> clientAttributes;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private List<String> refreshTokenScopes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthTokenIssueApiFormAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client application.
         * Its format is JSON.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The newly issued access token. This parameter is a non-null value only when the value of `action` parameter is `OK`.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The datetime at which the newly issued access token will expire.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * The duration of the newly issued access token in seconds.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The refresh token. This parameter is a non-null value only when `action` is `OK` and the service supports the refresh token flow.
         * If `refreshTokenKept` is set to `false`, a new refresh token is issued and the old refresh token used in the refresh token flow
         * is invalidated. On the contrary, if `refreshTokenKept` is set to `true`, the refresh token itself is not refreshed.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * The datetime at which the newly issued refresh token will expire.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder refreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        /**
         * The duration of the newly issued refresh token in seconds.
         */
        public Builder refreshTokenDuration(@Nullable Long refreshTokenDuration) {
            this.refreshTokenDuration = refreshTokenDuration;
            return this;
        }

        /**
         * The client ID.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias. If the client did not have an alias, this parameter is `null`.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * The flag which indicates whether the client ID alias was used when the token request was made.
         * `true` if the client ID alias was used when the token request was made.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The subject (= resource owner's ID) of the access token.
         * Even if an access token has been issued by calling `/api/auth/token` API, this parameter is `null` if the flow of the token request was
         * [Client Credentials Flow](https://datatracker.ietf.org/doc/html/rfc6749#section-4.4) (`grant_type=client_credentials`) because it means
         * the access token is not associated with any specific end-user.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The scopes covered by the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         * This parameter is `null` when no extra property is associated with the issued access token.
         */
        public Builder properties(@Nullable List<AuthTokenIssueApiFormProperty> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The newly issued access token in JWT format. If the authorization server is configured to issue JWT-based access tokens
         * (= if the service's `accessTokenSignAlg` value is a non-null value), a JWT-based access token is issued along with the
         * original random-string one.
         */
        public Builder jwtAccessToken(@Nullable String jwtAccessToken) {
            this.jwtAccessToken = jwtAccessToken;
            return this;
        }

        /**
         * The target resources of the access token being issued. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder accessTokenResources(@Nullable List<String> accessTokenResources) {
            this.accessTokenResources = accessTokenResources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthTokenIssueApiFormAuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<AuthTokenIssueApiFormServiceAttribute> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<AuthTokenIssueApiFormClientAttribute> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        /**
         * The scopes associated with the refresh token. May be null.
         */
        public Builder refreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
            this.refreshTokenScopes = refreshTokenScopes;
            return this;
        }

        public AuthTokenIssueApiFormResponseBody build() {
            return new AuthTokenIssueApiFormResponseBody(
                resultCode, resultMessage, action,
                responseContent, accessToken, accessTokenExpiresAt,
                accessTokenDuration, refreshToken, refreshTokenExpiresAt,
                refreshTokenDuration, clientId, clientIdAlias,
                clientIdAliasUsed, subject, scopes,
                properties, jwtAccessToken, accessTokenResources,
                authorizationDetails, serviceAttributes, clientAttributes,
                clientEntityId, clientEntityIdUsed, refreshTokenScopes);
        }

    }
}
