/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class IdtokenReissueApiRequestBody {
    /**
     * &lt;p&gt;
     * The value of this parameter should be (a) the value of the
     * "`jwtAccessToken`" parameter in a response from the
     * `/auth/token` API when the value is available, or (b)
     * the value of the "`accessToken`" parameter in the
     * response from the `/auth/token` API when the value of
     * the "`jwtAccessToken`" parameter is not available.
     * &lt;/p&gt;
     */
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * &lt;p&gt;
     * The value of this parameter should be the value of the
     * "`refreshToken`" parameter in a response from the
     * `/auth/token` API.
     * &lt;/p&gt;
     */
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * The value that should be used as the value of the "`sub`"
     * claim of the ID token.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional. When omitted, the value of the subject
     * associated with the access token is used.
     * &lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub")
    private String sub;

    /**
     * Additional claims that should be embedded in the payload part of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private String claims;

    /**
     * Additional parameters that should be embedded in the JWS header of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idtHeaderParams")
    private String idtHeaderParams;

    /**
     * The type of the "`aud`" claim of the ID token being issued.
     * 
     * <p>&lt;p&gt;
     * Valid values of this parameter are as follows.
     * &lt;/p&gt;
     * 
     * <p>&lt;blockquote&gt;
     * &lt;table border="1" cellpadding="5" style="border-collapse: collapse;"&gt;
     *   &lt;tr bgcolor="orange"&gt;
     *     &lt;th&gt;Value&lt;/th&gt;
     *     &lt;th&gt;Description&lt;/th&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`array`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes an array of strings.&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`string`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes a single string.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     * &lt;/blockquote&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter is optional, and the default value on omission is
     * "`array`".
     * &lt;/p&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter takes precedence over the `idTokenAudType` property
     * of Service (cf. Service#getIdTokenAudType()).
     * &lt;/p&gt;
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenAudType")
    private String idTokenAudType;

    @JsonCreator
    public IdtokenReissueApiRequestBody(
            @JsonProperty("accessToken") @Nonnull String accessToken,
            @JsonProperty("refreshToken") @Nonnull String refreshToken,
            @JsonProperty("sub") @Nullable String sub,
            @JsonProperty("claims") @Nullable String claims,
            @JsonProperty("idtHeaderParams") @Nullable String idtHeaderParams,
            @JsonProperty("idTokenAudType") @Nullable String idTokenAudType) {
        this.accessToken = Optional.ofNullable(accessToken)
            .orElseThrow(() -> new IllegalArgumentException("accessToken cannot be null"));
        this.refreshToken = Optional.ofNullable(refreshToken)
            .orElseThrow(() -> new IllegalArgumentException("refreshToken cannot be null"));
        this.sub = sub;
        this.claims = claims;
        this.idtHeaderParams = idtHeaderParams;
        this.idTokenAudType = idTokenAudType;
    }
    
    public IdtokenReissueApiRequestBody(
            @Nonnull String accessToken,
            @Nonnull String refreshToken) {
        this(accessToken, refreshToken, null,
            null, null, null);
    }

    /**
     * &lt;p&gt;
     * The value of this parameter should be (a) the value of the
     * "`jwtAccessToken`" parameter in a response from the
     * `/auth/token` API when the value is available, or (b)
     * the value of the "`accessToken`" parameter in the
     * response from the `/auth/token` API when the value of
     * the "`jwtAccessToken`" parameter is not available.
     * &lt;/p&gt;
     */
    public String accessToken() {
        return this.accessToken;
    }

    /**
     * &lt;p&gt;
     * The value of this parameter should be the value of the
     * "`refreshToken`" parameter in a response from the
     * `/auth/token` API.
     * &lt;/p&gt;
     */
    public String refreshToken() {
        return this.refreshToken;
    }

    /**
     * The value that should be used as the value of the "`sub`"
     * claim of the ID token.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional. When omitted, the value of the subject
     * associated with the access token is used.
     * &lt;/p&gt;
     */
    public Optional<String> sub() {
        return Optional.ofNullable(this.sub);
    }

    /**
     * Additional claims that should be embedded in the payload part of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    public Optional<String> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * Additional parameters that should be embedded in the JWS header of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    public Optional<String> idtHeaderParams() {
        return Optional.ofNullable(this.idtHeaderParams);
    }

    /**
     * The type of the "`aud`" claim of the ID token being issued.
     * 
     * <p>&lt;p&gt;
     * Valid values of this parameter are as follows.
     * &lt;/p&gt;
     * 
     * <p>&lt;blockquote&gt;
     * &lt;table border="1" cellpadding="5" style="border-collapse: collapse;"&gt;
     *   &lt;tr bgcolor="orange"&gt;
     *     &lt;th&gt;Value&lt;/th&gt;
     *     &lt;th&gt;Description&lt;/th&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`array`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes an array of strings.&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`string`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes a single string.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     * &lt;/blockquote&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter is optional, and the default value on omission is
     * "`array`".
     * &lt;/p&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter takes precedence over the `idTokenAudType` property
     * of Service (cf. Service#getIdTokenAudType()).
     * &lt;/p&gt;
     */
    public Optional<String> idTokenAudType() {
        return Optional.ofNullable(this.idTokenAudType);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * &lt;p&gt;
     * The value of this parameter should be (a) the value of the
     * "`jwtAccessToken`" parameter in a response from the
     * `/auth/token` API when the value is available, or (b)
     * the value of the "`accessToken`" parameter in the
     * response from the `/auth/token` API when the value of
     * the "`jwtAccessToken`" parameter is not available.
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withAccessToken(@Nonnull String accessToken) {
        this.accessToken = Utils.checkNotNull(accessToken, "accessToken");
        return this;
    }


    /**
     * &lt;p&gt;
     * The value of this parameter should be the value of the
     * "`refreshToken`" parameter in a response from the
     * `/auth/token` API.
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withRefreshToken(@Nonnull String refreshToken) {
        this.refreshToken = Utils.checkNotNull(refreshToken, "refreshToken");
        return this;
    }


    /**
     * The value that should be used as the value of the "`sub`"
     * claim of the ID token.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional. When omitted, the value of the subject
     * associated with the access token is used.
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withSub(@Nullable String sub) {
        this.sub = sub;
        return this;
    }


    /**
     * Additional claims that should be embedded in the payload part of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withClaims(@Nullable String claims) {
        this.claims = claims;
        return this;
    }


    /**
     * Additional parameters that should be embedded in the JWS header of
     * the ID token. The format is a JSON object.
     * 
     * <p>&lt;p&gt;
     * This parameter is optional.
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withIdtHeaderParams(@Nullable String idtHeaderParams) {
        this.idtHeaderParams = idtHeaderParams;
        return this;
    }


    /**
     * The type of the "`aud`" claim of the ID token being issued.
     * 
     * <p>&lt;p&gt;
     * Valid values of this parameter are as follows.
     * &lt;/p&gt;
     * 
     * <p>&lt;blockquote&gt;
     * &lt;table border="1" cellpadding="5" style="border-collapse: collapse;"&gt;
     *   &lt;tr bgcolor="orange"&gt;
     *     &lt;th&gt;Value&lt;/th&gt;
     *     &lt;th&gt;Description&lt;/th&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`array`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes an array of strings.&lt;/td&gt;
     *   &lt;/tr&gt;
     *   &lt;tr&gt;
     *     &lt;td&gt;"`string`"&lt;/td&gt;
     *     &lt;td&gt;The type of the `aud` claim becomes a single string.&lt;/td&gt;
     *   &lt;/tr&gt;
     * &lt;/table&gt;
     * &lt;/blockquote&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter is optional, and the default value on omission is
     * "`array`".
     * &lt;/p&gt;
     * 
     * <p>&lt;p&gt;
     * This parameter takes precedence over the `idTokenAudType` property
     * of Service (cf. Service#getIdTokenAudType()).
     * &lt;/p&gt;
     */
    public IdtokenReissueApiRequestBody withIdTokenAudType(@Nullable String idTokenAudType) {
        this.idTokenAudType = idTokenAudType;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IdtokenReissueApiRequestBody other = (IdtokenReissueApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.idtHeaderParams, other.idtHeaderParams) &&
            Utils.enhancedDeepEquals(this.idTokenAudType, other.idTokenAudType);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessToken, refreshToken, sub,
            claims, idtHeaderParams, idTokenAudType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IdtokenReissueApiRequestBody.class,
                "accessToken", accessToken,
                "refreshToken", refreshToken,
                "sub", sub,
                "claims", claims,
                "idtHeaderParams", idtHeaderParams,
                "idTokenAudType", idTokenAudType);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessToken;

        private String refreshToken;

        private String sub;

        private String claims;

        private String idtHeaderParams;

        private String idTokenAudType;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * &lt;p&gt;
         * The value of this parameter should be (a) the value of the
         * "`jwtAccessToken`" parameter in a response from the
         * `/auth/token` API when the value is available, or (b)
         * the value of the "`accessToken`" parameter in the
         * response from the `/auth/token` API when the value of
         * the "`jwtAccessToken`" parameter is not available.
         * &lt;/p&gt;
         */
        public Builder accessToken(@Nonnull String accessToken) {
            this.accessToken = Utils.checkNotNull(accessToken, "accessToken");
            return this;
        }

        /**
         * &lt;p&gt;
         * The value of this parameter should be the value of the
         * "`refreshToken`" parameter in a response from the
         * `/auth/token` API.
         * &lt;/p&gt;
         */
        public Builder refreshToken(@Nonnull String refreshToken) {
            this.refreshToken = Utils.checkNotNull(refreshToken, "refreshToken");
            return this;
        }

        /**
         * The value that should be used as the value of the "`sub`"
         * claim of the ID token.
         * 
         * <p>&lt;p&gt;
         * This parameter is optional. When omitted, the value of the subject
         * associated with the access token is used.
         * &lt;/p&gt;
         */
        public Builder sub(@Nullable String sub) {
            this.sub = sub;
            return this;
        }

        /**
         * Additional claims that should be embedded in the payload part of
         * the ID token. The format is a JSON object.
         * 
         * <p>&lt;p&gt;
         * This parameter is optional.
         * &lt;/p&gt;
         */
        public Builder claims(@Nullable String claims) {
            this.claims = claims;
            return this;
        }

        /**
         * Additional parameters that should be embedded in the JWS header of
         * the ID token. The format is a JSON object.
         * 
         * <p>&lt;p&gt;
         * This parameter is optional.
         * &lt;/p&gt;
         */
        public Builder idtHeaderParams(@Nullable String idtHeaderParams) {
            this.idtHeaderParams = idtHeaderParams;
            return this;
        }

        /**
         * The type of the "`aud`" claim of the ID token being issued.
         * 
         * <p>&lt;p&gt;
         * Valid values of this parameter are as follows.
         * &lt;/p&gt;
         * 
         * <p>&lt;blockquote&gt;
         * &lt;table border="1" cellpadding="5" style="border-collapse: collapse;"&gt;
         *   &lt;tr bgcolor="orange"&gt;
         *     &lt;th&gt;Value&lt;/th&gt;
         *     &lt;th&gt;Description&lt;/th&gt;
         *   &lt;/tr&gt;
         *   &lt;tr&gt;
         *     &lt;td&gt;"`array`"&lt;/td&gt;
         *     &lt;td&gt;The type of the `aud` claim becomes an array of strings.&lt;/td&gt;
         *   &lt;/tr&gt;
         *   &lt;tr&gt;
         *     &lt;td&gt;"`string`"&lt;/td&gt;
         *     &lt;td&gt;The type of the `aud` claim becomes a single string.&lt;/td&gt;
         *   &lt;/tr&gt;
         * &lt;/table&gt;
         * &lt;/blockquote&gt;
         * 
         * <p>&lt;p&gt;
         * This parameter is optional, and the default value on omission is
         * "`array`".
         * &lt;/p&gt;
         * 
         * <p>&lt;p&gt;
         * This parameter takes precedence over the `idTokenAudType` property
         * of Service (cf. Service#getIdTokenAudType()).
         * &lt;/p&gt;
         */
        public Builder idTokenAudType(@Nullable String idTokenAudType) {
            this.idTokenAudType = idTokenAudType;
            return this;
        }

        public IdtokenReissueApiRequestBody build() {
            return new IdtokenReissueApiRequestBody(
                accessToken, refreshToken, sub,
                claims, idtHeaderParams, idTokenAudType);
        }

    }
}
