/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.AuthorizationDetails;
import org.openapis.openapi.models.components.DeliveryMode;
import org.openapis.openapi.models.components.Pair;
import org.openapis.openapi.utils.Utils;


public class BackchannelAuthenticationCompleteApiFormResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private BackchannelAuthenticationCompleteApiFormAction action;

    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientName")
    private String clientName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryMode")
    private DeliveryMode deliveryMode;

    /**
     * The client notification endpoint to which a notification needs to be sent. This corresponds
     * to the `client_notification_endpoint` metadata of the client application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientNotificationEndpoint")
    private String clientNotificationEndpoint;

    /**
     * The client notification token which needs to be embedded as a Bearer token in the Authorization
     * header in the notification. This is the value of the `client_notification_token` request
     * parameter included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientNotificationToken")
    private String clientNotificationToken;

    /**
     * The newly issued authentication request ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authReqId")
    private String authReqId;

    /**
     * The issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The issued refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * The issued ID token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idToken")
    private String idToken;

    /**
     * The duration of the access token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The duration of the refresh token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenDuration")
    private Long refreshTokenDuration;

    /**
     * The duration of the ID token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenDuration")
    private Long idTokenDuration;

    /**
     * The issued access token in JWT format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAccessToken")
    private String jwtAccessToken;

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<Pair> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<Pair> clientAttributes;

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    @JsonCreator
    public BackchannelAuthenticationCompleteApiFormResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable BackchannelAuthenticationCompleteApiFormAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("clientName") @Nullable String clientName,
            @JsonProperty("deliveryMode") @Nullable DeliveryMode deliveryMode,
            @JsonProperty("clientNotificationEndpoint") @Nullable String clientNotificationEndpoint,
            @JsonProperty("clientNotificationToken") @Nullable String clientNotificationToken,
            @JsonProperty("authReqId") @Nullable String authReqId,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("refreshToken") @Nullable String refreshToken,
            @JsonProperty("idToken") @Nullable String idToken,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("refreshTokenDuration") @Nullable Long refreshTokenDuration,
            @JsonProperty("idTokenDuration") @Nullable Long idTokenDuration,
            @JsonProperty("jwtAccessToken") @Nullable String jwtAccessToken,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<Pair> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<Pair> clientAttributes,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.clientName = clientName;
        this.deliveryMode = deliveryMode;
        this.clientNotificationEndpoint = clientNotificationEndpoint;
        this.clientNotificationToken = clientNotificationToken;
        this.authReqId = authReqId;
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.idToken = idToken;
        this.accessTokenDuration = accessTokenDuration;
        this.refreshTokenDuration = refreshTokenDuration;
        this.idTokenDuration = idTokenDuration;
        this.jwtAccessToken = jwtAccessToken;
        this.resources = resources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.grantId = grantId;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
    }
    
    public BackchannelAuthenticationCompleteApiFormResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<BackchannelAuthenticationCompleteApiFormAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    public Optional<DeliveryMode> deliveryMode() {
        return Optional.ofNullable(this.deliveryMode);
    }

    /**
     * The client notification endpoint to which a notification needs to be sent. This corresponds
     * to the `client_notification_endpoint` metadata of the client application.
     */
    public Optional<String> clientNotificationEndpoint() {
        return Optional.ofNullable(this.clientNotificationEndpoint);
    }

    /**
     * The client notification token which needs to be embedded as a Bearer token in the Authorization
     * header in the notification. This is the value of the `client_notification_token` request
     * parameter included in the backchannel authentication request.
     */
    public Optional<String> clientNotificationToken() {
        return Optional.ofNullable(this.clientNotificationToken);
    }

    /**
     * The newly issued authentication request ID.
     */
    public Optional<String> authReqId() {
        return Optional.ofNullable(this.authReqId);
    }

    /**
     * The issued access token.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The issued refresh token.
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * The issued ID token.
     */
    public Optional<String> idToken() {
        return Optional.ofNullable(this.idToken);
    }

    /**
     * The duration of the access token in seconds.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The duration of the refresh token in seconds.
     */
    public Optional<Long> refreshTokenDuration() {
        return Optional.ofNullable(this.refreshTokenDuration);
    }

    /**
     * The duration of the ID token in seconds.
     */
    public Optional<Long> idTokenDuration() {
        return Optional.ofNullable(this.idTokenDuration);
    }

    /**
     * The issued access token in JWT format.
     */
    public Optional<String> jwtAccessToken() {
        return Optional.ofNullable(this.jwtAccessToken);
    }

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<Pair>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<Pair>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withAction(@Nullable BackchannelAuthenticationCompleteApiFormAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientName(@Nullable String clientName) {
        this.clientName = clientName;
        return this;
    }


    public BackchannelAuthenticationCompleteApiFormResponseBody withDeliveryMode(@Nullable DeliveryMode deliveryMode) {
        this.deliveryMode = deliveryMode;
        return this;
    }


    /**
     * The client notification endpoint to which a notification needs to be sent. This corresponds
     * to the `client_notification_endpoint` metadata of the client application.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientNotificationEndpoint(@Nullable String clientNotificationEndpoint) {
        this.clientNotificationEndpoint = clientNotificationEndpoint;
        return this;
    }


    /**
     * The client notification token which needs to be embedded as a Bearer token in the Authorization
     * header in the notification. This is the value of the `client_notification_token` request
     * parameter included in the backchannel authentication request.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientNotificationToken(@Nullable String clientNotificationToken) {
        this.clientNotificationToken = clientNotificationToken;
        return this;
    }


    /**
     * The newly issued authentication request ID.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withAuthReqId(@Nullable String authReqId) {
        this.authReqId = authReqId;
        return this;
    }


    /**
     * The issued access token.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The issued refresh token.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }


    /**
     * The issued ID token.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withIdToken(@Nullable String idToken) {
        this.idToken = idToken;
        return this;
    }


    /**
     * The duration of the access token in seconds.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The duration of the refresh token in seconds.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withRefreshTokenDuration(@Nullable Long refreshTokenDuration) {
        this.refreshTokenDuration = refreshTokenDuration;
        return this;
    }


    /**
     * The duration of the ID token in seconds.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withIdTokenDuration(@Nullable Long idTokenDuration) {
        this.idTokenDuration = idTokenDuration;
        return this;
    }


    /**
     * The issued access token in JWT format.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withJwtAccessToken(@Nullable String jwtAccessToken) {
        this.jwtAccessToken = jwtAccessToken;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withServiceAttributes(@Nullable List<Pair> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientAttributes(@Nullable List<Pair> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public BackchannelAuthenticationCompleteApiFormResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackchannelAuthenticationCompleteApiFormResponseBody other = (BackchannelAuthenticationCompleteApiFormResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.clientName, other.clientName) &&
            Utils.enhancedDeepEquals(this.deliveryMode, other.deliveryMode) &&
            Utils.enhancedDeepEquals(this.clientNotificationEndpoint, other.clientNotificationEndpoint) &&
            Utils.enhancedDeepEquals(this.clientNotificationToken, other.clientNotificationToken) &&
            Utils.enhancedDeepEquals(this.authReqId, other.authReqId) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.idToken, other.idToken) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.refreshTokenDuration, other.refreshTokenDuration) &&
            Utils.enhancedDeepEquals(this.idTokenDuration, other.idTokenDuration) &&
            Utils.enhancedDeepEquals(this.jwtAccessToken, other.jwtAccessToken) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, clientId, clientIdAlias,
            clientIdAliasUsed, clientName, deliveryMode,
            clientNotificationEndpoint, clientNotificationToken, authReqId,
            accessToken, refreshToken, idToken,
            accessTokenDuration, refreshTokenDuration, idTokenDuration,
            jwtAccessToken, resources, authorizationDetails,
            serviceAttributes, clientAttributes, grantId,
            clientEntityId, clientEntityIdUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackchannelAuthenticationCompleteApiFormResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "clientName", clientName,
                "deliveryMode", deliveryMode,
                "clientNotificationEndpoint", clientNotificationEndpoint,
                "clientNotificationToken", clientNotificationToken,
                "authReqId", authReqId,
                "accessToken", accessToken,
                "refreshToken", refreshToken,
                "idToken", idToken,
                "accessTokenDuration", accessTokenDuration,
                "refreshTokenDuration", refreshTokenDuration,
                "idTokenDuration", idTokenDuration,
                "jwtAccessToken", jwtAccessToken,
                "resources", resources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "grantId", grantId,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private BackchannelAuthenticationCompleteApiFormAction action;

        private String responseContent;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String clientName;

        private DeliveryMode deliveryMode;

        private String clientNotificationEndpoint;

        private String clientNotificationToken;

        private String authReqId;

        private String accessToken;

        private String refreshToken;

        private String idToken;

        private Long accessTokenDuration;

        private Long refreshTokenDuration;

        private Long idTokenDuration;

        private String jwtAccessToken;

        private List<String> resources;

        private AuthorizationDetails authorizationDetails;

        private List<Pair> serviceAttributes;

        private List<Pair> clientAttributes;

        private String grantId;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable BackchannelAuthenticationCompleteApiFormAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client
         * application. Its format varies depending on the value of `action` parameter.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The client ID of the client application that has made the backchannel authentication
         * request.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias of the client application that has made the backchannel authentication
         * request.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * `true` if the value of the client_id request parameter included in the backchannel
         * authentication request is the client ID alias. `false` if the value is the original
         * numeric client ID.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The name of the client application which has made the backchannel authentication request.
         */
        public Builder clientName(@Nullable String clientName) {
            this.clientName = clientName;
            return this;
        }

        public Builder deliveryMode(@Nullable DeliveryMode deliveryMode) {
            this.deliveryMode = deliveryMode;
            return this;
        }

        /**
         * The client notification endpoint to which a notification needs to be sent. This corresponds
         * to the `client_notification_endpoint` metadata of the client application.
         */
        public Builder clientNotificationEndpoint(@Nullable String clientNotificationEndpoint) {
            this.clientNotificationEndpoint = clientNotificationEndpoint;
            return this;
        }

        /**
         * The client notification token which needs to be embedded as a Bearer token in the Authorization
         * header in the notification. This is the value of the `client_notification_token` request
         * parameter included in the backchannel authentication request.
         */
        public Builder clientNotificationToken(@Nullable String clientNotificationToken) {
            this.clientNotificationToken = clientNotificationToken;
            return this;
        }

        /**
         * The newly issued authentication request ID.
         */
        public Builder authReqId(@Nullable String authReqId) {
            this.authReqId = authReqId;
            return this;
        }

        /**
         * The issued access token.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The issued refresh token.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * The issued ID token.
         */
        public Builder idToken(@Nullable String idToken) {
            this.idToken = idToken;
            return this;
        }

        /**
         * The duration of the access token in seconds.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The duration of the refresh token in seconds.
         */
        public Builder refreshTokenDuration(@Nullable Long refreshTokenDuration) {
            this.refreshTokenDuration = refreshTokenDuration;
            return this;
        }

        /**
         * The duration of the ID token in seconds.
         */
        public Builder idTokenDuration(@Nullable Long idTokenDuration) {
            this.idTokenDuration = idTokenDuration;
            return this;
        }

        /**
         * The issued access token in JWT format.
         */
        public Builder jwtAccessToken(@Nullable String jwtAccessToken) {
            this.jwtAccessToken = jwtAccessToken;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters or by the `resource` property
         * in the request object. If both are given, the values in the request object should be
         * set. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<Pair> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<Pair> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * the value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        public BackchannelAuthenticationCompleteApiFormResponseBody build() {
            return new BackchannelAuthenticationCompleteApiFormResponseBody(
                resultCode, resultMessage, action,
                responseContent, clientId, clientIdAlias,
                clientIdAliasUsed, clientName, deliveryMode,
                clientNotificationEndpoint, clientNotificationToken, authReqId,
                accessToken, refreshToken, idToken,
                accessTokenDuration, refreshTokenDuration, idTokenDuration,
                jwtAccessToken, resources, authorizationDetails,
                serviceAttributes, clientAttributes, grantId,
                clientEntityId, clientEntityIdUsed);
        }

    }
}
