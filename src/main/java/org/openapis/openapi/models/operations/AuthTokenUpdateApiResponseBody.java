/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthTokenUpdateApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthTokenUpdateApiAction action;

    /**
     * The access token which has been specified by the request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The date at which the access token will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * The extra properties associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthTokenUpdateApiPropertyResponse> properties;

    /**
     * The scopes associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthTokenUpdateApiAuthorizationDetailsResponse authorizationDetails;

    /**
     * The token type associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenType")
    private String tokenType;

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forExternalAttachment")
    private Boolean forExternalAttachment;

    /**
     * Set the unique token identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenId")
    private String tokenId;

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenExpiresAt")
    private Long refreshTokenExpiresAt;

    @JsonCreator
    public AuthTokenUpdateApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthTokenUpdateApiAction action,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("accessTokenExpiresAt") @Nullable Long accessTokenExpiresAt,
            @JsonProperty("properties") @Nullable List<AuthTokenUpdateApiPropertyResponse> properties,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("authorizationDetails") @Nullable AuthTokenUpdateApiAuthorizationDetailsResponse authorizationDetails,
            @JsonProperty("tokenType") @Nullable String tokenType,
            @JsonProperty("forExternalAttachment") @Nullable Boolean forExternalAttachment,
            @JsonProperty("tokenId") @Nullable String tokenId,
            @JsonProperty("refreshTokenExpiresAt") @Nullable Long refreshTokenExpiresAt) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.accessToken = accessToken;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.properties = properties;
        this.scopes = scopes;
        this.authorizationDetails = authorizationDetails;
        this.tokenType = tokenType;
        this.forExternalAttachment = forExternalAttachment;
        this.tokenId = tokenId;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
    }
    
    public AuthTokenUpdateApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthTokenUpdateApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The access token which has been specified by the request.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The date at which the access token will expire.
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * The extra properties associated with the access token.
     */
    public Optional<List<AuthTokenUpdateApiPropertyResponse>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The scopes associated with the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthTokenUpdateApiAuthorizationDetailsResponse> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The token type associated with the access token.
     */
    public Optional<String> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public Optional<Boolean> forExternalAttachment() {
        return Optional.ofNullable(this.forExternalAttachment);
    }

    /**
     * Set the unique token identifier.
     */
    public Optional<String> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public Optional<Long> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthTokenUpdateApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthTokenUpdateApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthTokenUpdateApiResponseBody withAction(@Nullable AuthTokenUpdateApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The access token which has been specified by the request.
     */
    public AuthTokenUpdateApiResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The date at which the access token will expire.
     */
    public AuthTokenUpdateApiResponseBody withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     */
    public AuthTokenUpdateApiResponseBody withProperties(@Nullable List<AuthTokenUpdateApiPropertyResponse> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The scopes associated with the access token.
     */
    public AuthTokenUpdateApiResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthTokenUpdateApiResponseBody withAuthorizationDetails(@Nullable AuthTokenUpdateApiAuthorizationDetailsResponse authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The token type associated with the access token.
     */
    public AuthTokenUpdateApiResponseBody withTokenType(@Nullable String tokenType) {
        this.tokenType = tokenType;
        return this;
    }


    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public AuthTokenUpdateApiResponseBody withForExternalAttachment(@Nullable Boolean forExternalAttachment) {
        this.forExternalAttachment = forExternalAttachment;
        return this;
    }


    /**
     * Set the unique token identifier.
     */
    public AuthTokenUpdateApiResponseBody withTokenId(@Nullable String tokenId) {
        this.tokenId = tokenId;
        return this;
    }


    /**
     * The datetime at which the newly issued refresh token will expire.
     * The value is represented in milliseconds since the Unix epoch (1970-01-01).
     */
    public AuthTokenUpdateApiResponseBody withRefreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenUpdateApiResponseBody other = (AuthTokenUpdateApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.tokenType, other.tokenType) &&
            Utils.enhancedDeepEquals(this.forExternalAttachment, other.forExternalAttachment) &&
            Utils.enhancedDeepEquals(this.tokenId, other.tokenId) &&
            Utils.enhancedDeepEquals(this.refreshTokenExpiresAt, other.refreshTokenExpiresAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            accessToken, accessTokenExpiresAt, properties,
            scopes, authorizationDetails, tokenType,
            forExternalAttachment, tokenId, refreshTokenExpiresAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenUpdateApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "accessToken", accessToken,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "properties", properties,
                "scopes", scopes,
                "authorizationDetails", authorizationDetails,
                "tokenType", tokenType,
                "forExternalAttachment", forExternalAttachment,
                "tokenId", tokenId,
                "refreshTokenExpiresAt", refreshTokenExpiresAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthTokenUpdateApiAction action;

        private String accessToken;

        private Long accessTokenExpiresAt;

        private List<AuthTokenUpdateApiPropertyResponse> properties;

        private List<String> scopes;

        private AuthTokenUpdateApiAuthorizationDetailsResponse authorizationDetails;

        private String tokenType;

        private Boolean forExternalAttachment;

        private String tokenId;

        private Long refreshTokenExpiresAt;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthTokenUpdateApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The access token which has been specified by the request.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The date at which the access token will expire.
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         */
        public Builder properties(@Nullable List<AuthTokenUpdateApiPropertyResponse> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The scopes associated with the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthTokenUpdateApiAuthorizationDetailsResponse authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The token type associated with the access token.
         */
        public Builder tokenType(@Nullable String tokenType) {
            this.tokenType = tokenType;
            return this;
        }

        /**
         * the flag which indicates whether the access token is for an external
         * attachment.
         */
        public Builder forExternalAttachment(@Nullable Boolean forExternalAttachment) {
            this.forExternalAttachment = forExternalAttachment;
            return this;
        }

        /**
         * Set the unique token identifier.
         */
        public Builder tokenId(@Nullable String tokenId) {
            this.tokenId = tokenId;
            return this;
        }

        /**
         * The datetime at which the newly issued refresh token will expire.
         * The value is represented in milliseconds since the Unix epoch (1970-01-01).
         */
        public Builder refreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        public AuthTokenUpdateApiResponseBody build() {
            return new AuthTokenUpdateApiResponseBody(
                resultCode, resultMessage, action,
                accessToken, accessTokenExpiresAt, properties,
                scopes, authorizationDetails, tokenType,
                forExternalAttachment, tokenId, refreshTokenExpiresAt);
        }

    }
}
