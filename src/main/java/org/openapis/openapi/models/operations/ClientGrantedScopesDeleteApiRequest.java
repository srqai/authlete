/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ClientGrantedScopesDeleteApiRequest {
    /**
     * A service ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=serviceId")
    private String serviceId;

    /**
     * A client ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=clientId")
    private String clientId;

    /**
     * Unique user ID of an end-user.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subject")
    private String subject;

    @JsonCreator
    public ClientGrantedScopesDeleteApiRequest(
            @Nonnull String serviceId,
            @Nonnull String clientId,
            @Nonnull String subject) {
        this.serviceId = Optional.ofNullable(serviceId)
            .orElseThrow(() -> new IllegalArgumentException("serviceId cannot be null"));
        this.clientId = Optional.ofNullable(clientId)
            .orElseThrow(() -> new IllegalArgumentException("clientId cannot be null"));
        this.subject = Optional.ofNullable(subject)
            .orElseThrow(() -> new IllegalArgumentException("subject cannot be null"));
    }

    /**
     * A service ID.
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * A client ID.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Unique user ID of an end-user.
     */
    public String subject() {
        return this.subject;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A service ID.
     */
    public ClientGrantedScopesDeleteApiRequest withServiceId(@Nonnull String serviceId) {
        this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
        return this;
    }


    /**
     * A client ID.
     */
    public ClientGrantedScopesDeleteApiRequest withClientId(@Nonnull String clientId) {
        this.clientId = Utils.checkNotNull(clientId, "clientId");
        return this;
    }


    /**
     * Unique user ID of an end-user.
     */
    public ClientGrantedScopesDeleteApiRequest withSubject(@Nonnull String subject) {
        this.subject = Utils.checkNotNull(subject, "subject");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientGrantedScopesDeleteApiRequest other = (ClientGrantedScopesDeleteApiRequest) o;
        return 
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.subject, other.subject);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            serviceId, clientId, subject);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientGrantedScopesDeleteApiRequest.class,
                "serviceId", serviceId,
                "clientId", clientId,
                "subject", subject);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String serviceId;

        private String clientId;

        private String subject;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A service ID.
         */
        public Builder serviceId(@Nonnull String serviceId) {
            this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
            return this;
        }

        /**
         * A client ID.
         */
        public Builder clientId(@Nonnull String clientId) {
            this.clientId = Utils.checkNotNull(clientId, "clientId");
            return this;
        }

        /**
         * Unique user ID of an end-user.
         */
        public Builder subject(@Nonnull String subject) {
            this.subject = Utils.checkNotNull(subject, "subject");
            return this;
        }

        public ClientGrantedScopesDeleteApiRequest build() {
            return new ClientGrantedScopesDeleteApiRequest(
                serviceId, clientId, subject);
        }

    }
}
