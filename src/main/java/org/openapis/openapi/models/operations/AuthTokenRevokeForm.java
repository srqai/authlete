/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class AuthTokenRevokeForm {
    /**
     * Access or refresh token to be revoked
     */
    @SpeakeasyMetadata("form:name=token")
    private String token;

    /**
     * Hint about the type of the token (access_token or refresh_token)
     */
    @SpeakeasyMetadata("form:name=token_type_hint")
    private String tokenTypeHint;

    @JsonCreator
    public AuthTokenRevokeForm(
            @Nonnull String token,
            @Nullable String tokenTypeHint) {
        this.token = Optional.ofNullable(token)
            .orElseThrow(() -> new IllegalArgumentException("token cannot be null"));
        this.tokenTypeHint = tokenTypeHint;
    }
    
    public AuthTokenRevokeForm(
            @Nonnull String token) {
        this(token, null);
    }

    /**
     * Access or refresh token to be revoked
     */
    public String token() {
        return this.token;
    }

    /**
     * Hint about the type of the token (access_token or refresh_token)
     */
    public Optional<String> tokenTypeHint() {
        return Optional.ofNullable(this.tokenTypeHint);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Access or refresh token to be revoked
     */
    public AuthTokenRevokeForm withToken(@Nonnull String token) {
        this.token = Utils.checkNotNull(token, "token");
        return this;
    }


    /**
     * Hint about the type of the token (access_token or refresh_token)
     */
    public AuthTokenRevokeForm withTokenTypeHint(@Nullable String tokenTypeHint) {
        this.tokenTypeHint = tokenTypeHint;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenRevokeForm other = (AuthTokenRevokeForm) o;
        return 
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.tokenTypeHint, other.tokenTypeHint);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            token, tokenTypeHint);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenRevokeForm.class,
                "token", token,
                "tokenTypeHint", tokenTypeHint);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String token;

        private String tokenTypeHint;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Access or refresh token to be revoked
         */
        public Builder token(@Nonnull String token) {
            this.token = Utils.checkNotNull(token, "token");
            return this;
        }

        /**
         * Hint about the type of the token (access_token or refresh_token)
         */
        public Builder tokenTypeHint(@Nullable String tokenTypeHint) {
            this.tokenTypeHint = tokenTypeHint;
            return this;
        }

        public AuthTokenRevokeForm build() {
            return new AuthTokenRevokeForm(
                token, tokenTypeHint);
        }

    }
}
