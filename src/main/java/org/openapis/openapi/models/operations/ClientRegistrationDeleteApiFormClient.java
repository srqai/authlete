/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ClientRegistrationDeleteApiFormClient {
    /**
     * The sequential number of the client. The value of this property is assigned by Authlete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("number")
    private Integer number;

    /**
     * The sequential number of the service of the client application. The value of this property is
     * assigned by Authlete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceNumber")
    private Integer serviceNumber;

    /**
     * The name of the client application. This property corresponds to `client_name` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientName")
    private String clientName;

    /**
     * Client names with language tags. If the client application has different names for different
     * languages, this property can be used to register the names.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientNames")
    private List<ClientRegistrationDeleteApiFormClientName> clientNames;

    /**
     * The description about the client application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private String description;

    /**
     * Descriptions about the client application with language tags. If the client application has different
     * descriptions for different languages, this property can be used to register the descriptions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descriptions")
    private List<ClientRegistrationDeleteApiFormDescription> descriptions;

    /**
     * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
     * property is assigned by Authlete.
     * 
     * <p>Note that Authlete issues a client secret even to a "public" client application, but the client
     * application should not use the client secret unless it changes its client type to "confidential".
     * That is, a public client application should behave as if it had not been issued a client secret.
     * To be specific, a token request from a public client of Authlete should not come along with a
     * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
     * says as follows.
     * 
     * <p>&gt; Confidential clients or other clients issued client credentials MUST authenticate with the
     * authorization server as described in Section 2.3 when making requests to the token endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    private String clientSecret;

    /**
     * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
     * default, this is a string version of the `clientId` property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * Deprecated. Always set to `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasEnabled")
    private Boolean clientIdAliasEnabled;

    /**
     * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientType")
    private ClientRegistrationDeleteApiFormClientType clientType;

    /**
     * The application type. The value of this property affects the validation steps for a redirect URI.
     * See the description about `redirectUris` property for more details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicationType")
    private ClientRegistrationDeleteApiFormApplicationType applicationType;

    /**
     * The URL pointing to the logo image of the client application.
     * 
     * <p>This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoUri")
    private String logoUri;

    /**
     * Logo image URLs with language tags. If the client application has different logo images for
     * different languages, this property can be used to register URLs of the images.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logoUris")
    private List<ClientRegistrationDeleteApiFormLogoUris> logoUris;

    /**
     * An array of email addresses of people responsible for the client application.
     * 
     * <p>This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
     * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contacts")
    private List<String> contacts;

    /**
     * The flag to indicate whether this client use TLS client certificate bound access tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientCertificateBoundAccessTokens")
    private Boolean tlsClientCertificateBoundAccessTokens;

    /**
     * The flag to indicate whether this client has been registered dynamically.
     * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicallyRegistered")
    private Boolean dynamicallyRegistered;

    /**
     * The unique identifier string assigned by the client developer or software publisher used by
     * registration endpoints to identify the client software to be dynamically registered.
     * 
     * <p>This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareId")
    private String softwareId;

    /**
     * The version identifier string for the client software identified by the software ID.
     * 
     * <p>This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("softwareVersion")
    private String softwareVersion;

    /**
     * The hash of the registration access token for this client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("registrationAccessTokenHash")
    private String registrationAccessTokenHash;

    /**
     * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Long createdAt;

    /**
     * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("modifiedAt")
    private Long modifiedAt;

    /**
     * A string array of grant types which the client application declares that it will restrict itself to using.
     * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantTypes")
    private List<ClientRegistrationDeleteApiFormGrantType> grantTypes;

    /**
     * A string array of response types which the client application declares that it will restrict itself to using.
     * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseTypes")
    private List<ClientRegistrationDeleteApiFormResponseType> responseTypes;

    /**
     * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
     * Requirements for a redirect URI are as follows.
     * 
     * <p>**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
     * 
     * <p>- Must be an absolute URI.
     * - Must not have a fragment component.
     * 
     * <p>**Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * application_type")
     * 
     * <p>- The scheme of the redirect URI used for Implicit Grant by a client application whose application
     * is `web` must be `https`. This is checked at runtime by Authlete.
     * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
     * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
     * - The scheme of the redirect URI used by a client application whose application type is `native`
     * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
     * is `localhost`. This is checked at runtime by Authlete.
     * 
     * <p>**Requirements by Authlete**
     * 
     * <p>- Must consist of printable ASCII letters only.
     * - Must not exceed 200 letters.
     * 
     * <p>Note that Authlete allows the application type to be `null`. In other words, a client application
     * does not have to choose `web` or `native` as its application type.
     * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
     * 
     * <p>An authorization request from a client application which has not registered any redirect URI
     * fails unless at least all the following conditions are satisfied.
     * 
     * <p>- The client type of the client application is `confidential`.
     * - The value of `response_type` request parameter is `code`.
     * - The authorization request has the `redirect_uri` request parameter.
     * - The value of `scope` request parameter does not contain `openid`.
     * 
     * <p>RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
     * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
     * details), but OpenID Connect requires exact match.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirectUris")
    private List<String> redirectUris;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationSignAlg")
    private ClientRegistrationDeleteApiFormAuthorizationSignAlg authorizationSignAlg;

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationEncryptionAlg")
    private ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg authorizationEncryptionAlg;

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationEncryptionEnc")
    private ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc authorizationEncryptionEnc;

    /**
     * The client authentication method that the client application declares that it uses at the token
     * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
     * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenAuthMethod")
    private ClientRegistrationDeleteApiFormTokenAuthMethod tokenAuthMethod;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenAuthSignAlg")
    private ClientRegistrationDeleteApiFormTokenAuthSignAlg tokenAuthSignAlg;

    /**
     * The key ID of a JWK containing a self-signed certificate of this client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selfSignedCertificateKeyId")
    private String selfSignedCertificateKeyId;

    /**
     * The string representation of the expected subject distinguished name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientAuthSubjectDn")
    private String tlsClientAuthSubjectDn;

    /**
     * The string representation of the expected DNS subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientAuthSanDns")
    private String tlsClientAuthSanDns;

    /**
     * The string representation of the expected URI subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientAuthSanUri")
    private String tlsClientAuthSanUri;

    /**
     * The string representation of the expected IP address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientAuthSanIp")
    private String tlsClientAuthSanIp;

    /**
     * The string representation of the expected email address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tlsClientAuthSanEmail")
    private String tlsClientAuthSanEmail;

    /**
     * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
     * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
     * in "OAuth 2.0 Pushed Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parRequired")
    private Boolean parRequired;

    /**
     * The flag to indicate whether authorization requests from this client are always required to
     * utilize a request object by using either `request` or `request_uri` request parameter.
     * 
     * <p>If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
     * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
     * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestObjectRequired")
    private Boolean requestObjectRequired;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestSignAlg")
    private ClientRegistrationDeleteApiFormRequestSignAlg requestSignAlg;

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestEncryptionAlg")
    private ClientRegistrationDeleteApiFormRequestEncryptionAlg requestEncryptionAlg;

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestEncryptionEnc")
    private ClientRegistrationDeleteApiFormRequestEncryptionEnc requestEncryptionEnc;

    /**
     * An array of URLs each of which points to a request object.
     * 
     * <p>Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
     * This property is used for the pre-registration.
     * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestUris")
    private List<String> requestUris;

    /**
     * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
     * 
     * <p>This property corresponds to `default_max_age` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultMaxAge")
    private Integer defaultMaxAge;

    /**
     * The default ACRs (Authentication Context Class References). This value is used when an authorization
     * request from the client application has neither `acr_values` request parameter nor `acr` claim
     * in claims request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultAcrs")
    private List<String> defaultAcrs;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenSignAlg")
    private ClientRegistrationDeleteApiFormIdTokenSignAlg idTokenSignAlg;

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenEncryptionAlg")
    private ClientRegistrationDeleteApiFormIdTokenEncryptionAlg idTokenEncryptionAlg;

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idTokenEncryptionEnc")
    private ClientRegistrationDeleteApiFormIdTokenEncryptionEnc idTokenEncryptionEnc;

    /**
     * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
     * 
     * <p>This property corresponds to `require_auth_time` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTimeRequired")
    private Boolean authTimeRequired;

    /**
     * The subject type that the client application requests. Details about the subject type are described in
     * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
     * 
     * <p>This property corresponds to `subject_type` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subjectType")
    private ClientRegistrationDeleteApiFormSubjectType subjectType;

    /**
     * The value of the sector identifier URI.
     * This represents the `sector_identifier_uri` client metadata which is defined in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sectorIdentifierUri")
    private String sectorIdentifierUri;

    /**
     * The sector identifier host component as derived from either the `sector_identifier_uri` or the
     * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
     * are also registered, the value of this property is `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("derivedSectorIdentifier")
    private String derivedSectorIdentifier;

    /**
     * The URL pointing to the JWK Set of the client application.
     * The content pointed to by the URL is JSON which complies with the format described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
     * and/or signs request objects, it must make available its JWK Set containing public keys for the
     * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
     * Set from the URL as necessary.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwksUri")
    private String jwksUri;

    /**
     * The content of the JWK Set of the client application.
     * The format is described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwks")
    private String jwks;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoSignAlg")
    private ClientRegistrationDeleteApiFormUserInfoSignAlg userInfoSignAlg;

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoEncryptionAlg")
    private ClientRegistrationDeleteApiFormUserInfoEncryptionAlg userInfoEncryptionAlg;

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoEncryptionEnc")
    private ClientRegistrationDeleteApiFormUserInfoEncryptionEnc userInfoEncryptionEnc;

    /**
     * The URL which a third party can use to initiate a login by the client application.
     * 
     * <p>This property corresponds to `initiate_login_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("loginUri")
    private String loginUri;

    /**
     * The URL pointing to the "Terms Of Service" page.
     * 
     * <p>This property corresponds to `tos_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tosUri")
    private String tosUri;

    /**
     * URLs of "Terms Of Service" pages with language tags.
     * 
     * <p>If the client application has different "Terms Of Service" pages for different languages,
     * this property can be used to register the URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tosUris")
    private List<ClientRegistrationDeleteApiFormTosUris> tosUris;

    /**
     * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
     * 
     * <p>This property corresponds to `policy_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyUri")
    private String policyUri;

    /**
     * URLs of policy pages with language tags.
     * If the client application has different policy pages for different languages, this property can be used to register the URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policyUris")
    private List<ClientRegistrationDeleteApiFormPolicyUris> policyUris;

    /**
     * The URL pointing to the home page of the client application.
     * 
     * <p>This property corresponds to `client_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientUri")
    private String clientUri;

    /**
     * Home page URLs with language tags.
     * If the client application has different home pages for different languages, this property can
     * be used to register the URLs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientUris")
    private List<ClientRegistrationDeleteApiFormClientUris> clientUris;

    /**
     * The backchannel token delivery mode.
     * 
     * <p>This property corresponds to the `backchannel_token_delivery_mode` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bcDeliveryMode")
    private String bcDeliveryMode;

    /**
     * The backchannel client notification endpoint.
     * 
     * <p>This property corresponds to the `backchannel_client_notification_endpoint` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bcNotificationEndpoint")
    private String bcNotificationEndpoint;

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bcRequestSignAlg")
    private ClientRegistrationDeleteApiFormBcRequestSignAlg bcRequestSignAlg;

    /**
     * The boolean flag to indicate whether a user code is required when this client makes a backchannel
     * authentication request.
     * 
     * <p>This property corresponds to the `backchannel_user_code_parameter` metadata.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bcUserCodeRequired")
    private Boolean bcUserCodeRequired;

    /**
     * The attributes of this client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    private List<ClientRegistrationDeleteApiFormAttribute> attributes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extension")
    private ClientRegistrationDeleteApiFormExtension extension;

    /**
     * The authorization details types that this client may use as values of the `type` field in
     * `authorization_details`.
     * 
     * <p>This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
     * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
     * 
     * <p>Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
     * to align with the change made by the 5th draft of the RAR specification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetailsTypes")
    private List<String> authorizationDetailsTypes;

    /**
     * The custom client metadata in JSON format.
     * 
     * <p>Standard specifications define client metadata as necessary. The following are such examples.
     * 
     * <p>* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
     * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
     * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
     * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
     * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
     * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
     * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
     * 
     * <p>Standard client metadata included in Client Registration Request and Client Update Request (cf.
     * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
     * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
     * to corresponding properties of the client application. For example, the value of the `client_name`
     * client metadata in Client Registration/Update Request is set to the clientName property. On the
     * other hand, unrecognized client metadata are discarded.
     * 
     * <p>By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
     * of Service, Authlete can recognize them and stores their values into the database. The stored
     * custom client metadata values can be referenced by this property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customMetadata")
    private String customMetadata;

    /**
     * The flag indicating whether encryption of request object is required when the request object
     * is passed through the front channel.
     * 
     * <p>This flag does not affect the processing of request objects at the Pushed Authorization Request
     * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
     * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
     * 
     * <p>This flag does not indicate whether a request object is always required. There is a different
     * flag, `requestObjectRequired`, for the purpose.
     * 
     * <p>Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
     * flag of the service is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frontChannelRequestObjectEncryptionRequired")
    private Boolean frontChannelRequestObjectEncryptionRequired;

    /**
     * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
     * client metadata.
     * 
     * <p>The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_alg
     * &gt;
     * &gt; OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
     *   since this signals to the OP that a client_secret value needs to be returned from which the
     *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
     *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
     *   is present. If both signing and encryption are requested, the Request Object will be signed
     *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
     *   is that the RP is not declaring whether it might encrypt any Request Objects.
     * 
     * <p>The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
     * Request Objects, even when this parameter is present."
     * 
     * <p>The property that represents the client metadata is `requestEncryptionAlg`. See the description
     * of `requestEncryptionAlg` for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
     * flag of the service is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestObjectEncryptionAlgMatchRequired")
    private Boolean requestObjectEncryptionAlgMatchRequired;

    /**
     * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
     * client metadata.
     * 
     * <p>The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_enc
     * &gt;
     * &gt; OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
     *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
     *   MUST also be provided.
     * 
     * <p>The property that represents the client metadata is `requestEncryptionEnc`. See the description
     * of `requestEncryptionEnc`  for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
     * flag of the service is `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestObjectEncryptionEncMatchRequired")
    private Boolean requestObjectEncryptionEncMatchRequired;

    /**
     * The digest algorithm that this client requests the server to use
     * when it computes digest values of &lt;a href=
     * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
     * &gt;external attachments&lt;/a&gt;, which may be referenced from within ID tokens
     * or userinfo responses (or any place that can have the `verified_claims` claim).
     * 
     * <p>Possible values are listed in the &lt;a href=
     * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
     * &gt;Hash Algorithm Registry&lt;/a&gt; of IANA (Internet Assigned Numbers Authority),
     * but the server does not necessarily support all the values there. When
     * this property is omitted, `sha-256` is used as the default algorithm.
     * 
     * <p>This property corresponds to the `digest_algorithm` client metadata
     * which was defined by the third implementer's draft of
     * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("digestAlgorithm")
    private String digestAlgorithm;

    /**
     * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
     * 
     * <p>Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
     * 
     * <p>Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("singleAccessTokenPerSubject")
    private Boolean singleAccessTokenPerSubject;

    /**
     * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
     * 
     * <p>If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
     * 
     * <p>See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkceRequired")
    private Boolean pkceRequired;

    /**
     * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
     * 
     * <p>If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
     * whenever it includes the `code_challenge` request parameter.
     * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pkceS256Required")
    private Boolean pkceS256Required;

    /**
     * If the DPoP is required for this client
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpopRequired")
    private Boolean dpopRequired;

    /**
     * The flag indicating whether this client was registered by the
     * "automatic" client registration of OIDC Federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("automaticallyRegistered")
    private Boolean automaticallyRegistered;

    /**
     * The flag indicating whether this client was registered by the
     * "explicit" client registration of OIDC Federation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("explicitlyRegistered")
    private Boolean explicitlyRegistered;

    /**
     * The flag indicating whether this service signs responses from the resource server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rsRequestSigned")
    private Boolean rsRequestSigned;

    /**
     * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rsSignedRequestKeyId")
    private String rsSignedRequestKeyId;

    /**
     * The client registration types that the client has declared it may use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientRegistrationTypes")
    private List<ClientRegistrationDeleteApiFormClientRegistrationType> clientRegistrationTypes;

    /**
     * The human-readable name representing the organization that manages this client. This property corresponds
     * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizationName")
    private String organizationName;

    /**
     * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
     * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signedJwksUri")
    private String signedJwksUri;

    /**
     * the entity ID of this client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entityId")
    private String entityId;

    /**
     * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
     * the mechanism defined in OpenID Connect Federation 1.0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustAnchorId")
    private String trustAnchorId;

    /**
     * The trust chain that was used when this client was registered or updated by the mechanism defined in
     * OpenID Connect Federation 1.0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustChain")
    private List<String> trustChain;

    /**
     * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
     * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustChainExpiresAt")
    private Long trustChainExpiresAt;

    /**
     * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trustChainUpdatedAt")
    private Long trustChainUpdatedAt;

    /**
     * The flag which indicates whether this client is locked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    private Boolean locked;

    /**
     * The URL of the credential offer endpoint at which this client
     * (wallet) receives a credential offer from the credential issuer.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialOfferEndpoint")
    private String credentialOfferEndpoint;

    /**
     * The FAPI modes for this client.
     * 
     * <p>When the value of this property is not `null`, Authlete always processes requests from this client
     * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
     * is supported by the service, and the FAPI modes for the service are set to `null`.
     * 
     * <p>For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
     * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
     * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
     * the service, and the FAPI modes for the service are set to `null`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fapiModes")
    private List<ClientRegistrationDeleteApiFormFapiMode> fapiModes;

    /**
     * The response modes that this client may use.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseModes")
    private List<ClientRegistrationDeleteApiFormResponseMode> responseModes;

    /**
     * True if credential responses to this client must be always encrypted.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialResponseEncryptionRequired")
    private Boolean credentialResponseEncryptionRequired;

    @JsonCreator
    public ClientRegistrationDeleteApiFormClient(
            @JsonProperty("number") @Nullable Integer number,
            @JsonProperty("serviceNumber") @Nullable Integer serviceNumber,
            @JsonProperty("clientName") @Nullable String clientName,
            @JsonProperty("clientNames") @Nullable List<ClientRegistrationDeleteApiFormClientName> clientNames,
            @JsonProperty("description") @Nullable String description,
            @JsonProperty("descriptions") @Nullable List<ClientRegistrationDeleteApiFormDescription> descriptions,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientSecret") @Nullable String clientSecret,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasEnabled") @Nullable Boolean clientIdAliasEnabled,
            @JsonProperty("clientType") @Nullable ClientRegistrationDeleteApiFormClientType clientType,
            @JsonProperty("applicationType") @Nullable ClientRegistrationDeleteApiFormApplicationType applicationType,
            @JsonProperty("logoUri") @Nullable String logoUri,
            @JsonProperty("logoUris") @Nullable List<ClientRegistrationDeleteApiFormLogoUris> logoUris,
            @JsonProperty("contacts") @Nullable List<String> contacts,
            @JsonProperty("tlsClientCertificateBoundAccessTokens") @Nullable Boolean tlsClientCertificateBoundAccessTokens,
            @JsonProperty("dynamicallyRegistered") @Nullable Boolean dynamicallyRegistered,
            @JsonProperty("softwareId") @Nullable String softwareId,
            @JsonProperty("softwareVersion") @Nullable String softwareVersion,
            @JsonProperty("registrationAccessTokenHash") @Nullable String registrationAccessTokenHash,
            @JsonProperty("createdAt") @Nullable Long createdAt,
            @JsonProperty("modifiedAt") @Nullable Long modifiedAt,
            @JsonProperty("grantTypes") @Nullable List<ClientRegistrationDeleteApiFormGrantType> grantTypes,
            @JsonProperty("responseTypes") @Nullable List<ClientRegistrationDeleteApiFormResponseType> responseTypes,
            @JsonProperty("redirectUris") @Nullable List<String> redirectUris,
            @JsonProperty("authorizationSignAlg") @Nullable ClientRegistrationDeleteApiFormAuthorizationSignAlg authorizationSignAlg,
            @JsonProperty("authorizationEncryptionAlg") @Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg authorizationEncryptionAlg,
            @JsonProperty("authorizationEncryptionEnc") @Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc authorizationEncryptionEnc,
            @JsonProperty("tokenAuthMethod") @Nullable ClientRegistrationDeleteApiFormTokenAuthMethod tokenAuthMethod,
            @JsonProperty("tokenAuthSignAlg") @Nullable ClientRegistrationDeleteApiFormTokenAuthSignAlg tokenAuthSignAlg,
            @JsonProperty("selfSignedCertificateKeyId") @Nullable String selfSignedCertificateKeyId,
            @JsonProperty("tlsClientAuthSubjectDn") @Nullable String tlsClientAuthSubjectDn,
            @JsonProperty("tlsClientAuthSanDns") @Nullable String tlsClientAuthSanDns,
            @JsonProperty("tlsClientAuthSanUri") @Nullable String tlsClientAuthSanUri,
            @JsonProperty("tlsClientAuthSanIp") @Nullable String tlsClientAuthSanIp,
            @JsonProperty("tlsClientAuthSanEmail") @Nullable String tlsClientAuthSanEmail,
            @JsonProperty("parRequired") @Nullable Boolean parRequired,
            @JsonProperty("requestObjectRequired") @Nullable Boolean requestObjectRequired,
            @JsonProperty("requestSignAlg") @Nullable ClientRegistrationDeleteApiFormRequestSignAlg requestSignAlg,
            @JsonProperty("requestEncryptionAlg") @Nullable ClientRegistrationDeleteApiFormRequestEncryptionAlg requestEncryptionAlg,
            @JsonProperty("requestEncryptionEnc") @Nullable ClientRegistrationDeleteApiFormRequestEncryptionEnc requestEncryptionEnc,
            @JsonProperty("requestUris") @Nullable List<String> requestUris,
            @JsonProperty("defaultMaxAge") @Nullable Integer defaultMaxAge,
            @JsonProperty("defaultAcrs") @Nullable List<String> defaultAcrs,
            @JsonProperty("idTokenSignAlg") @Nullable ClientRegistrationDeleteApiFormIdTokenSignAlg idTokenSignAlg,
            @JsonProperty("idTokenEncryptionAlg") @Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionAlg idTokenEncryptionAlg,
            @JsonProperty("idTokenEncryptionEnc") @Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionEnc idTokenEncryptionEnc,
            @JsonProperty("authTimeRequired") @Nullable Boolean authTimeRequired,
            @JsonProperty("subjectType") @Nullable ClientRegistrationDeleteApiFormSubjectType subjectType,
            @JsonProperty("sectorIdentifierUri") @Nullable String sectorIdentifierUri,
            @JsonProperty("derivedSectorIdentifier") @Nullable String derivedSectorIdentifier,
            @JsonProperty("jwksUri") @Nullable String jwksUri,
            @JsonProperty("jwks") @Nullable String jwks,
            @JsonProperty("userInfoSignAlg") @Nullable ClientRegistrationDeleteApiFormUserInfoSignAlg userInfoSignAlg,
            @JsonProperty("userInfoEncryptionAlg") @Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionAlg userInfoEncryptionAlg,
            @JsonProperty("userInfoEncryptionEnc") @Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionEnc userInfoEncryptionEnc,
            @JsonProperty("loginUri") @Nullable String loginUri,
            @JsonProperty("tosUri") @Nullable String tosUri,
            @JsonProperty("tosUris") @Nullable List<ClientRegistrationDeleteApiFormTosUris> tosUris,
            @JsonProperty("policyUri") @Nullable String policyUri,
            @JsonProperty("policyUris") @Nullable List<ClientRegistrationDeleteApiFormPolicyUris> policyUris,
            @JsonProperty("clientUri") @Nullable String clientUri,
            @JsonProperty("clientUris") @Nullable List<ClientRegistrationDeleteApiFormClientUris> clientUris,
            @JsonProperty("bcDeliveryMode") @Nullable String bcDeliveryMode,
            @JsonProperty("bcNotificationEndpoint") @Nullable String bcNotificationEndpoint,
            @JsonProperty("bcRequestSignAlg") @Nullable ClientRegistrationDeleteApiFormBcRequestSignAlg bcRequestSignAlg,
            @JsonProperty("bcUserCodeRequired") @Nullable Boolean bcUserCodeRequired,
            @JsonProperty("attributes") @Nullable List<ClientRegistrationDeleteApiFormAttribute> attributes,
            @JsonProperty("extension") @Nullable ClientRegistrationDeleteApiFormExtension extension,
            @JsonProperty("authorizationDetailsTypes") @Nullable List<String> authorizationDetailsTypes,
            @JsonProperty("customMetadata") @Nullable String customMetadata,
            @JsonProperty("frontChannelRequestObjectEncryptionRequired") @Nullable Boolean frontChannelRequestObjectEncryptionRequired,
            @JsonProperty("requestObjectEncryptionAlgMatchRequired") @Nullable Boolean requestObjectEncryptionAlgMatchRequired,
            @JsonProperty("requestObjectEncryptionEncMatchRequired") @Nullable Boolean requestObjectEncryptionEncMatchRequired,
            @JsonProperty("digestAlgorithm") @Nullable String digestAlgorithm,
            @JsonProperty("singleAccessTokenPerSubject") @Nullable Boolean singleAccessTokenPerSubject,
            @JsonProperty("pkceRequired") @Nullable Boolean pkceRequired,
            @JsonProperty("pkceS256Required") @Nullable Boolean pkceS256Required,
            @JsonProperty("dpopRequired") @Nullable Boolean dpopRequired,
            @JsonProperty("automaticallyRegistered") @Nullable Boolean automaticallyRegistered,
            @JsonProperty("explicitlyRegistered") @Nullable Boolean explicitlyRegistered,
            @JsonProperty("rsRequestSigned") @Nullable Boolean rsRequestSigned,
            @JsonProperty("rsSignedRequestKeyId") @Nullable String rsSignedRequestKeyId,
            @JsonProperty("clientRegistrationTypes") @Nullable List<ClientRegistrationDeleteApiFormClientRegistrationType> clientRegistrationTypes,
            @JsonProperty("organizationName") @Nullable String organizationName,
            @JsonProperty("signedJwksUri") @Nullable String signedJwksUri,
            @JsonProperty("entityId") @Nullable String entityId,
            @JsonProperty("trustAnchorId") @Nullable String trustAnchorId,
            @JsonProperty("trustChain") @Nullable List<String> trustChain,
            @JsonProperty("trustChainExpiresAt") @Nullable Long trustChainExpiresAt,
            @JsonProperty("trustChainUpdatedAt") @Nullable Long trustChainUpdatedAt,
            @JsonProperty("locked") @Nullable Boolean locked,
            @JsonProperty("credentialOfferEndpoint") @Nullable String credentialOfferEndpoint,
            @JsonProperty("fapiModes") @Nullable List<ClientRegistrationDeleteApiFormFapiMode> fapiModes,
            @JsonProperty("responseModes") @Nullable List<ClientRegistrationDeleteApiFormResponseMode> responseModes,
            @JsonProperty("credentialResponseEncryptionRequired") @Nullable Boolean credentialResponseEncryptionRequired) {
        this.number = number;
        this.serviceNumber = serviceNumber;
        this.clientName = clientName;
        this.clientNames = clientNames;
        this.description = description;
        this.descriptions = descriptions;
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasEnabled = clientIdAliasEnabled;
        this.clientType = clientType;
        this.applicationType = applicationType;
        this.logoUri = logoUri;
        this.logoUris = logoUris;
        this.contacts = contacts;
        this.tlsClientCertificateBoundAccessTokens = tlsClientCertificateBoundAccessTokens;
        this.dynamicallyRegistered = dynamicallyRegistered;
        this.softwareId = softwareId;
        this.softwareVersion = softwareVersion;
        this.registrationAccessTokenHash = registrationAccessTokenHash;
        this.createdAt = createdAt;
        this.modifiedAt = modifiedAt;
        this.grantTypes = grantTypes;
        this.responseTypes = responseTypes;
        this.redirectUris = redirectUris;
        this.authorizationSignAlg = authorizationSignAlg;
        this.authorizationEncryptionAlg = authorizationEncryptionAlg;
        this.authorizationEncryptionEnc = authorizationEncryptionEnc;
        this.tokenAuthMethod = tokenAuthMethod;
        this.tokenAuthSignAlg = tokenAuthSignAlg;
        this.selfSignedCertificateKeyId = selfSignedCertificateKeyId;
        this.tlsClientAuthSubjectDn = tlsClientAuthSubjectDn;
        this.tlsClientAuthSanDns = tlsClientAuthSanDns;
        this.tlsClientAuthSanUri = tlsClientAuthSanUri;
        this.tlsClientAuthSanIp = tlsClientAuthSanIp;
        this.tlsClientAuthSanEmail = tlsClientAuthSanEmail;
        this.parRequired = parRequired;
        this.requestObjectRequired = requestObjectRequired;
        this.requestSignAlg = requestSignAlg;
        this.requestEncryptionAlg = requestEncryptionAlg;
        this.requestEncryptionEnc = requestEncryptionEnc;
        this.requestUris = requestUris;
        this.defaultMaxAge = defaultMaxAge;
        this.defaultAcrs = defaultAcrs;
        this.idTokenSignAlg = idTokenSignAlg;
        this.idTokenEncryptionAlg = idTokenEncryptionAlg;
        this.idTokenEncryptionEnc = idTokenEncryptionEnc;
        this.authTimeRequired = authTimeRequired;
        this.subjectType = subjectType;
        this.sectorIdentifierUri = sectorIdentifierUri;
        this.derivedSectorIdentifier = derivedSectorIdentifier;
        this.jwksUri = jwksUri;
        this.jwks = jwks;
        this.userInfoSignAlg = userInfoSignAlg;
        this.userInfoEncryptionAlg = userInfoEncryptionAlg;
        this.userInfoEncryptionEnc = userInfoEncryptionEnc;
        this.loginUri = loginUri;
        this.tosUri = tosUri;
        this.tosUris = tosUris;
        this.policyUri = policyUri;
        this.policyUris = policyUris;
        this.clientUri = clientUri;
        this.clientUris = clientUris;
        this.bcDeliveryMode = bcDeliveryMode;
        this.bcNotificationEndpoint = bcNotificationEndpoint;
        this.bcRequestSignAlg = bcRequestSignAlg;
        this.bcUserCodeRequired = bcUserCodeRequired;
        this.attributes = attributes;
        this.extension = extension;
        this.authorizationDetailsTypes = authorizationDetailsTypes;
        this.customMetadata = customMetadata;
        this.frontChannelRequestObjectEncryptionRequired = frontChannelRequestObjectEncryptionRequired;
        this.requestObjectEncryptionAlgMatchRequired = requestObjectEncryptionAlgMatchRequired;
        this.requestObjectEncryptionEncMatchRequired = requestObjectEncryptionEncMatchRequired;
        this.digestAlgorithm = digestAlgorithm;
        this.singleAccessTokenPerSubject = singleAccessTokenPerSubject;
        this.pkceRequired = pkceRequired;
        this.pkceS256Required = pkceS256Required;
        this.dpopRequired = dpopRequired;
        this.automaticallyRegistered = automaticallyRegistered;
        this.explicitlyRegistered = explicitlyRegistered;
        this.rsRequestSigned = rsRequestSigned;
        this.rsSignedRequestKeyId = rsSignedRequestKeyId;
        this.clientRegistrationTypes = clientRegistrationTypes;
        this.organizationName = organizationName;
        this.signedJwksUri = signedJwksUri;
        this.entityId = entityId;
        this.trustAnchorId = trustAnchorId;
        this.trustChain = trustChain;
        this.trustChainExpiresAt = trustChainExpiresAt;
        this.trustChainUpdatedAt = trustChainUpdatedAt;
        this.locked = locked;
        this.credentialOfferEndpoint = credentialOfferEndpoint;
        this.fapiModes = fapiModes;
        this.responseModes = responseModes;
        this.credentialResponseEncryptionRequired = credentialResponseEncryptionRequired;
    }
    
    public ClientRegistrationDeleteApiFormClient() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The sequential number of the client. The value of this property is assigned by Authlete.
     */
    public Optional<Integer> number() {
        return Optional.ofNullable(this.number);
    }

    /**
     * The sequential number of the service of the client application. The value of this property is
     * assigned by Authlete.
     */
    public Optional<Integer> serviceNumber() {
        return Optional.ofNullable(this.serviceNumber);
    }

    /**
     * The name of the client application. This property corresponds to `client_name` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    /**
     * Client names with language tags. If the client application has different names for different
     * languages, this property can be used to register the names.
     */
    public Optional<List<ClientRegistrationDeleteApiFormClientName>> clientNames() {
        return Optional.ofNullable(this.clientNames);
    }

    /**
     * The description about the client application.
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Descriptions about the client application with language tags. If the client application has different
     * descriptions for different languages, this property can be used to register the descriptions.
     */
    public Optional<List<ClientRegistrationDeleteApiFormDescription>> descriptions() {
        return Optional.ofNullable(this.descriptions);
    }

    /**
     * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
     * property is assigned by Authlete.
     * 
     * <p>Note that Authlete issues a client secret even to a "public" client application, but the client
     * application should not use the client secret unless it changes its client type to "confidential".
     * That is, a public client application should behave as if it had not been issued a client secret.
     * To be specific, a token request from a public client of Authlete should not come along with a
     * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
     * says as follows.
     * 
     * <p>&gt; Confidential clients or other clients issued client credentials MUST authenticate with the
     * authorization server as described in Section 2.3 when making requests to the token endpoint.
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
     * default, this is a string version of the `clientId` property.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * Deprecated. Always set to `true`.
     */
    public Optional<Boolean> clientIdAliasEnabled() {
        return Optional.ofNullable(this.clientIdAliasEnabled);
    }

    /**
     * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
     * for details.
     */
    public Optional<ClientRegistrationDeleteApiFormClientType> clientType() {
        return Optional.ofNullable(this.clientType);
    }

    /**
     * The application type. The value of this property affects the validation steps for a redirect URI.
     * See the description about `redirectUris` property for more details.
     */
    public Optional<ClientRegistrationDeleteApiFormApplicationType> applicationType() {
        return Optional.ofNullable(this.applicationType);
    }

    /**
     * The URL pointing to the logo image of the client application.
     * 
     * <p>This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> logoUri() {
        return Optional.ofNullable(this.logoUri);
    }

    /**
     * Logo image URLs with language tags. If the client application has different logo images for
     * different languages, this property can be used to register URLs of the images.
     */
    public Optional<List<ClientRegistrationDeleteApiFormLogoUris>> logoUris() {
        return Optional.ofNullable(this.logoUris);
    }

    /**
     * An array of email addresses of people responsible for the client application.
     * 
     * <p>This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
     * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<List<String>> contacts() {
        return Optional.ofNullable(this.contacts);
    }

    /**
     * The flag to indicate whether this client use TLS client certificate bound access tokens.
     */
    public Optional<Boolean> tlsClientCertificateBoundAccessTokens() {
        return Optional.ofNullable(this.tlsClientCertificateBoundAccessTokens);
    }

    /**
     * The flag to indicate whether this client has been registered dynamically.
     * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public Optional<Boolean> dynamicallyRegistered() {
        return Optional.ofNullable(this.dynamicallyRegistered);
    }

    /**
     * The unique identifier string assigned by the client developer or software publisher used by
     * registration endpoints to identify the client software to be dynamically registered.
     * 
     * <p>This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public Optional<String> softwareId() {
        return Optional.ofNullable(this.softwareId);
    }

    /**
     * The version identifier string for the client software identified by the software ID.
     * 
     * <p>This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public Optional<String> softwareVersion() {
        return Optional.ofNullable(this.softwareVersion);
    }

    /**
     * The hash of the registration access token for this client.
     */
    public Optional<String> registrationAccessTokenHash() {
        return Optional.ofNullable(this.registrationAccessTokenHash);
    }

    /**
     * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    public Optional<Long> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    public Optional<Long> modifiedAt() {
        return Optional.ofNullable(this.modifiedAt);
    }

    /**
     * A string array of grant types which the client application declares that it will restrict itself to using.
     * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<List<ClientRegistrationDeleteApiFormGrantType>> grantTypes() {
        return Optional.ofNullable(this.grantTypes);
    }

    /**
     * A string array of response types which the client application declares that it will restrict itself to using.
     * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<List<ClientRegistrationDeleteApiFormResponseType>> responseTypes() {
        return Optional.ofNullable(this.responseTypes);
    }

    /**
     * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
     * Requirements for a redirect URI are as follows.
     * 
     * <p>**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
     * 
     * <p>- Must be an absolute URI.
     * - Must not have a fragment component.
     * 
     * <p>**Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * application_type")
     * 
     * <p>- The scheme of the redirect URI used for Implicit Grant by a client application whose application
     * is `web` must be `https`. This is checked at runtime by Authlete.
     * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
     * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
     * - The scheme of the redirect URI used by a client application whose application type is `native`
     * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
     * is `localhost`. This is checked at runtime by Authlete.
     * 
     * <p>**Requirements by Authlete**
     * 
     * <p>- Must consist of printable ASCII letters only.
     * - Must not exceed 200 letters.
     * 
     * <p>Note that Authlete allows the application type to be `null`. In other words, a client application
     * does not have to choose `web` or `native` as its application type.
     * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
     * 
     * <p>An authorization request from a client application which has not registered any redirect URI
     * fails unless at least all the following conditions are satisfied.
     * 
     * <p>- The client type of the client application is `confidential`.
     * - The value of `response_type` request parameter is `code`.
     * - The authorization request has the `redirect_uri` request parameter.
     * - The value of `scope` request parameter does not contain `openid`.
     * 
     * <p>RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
     * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
     * details), but OpenID Connect requires exact match.
     */
    public Optional<List<String>> redirectUris() {
        return Optional.ofNullable(this.redirectUris);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormAuthorizationSignAlg> authorizationSignAlg() {
        return Optional.ofNullable(this.authorizationSignAlg);
    }

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public Optional<ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg> authorizationEncryptionAlg() {
        return Optional.ofNullable(this.authorizationEncryptionAlg);
    }

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public Optional<ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc> authorizationEncryptionEnc() {
        return Optional.ofNullable(this.authorizationEncryptionEnc);
    }

    /**
     * The client authentication method that the client application declares that it uses at the token
     * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
     * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<ClientRegistrationDeleteApiFormTokenAuthMethod> tokenAuthMethod() {
        return Optional.ofNullable(this.tokenAuthMethod);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormTokenAuthSignAlg> tokenAuthSignAlg() {
        return Optional.ofNullable(this.tokenAuthSignAlg);
    }

    /**
     * The key ID of a JWK containing a self-signed certificate of this client.
     */
    public Optional<String> selfSignedCertificateKeyId() {
        return Optional.ofNullable(this.selfSignedCertificateKeyId);
    }

    /**
     * The string representation of the expected subject distinguished name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public Optional<String> tlsClientAuthSubjectDn() {
        return Optional.ofNullable(this.tlsClientAuthSubjectDn);
    }

    /**
     * The string representation of the expected DNS subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public Optional<String> tlsClientAuthSanDns() {
        return Optional.ofNullable(this.tlsClientAuthSanDns);
    }

    /**
     * The string representation of the expected URI subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public Optional<String> tlsClientAuthSanUri() {
        return Optional.ofNullable(this.tlsClientAuthSanUri);
    }

    /**
     * The string representation of the expected IP address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public Optional<String> tlsClientAuthSanIp() {
        return Optional.ofNullable(this.tlsClientAuthSanIp);
    }

    /**
     * The string representation of the expected email address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public Optional<String> tlsClientAuthSanEmail() {
        return Optional.ofNullable(this.tlsClientAuthSanEmail);
    }

    /**
     * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
     * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
     * in "OAuth 2.0 Pushed Authorization Requests".
     */
    public Optional<Boolean> parRequired() {
        return Optional.ofNullable(this.parRequired);
    }

    /**
     * The flag to indicate whether authorization requests from this client are always required to
     * utilize a request object by using either `request` or `request_uri` request parameter.
     * 
     * <p>If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
     * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
     * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
     */
    public Optional<Boolean> requestObjectRequired() {
        return Optional.ofNullable(this.requestObjectRequired);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormRequestSignAlg> requestSignAlg() {
        return Optional.ofNullable(this.requestSignAlg);
    }

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public Optional<ClientRegistrationDeleteApiFormRequestEncryptionAlg> requestEncryptionAlg() {
        return Optional.ofNullable(this.requestEncryptionAlg);
    }

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public Optional<ClientRegistrationDeleteApiFormRequestEncryptionEnc> requestEncryptionEnc() {
        return Optional.ofNullable(this.requestEncryptionEnc);
    }

    /**
     * An array of URLs each of which points to a request object.
     * 
     * <p>Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
     * This property is used for the pre-registration.
     * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
     */
    public Optional<List<String>> requestUris() {
        return Optional.ofNullable(this.requestUris);
    }

    /**
     * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
     * 
     * <p>This property corresponds to `default_max_age` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<Integer> defaultMaxAge() {
        return Optional.ofNullable(this.defaultMaxAge);
    }

    /**
     * The default ACRs (Authentication Context Class References). This value is used when an authorization
     * request from the client application has neither `acr_values` request parameter nor `acr` claim
     * in claims request parameter.
     */
    public Optional<List<String>> defaultAcrs() {
        return Optional.ofNullable(this.defaultAcrs);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormIdTokenSignAlg> idTokenSignAlg() {
        return Optional.ofNullable(this.idTokenSignAlg);
    }

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public Optional<ClientRegistrationDeleteApiFormIdTokenEncryptionAlg> idTokenEncryptionAlg() {
        return Optional.ofNullable(this.idTokenEncryptionAlg);
    }

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public Optional<ClientRegistrationDeleteApiFormIdTokenEncryptionEnc> idTokenEncryptionEnc() {
        return Optional.ofNullable(this.idTokenEncryptionEnc);
    }

    /**
     * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
     * 
     * <p>This property corresponds to `require_auth_time` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<Boolean> authTimeRequired() {
        return Optional.ofNullable(this.authTimeRequired);
    }

    /**
     * The subject type that the client application requests. Details about the subject type are described in
     * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
     * 
     * <p>This property corresponds to `subject_type` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<ClientRegistrationDeleteApiFormSubjectType> subjectType() {
        return Optional.ofNullable(this.subjectType);
    }

    /**
     * The value of the sector identifier URI.
     * This represents the `sector_identifier_uri` client metadata which is defined in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
     */
    public Optional<String> sectorIdentifierUri() {
        return Optional.ofNullable(this.sectorIdentifierUri);
    }

    /**
     * The sector identifier host component as derived from either the `sector_identifier_uri` or the
     * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
     * are also registered, the value of this property is `null`.
     */
    public Optional<String> derivedSectorIdentifier() {
        return Optional.ofNullable(this.derivedSectorIdentifier);
    }

    /**
     * The URL pointing to the JWK Set of the client application.
     * The content pointed to by the URL is JSON which complies with the format described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
     * and/or signs request objects, it must make available its JWK Set containing public keys for the
     * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
     * Set from the URL as necessary.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> jwksUri() {
        return Optional.ofNullable(this.jwksUri);
    }

    /**
     * The content of the JWK Set of the client application.
     * The format is described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> jwks() {
        return Optional.ofNullable(this.jwks);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormUserInfoSignAlg> userInfoSignAlg() {
        return Optional.ofNullable(this.userInfoSignAlg);
    }

    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public Optional<ClientRegistrationDeleteApiFormUserInfoEncryptionAlg> userInfoEncryptionAlg() {
        return Optional.ofNullable(this.userInfoEncryptionAlg);
    }

    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public Optional<ClientRegistrationDeleteApiFormUserInfoEncryptionEnc> userInfoEncryptionEnc() {
        return Optional.ofNullable(this.userInfoEncryptionEnc);
    }

    /**
     * The URL which a third party can use to initiate a login by the client application.
     * 
     * <p>This property corresponds to `initiate_login_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> loginUri() {
        return Optional.ofNullable(this.loginUri);
    }

    /**
     * The URL pointing to the "Terms Of Service" page.
     * 
     * <p>This property corresponds to `tos_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> tosUri() {
        return Optional.ofNullable(this.tosUri);
    }

    /**
     * URLs of "Terms Of Service" pages with language tags.
     * 
     * <p>If the client application has different "Terms Of Service" pages for different languages,
     * this property can be used to register the URLs.
     */
    public Optional<List<ClientRegistrationDeleteApiFormTosUris>> tosUris() {
        return Optional.ofNullable(this.tosUris);
    }

    /**
     * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
     * 
     * <p>This property corresponds to `policy_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> policyUri() {
        return Optional.ofNullable(this.policyUri);
    }

    /**
     * URLs of policy pages with language tags.
     * If the client application has different policy pages for different languages, this property can be used to register the URLs.
     */
    public Optional<List<ClientRegistrationDeleteApiFormPolicyUris>> policyUris() {
        return Optional.ofNullable(this.policyUris);
    }

    /**
     * The URL pointing to the home page of the client application.
     * 
     * <p>This property corresponds to `client_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public Optional<String> clientUri() {
        return Optional.ofNullable(this.clientUri);
    }

    /**
     * Home page URLs with language tags.
     * If the client application has different home pages for different languages, this property can
     * be used to register the URLs.
     */
    public Optional<List<ClientRegistrationDeleteApiFormClientUris>> clientUris() {
        return Optional.ofNullable(this.clientUris);
    }

    /**
     * The backchannel token delivery mode.
     * 
     * <p>This property corresponds to the `backchannel_token_delivery_mode` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    public Optional<String> bcDeliveryMode() {
        return Optional.ofNullable(this.bcDeliveryMode);
    }

    /**
     * The backchannel client notification endpoint.
     * 
     * <p>This property corresponds to the `backchannel_client_notification_endpoint` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    public Optional<String> bcNotificationEndpoint() {
        return Optional.ofNullable(this.bcNotificationEndpoint);
    }

    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public Optional<ClientRegistrationDeleteApiFormBcRequestSignAlg> bcRequestSignAlg() {
        return Optional.ofNullable(this.bcRequestSignAlg);
    }

    /**
     * The boolean flag to indicate whether a user code is required when this client makes a backchannel
     * authentication request.
     * 
     * <p>This property corresponds to the `backchannel_user_code_parameter` metadata.
     */
    public Optional<Boolean> bcUserCodeRequired() {
        return Optional.ofNullable(this.bcUserCodeRequired);
    }

    /**
     * The attributes of this client.
     */
    public Optional<List<ClientRegistrationDeleteApiFormAttribute>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    public Optional<ClientRegistrationDeleteApiFormExtension> extension() {
        return Optional.ofNullable(this.extension);
    }

    /**
     * The authorization details types that this client may use as values of the `type` field in
     * `authorization_details`.
     * 
     * <p>This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
     * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
     * 
     * <p>Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
     * to align with the change made by the 5th draft of the RAR specification.
     */
    public Optional<List<String>> authorizationDetailsTypes() {
        return Optional.ofNullable(this.authorizationDetailsTypes);
    }

    /**
     * The custom client metadata in JSON format.
     * 
     * <p>Standard specifications define client metadata as necessary. The following are such examples.
     * 
     * <p>* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
     * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
     * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
     * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
     * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
     * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
     * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
     * 
     * <p>Standard client metadata included in Client Registration Request and Client Update Request (cf.
     * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
     * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
     * to corresponding properties of the client application. For example, the value of the `client_name`
     * client metadata in Client Registration/Update Request is set to the clientName property. On the
     * other hand, unrecognized client metadata are discarded.
     * 
     * <p>By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
     * of Service, Authlete can recognize them and stores their values into the database. The stored
     * custom client metadata values can be referenced by this property.
     */
    public Optional<String> customMetadata() {
        return Optional.ofNullable(this.customMetadata);
    }

    /**
     * The flag indicating whether encryption of request object is required when the request object
     * is passed through the front channel.
     * 
     * <p>This flag does not affect the processing of request objects at the Pushed Authorization Request
     * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
     * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
     * 
     * <p>This flag does not indicate whether a request object is always required. There is a different
     * flag, `requestObjectRequired`, for the purpose.
     * 
     * <p>Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
     * flag of the service is `true`.
     */
    public Optional<Boolean> frontChannelRequestObjectEncryptionRequired() {
        return Optional.ofNullable(this.frontChannelRequestObjectEncryptionRequired);
    }

    /**
     * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
     * client metadata.
     * 
     * <p>The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_alg
     * &gt;
     * &gt; OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
     *   since this signals to the OP that a client_secret value needs to be returned from which the
     *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
     *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
     *   is present. If both signing and encryption are requested, the Request Object will be signed
     *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
     *   is that the RP is not declaring whether it might encrypt any Request Objects.
     * 
     * <p>The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
     * Request Objects, even when this parameter is present."
     * 
     * <p>The property that represents the client metadata is `requestEncryptionAlg`. See the description
     * of `requestEncryptionAlg` for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
     * flag of the service is `true`.
     */
    public Optional<Boolean> requestObjectEncryptionAlgMatchRequired() {
        return Optional.ofNullable(this.requestObjectEncryptionAlgMatchRequired);
    }

    /**
     * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
     * client metadata.
     * 
     * <p>The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_enc
     * &gt;
     * &gt; OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
     *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
     *   MUST also be provided.
     * 
     * <p>The property that represents the client metadata is `requestEncryptionEnc`. See the description
     * of `requestEncryptionEnc`  for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
     * flag of the service is `true`.
     */
    public Optional<Boolean> requestObjectEncryptionEncMatchRequired() {
        return Optional.ofNullable(this.requestObjectEncryptionEncMatchRequired);
    }

    /**
     * The digest algorithm that this client requests the server to use
     * when it computes digest values of &lt;a href=
     * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
     * &gt;external attachments&lt;/a&gt;, which may be referenced from within ID tokens
     * or userinfo responses (or any place that can have the `verified_claims` claim).
     * 
     * <p>Possible values are listed in the &lt;a href=
     * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
     * &gt;Hash Algorithm Registry&lt;/a&gt; of IANA (Internet Assigned Numbers Authority),
     * but the server does not necessarily support all the values there. When
     * this property is omitted, `sha-256` is used as the default algorithm.
     * 
     * <p>This property corresponds to the `digest_algorithm` client metadata
     * which was defined by the third implementer's draft of
     * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
     */
    public Optional<String> digestAlgorithm() {
        return Optional.ofNullable(this.digestAlgorithm);
    }

    /**
     * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
     * 
     * <p>Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
     * 
     * <p>Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
     */
    public Optional<Boolean> singleAccessTokenPerSubject() {
        return Optional.ofNullable(this.singleAccessTokenPerSubject);
    }

    /**
     * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
     * 
     * <p>If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
     * 
     * <p>See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
     */
    public Optional<Boolean> pkceRequired() {
        return Optional.ofNullable(this.pkceRequired);
    }

    /**
     * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
     * 
     * <p>If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
     * whenever it includes the `code_challenge` request parameter.
     * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
     */
    public Optional<Boolean> pkceS256Required() {
        return Optional.ofNullable(this.pkceS256Required);
    }

    /**
     * If the DPoP is required for this client
     */
    public Optional<Boolean> dpopRequired() {
        return Optional.ofNullable(this.dpopRequired);
    }

    /**
     * The flag indicating whether this client was registered by the
     * "automatic" client registration of OIDC Federation.
     */
    public Optional<Boolean> automaticallyRegistered() {
        return Optional.ofNullable(this.automaticallyRegistered);
    }

    /**
     * The flag indicating whether this client was registered by the
     * "explicit" client registration of OIDC Federation.
     */
    public Optional<Boolean> explicitlyRegistered() {
        return Optional.ofNullable(this.explicitlyRegistered);
    }

    /**
     * The flag indicating whether this service signs responses from the resource server.
     */
    public Optional<Boolean> rsRequestSigned() {
        return Optional.ofNullable(this.rsRequestSigned);
    }

    /**
     * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
     */
    public Optional<String> rsSignedRequestKeyId() {
        return Optional.ofNullable(this.rsSignedRequestKeyId);
    }

    /**
     * The client registration types that the client has declared it may use.
     */
    public Optional<List<ClientRegistrationDeleteApiFormClientRegistrationType>> clientRegistrationTypes() {
        return Optional.ofNullable(this.clientRegistrationTypes);
    }

    /**
     * The human-readable name representing the organization that manages this client. This property corresponds
     * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
     */
    public Optional<String> organizationName() {
        return Optional.ofNullable(this.organizationName);
    }

    /**
     * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
     * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
     */
    public Optional<String> signedJwksUri() {
        return Optional.ofNullable(this.signedJwksUri);
    }

    /**
     * the entity ID of this client.
     */
    public Optional<String> entityId() {
        return Optional.ofNullable(this.entityId);
    }

    /**
     * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
     * the mechanism defined in OpenID Connect Federation 1.0
     */
    public Optional<String> trustAnchorId() {
        return Optional.ofNullable(this.trustAnchorId);
    }

    /**
     * The trust chain that was used when this client was registered or updated by the mechanism defined in
     * OpenID Connect Federation 1.0
     */
    public Optional<List<String>> trustChain() {
        return Optional.ofNullable(this.trustChain);
    }

    /**
     * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
     * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
     */
    public Optional<Long> trustChainExpiresAt() {
        return Optional.ofNullable(this.trustChainExpiresAt);
    }

    /**
     * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
     */
    public Optional<Long> trustChainUpdatedAt() {
        return Optional.ofNullable(this.trustChainUpdatedAt);
    }

    /**
     * The flag which indicates whether this client is locked.
     */
    public Optional<Boolean> locked() {
        return Optional.ofNullable(this.locked);
    }

    /**
     * The URL of the credential offer endpoint at which this client
     * (wallet) receives a credential offer from the credential issuer.
     */
    public Optional<String> credentialOfferEndpoint() {
        return Optional.ofNullable(this.credentialOfferEndpoint);
    }

    /**
     * The FAPI modes for this client.
     * 
     * <p>When the value of this property is not `null`, Authlete always processes requests from this client
     * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
     * is supported by the service, and the FAPI modes for the service are set to `null`.
     * 
     * <p>For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
     * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
     * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
     * the service, and the FAPI modes for the service are set to `null`.
     */
    public Optional<List<ClientRegistrationDeleteApiFormFapiMode>> fapiModes() {
        return Optional.ofNullable(this.fapiModes);
    }

    /**
     * The response modes that this client may use.
     */
    public Optional<List<ClientRegistrationDeleteApiFormResponseMode>> responseModes() {
        return Optional.ofNullable(this.responseModes);
    }

    /**
     * True if credential responses to this client must be always encrypted.
     */
    public Optional<Boolean> credentialResponseEncryptionRequired() {
        return Optional.ofNullable(this.credentialResponseEncryptionRequired);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The sequential number of the client. The value of this property is assigned by Authlete.
     */
    public ClientRegistrationDeleteApiFormClient withNumber(@Nullable Integer number) {
        this.number = number;
        return this;
    }


    /**
     * The sequential number of the service of the client application. The value of this property is
     * assigned by Authlete.
     */
    public ClientRegistrationDeleteApiFormClient withServiceNumber(@Nullable Integer serviceNumber) {
        this.serviceNumber = serviceNumber;
        return this;
    }


    /**
     * The name of the client application. This property corresponds to `client_name` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withClientName(@Nullable String clientName) {
        this.clientName = clientName;
        return this;
    }


    /**
     * Client names with language tags. If the client application has different names for different
     * languages, this property can be used to register the names.
     */
    public ClientRegistrationDeleteApiFormClient withClientNames(@Nullable List<ClientRegistrationDeleteApiFormClientName> clientNames) {
        this.clientNames = clientNames;
        return this;
    }


    /**
     * The description about the client application.
     */
    public ClientRegistrationDeleteApiFormClient withDescription(@Nullable String description) {
        this.description = description;
        return this;
    }


    /**
     * Descriptions about the client application with language tags. If the client application has different
     * descriptions for different languages, this property can be used to register the descriptions.
     */
    public ClientRegistrationDeleteApiFormClient withDescriptions(@Nullable List<ClientRegistrationDeleteApiFormDescription> descriptions) {
        this.descriptions = descriptions;
        return this;
    }


    /**
     * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
     */
    public ClientRegistrationDeleteApiFormClient withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
     * property is assigned by Authlete.
     * 
     * <p>Note that Authlete issues a client secret even to a "public" client application, but the client
     * application should not use the client secret unless it changes its client type to "confidential".
     * That is, a public client application should behave as if it had not been issued a client secret.
     * To be specific, a token request from a public client of Authlete should not come along with a
     * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
     * says as follows.
     * 
     * <p>&gt; Confidential clients or other clients issued client credentials MUST authenticate with the
     * authorization server as described in Section 2.3 when making requests to the token endpoint.
     */
    public ClientRegistrationDeleteApiFormClient withClientSecret(@Nullable String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }


    /**
     * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
     * default, this is a string version of the `clientId` property.
     */
    public ClientRegistrationDeleteApiFormClient withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * Deprecated. Always set to `true`.
     */
    public ClientRegistrationDeleteApiFormClient withClientIdAliasEnabled(@Nullable Boolean clientIdAliasEnabled) {
        this.clientIdAliasEnabled = clientIdAliasEnabled;
        return this;
    }


    /**
     * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
     * for details.
     */
    public ClientRegistrationDeleteApiFormClient withClientType(@Nullable ClientRegistrationDeleteApiFormClientType clientType) {
        this.clientType = clientType;
        return this;
    }


    /**
     * The application type. The value of this property affects the validation steps for a redirect URI.
     * See the description about `redirectUris` property for more details.
     */
    public ClientRegistrationDeleteApiFormClient withApplicationType(@Nullable ClientRegistrationDeleteApiFormApplicationType applicationType) {
        this.applicationType = applicationType;
        return this;
    }


    /**
     * The URL pointing to the logo image of the client application.
     * 
     * <p>This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withLogoUri(@Nullable String logoUri) {
        this.logoUri = logoUri;
        return this;
    }


    /**
     * Logo image URLs with language tags. If the client application has different logo images for
     * different languages, this property can be used to register URLs of the images.
     */
    public ClientRegistrationDeleteApiFormClient withLogoUris(@Nullable List<ClientRegistrationDeleteApiFormLogoUris> logoUris) {
        this.logoUris = logoUris;
        return this;
    }


    /**
     * An array of email addresses of people responsible for the client application.
     * 
     * <p>This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
     * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withContacts(@Nullable List<String> contacts) {
        this.contacts = contacts;
        return this;
    }


    /**
     * The flag to indicate whether this client use TLS client certificate bound access tokens.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientCertificateBoundAccessTokens(@Nullable Boolean tlsClientCertificateBoundAccessTokens) {
        this.tlsClientCertificateBoundAccessTokens = tlsClientCertificateBoundAccessTokens;
        return this;
    }


    /**
     * The flag to indicate whether this client has been registered dynamically.
     * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public ClientRegistrationDeleteApiFormClient withDynamicallyRegistered(@Nullable Boolean dynamicallyRegistered) {
        this.dynamicallyRegistered = dynamicallyRegistered;
        return this;
    }


    /**
     * The unique identifier string assigned by the client developer or software publisher used by
     * registration endpoints to identify the client software to be dynamically registered.
     * 
     * <p>This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public ClientRegistrationDeleteApiFormClient withSoftwareId(@Nullable String softwareId) {
        this.softwareId = softwareId;
        return this;
    }


    /**
     * The version identifier string for the client software identified by the software ID.
     * 
     * <p>This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
     * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
     */
    public ClientRegistrationDeleteApiFormClient withSoftwareVersion(@Nullable String softwareVersion) {
        this.softwareVersion = softwareVersion;
        return this;
    }


    /**
     * The hash of the registration access token for this client.
     */
    public ClientRegistrationDeleteApiFormClient withRegistrationAccessTokenHash(@Nullable String registrationAccessTokenHash) {
        this.registrationAccessTokenHash = registrationAccessTokenHash;
        return this;
    }


    /**
     * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    public ClientRegistrationDeleteApiFormClient withCreatedAt(@Nullable Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }


    /**
     * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
     */
    public ClientRegistrationDeleteApiFormClient withModifiedAt(@Nullable Long modifiedAt) {
        this.modifiedAt = modifiedAt;
        return this;
    }


    /**
     * A string array of grant types which the client application declares that it will restrict itself to using.
     * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withGrantTypes(@Nullable List<ClientRegistrationDeleteApiFormGrantType> grantTypes) {
        this.grantTypes = grantTypes;
        return this;
    }


    /**
     * A string array of response types which the client application declares that it will restrict itself to using.
     * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
     * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withResponseTypes(@Nullable List<ClientRegistrationDeleteApiFormResponseType> responseTypes) {
        this.responseTypes = responseTypes;
        return this;
    }


    /**
     * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
     * Requirements for a redirect URI are as follows.
     * 
     * <p>**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
     * 
     * <p>- Must be an absolute URI.
     * - Must not have a fragment component.
     * 
     * <p>**Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
     * application_type")
     * 
     * <p>- The scheme of the redirect URI used for Implicit Grant by a client application whose application
     * is `web` must be `https`. This is checked at runtime by Authlete.
     * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
     * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
     * - The scheme of the redirect URI used by a client application whose application type is `native`
     * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
     * is `localhost`. This is checked at runtime by Authlete.
     * 
     * <p>**Requirements by Authlete**
     * 
     * <p>- Must consist of printable ASCII letters only.
     * - Must not exceed 200 letters.
     * 
     * <p>Note that Authlete allows the application type to be `null`. In other words, a client application
     * does not have to choose `web` or `native` as its application type.
     * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
     * 
     * <p>An authorization request from a client application which has not registered any redirect URI
     * fails unless at least all the following conditions are satisfied.
     * 
     * <p>- The client type of the client application is `confidential`.
     * - The value of `response_type` request parameter is `code`.
     * - The authorization request has the `redirect_uri` request parameter.
     * - The value of `scope` request parameter does not contain `openid`.
     * 
     * <p>RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
     * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
     * details), but OpenID Connect requires exact match.
     */
    public ClientRegistrationDeleteApiFormClient withRedirectUris(@Nullable List<String> redirectUris) {
        this.redirectUris = redirectUris;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withAuthorizationSignAlg(@Nullable ClientRegistrationDeleteApiFormAuthorizationSignAlg authorizationSignAlg) {
        this.authorizationSignAlg = authorizationSignAlg;
        return this;
    }


    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public ClientRegistrationDeleteApiFormClient withAuthorizationEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg authorizationEncryptionAlg) {
        this.authorizationEncryptionAlg = authorizationEncryptionAlg;
        return this;
    }


    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public ClientRegistrationDeleteApiFormClient withAuthorizationEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc authorizationEncryptionEnc) {
        this.authorizationEncryptionEnc = authorizationEncryptionEnc;
        return this;
    }


    /**
     * The client authentication method that the client application declares that it uses at the token
     * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
     * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withTokenAuthMethod(@Nullable ClientRegistrationDeleteApiFormTokenAuthMethod tokenAuthMethod) {
        this.tokenAuthMethod = tokenAuthMethod;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withTokenAuthSignAlg(@Nullable ClientRegistrationDeleteApiFormTokenAuthSignAlg tokenAuthSignAlg) {
        this.tokenAuthSignAlg = tokenAuthSignAlg;
        return this;
    }


    /**
     * The key ID of a JWK containing a self-signed certificate of this client.
     */
    public ClientRegistrationDeleteApiFormClient withSelfSignedCertificateKeyId(@Nullable String selfSignedCertificateKeyId) {
        this.selfSignedCertificateKeyId = selfSignedCertificateKeyId;
        return this;
    }


    /**
     * The string representation of the expected subject distinguished name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientAuthSubjectDn(@Nullable String tlsClientAuthSubjectDn) {
        this.tlsClientAuthSubjectDn = tlsClientAuthSubjectDn;
        return this;
    }


    /**
     * The string representation of the expected DNS subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientAuthSanDns(@Nullable String tlsClientAuthSanDns) {
        this.tlsClientAuthSanDns = tlsClientAuthSanDns;
        return this;
    }


    /**
     * The string representation of the expected URI subject alternative name of the certificate this
     * client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientAuthSanUri(@Nullable String tlsClientAuthSanUri) {
        this.tlsClientAuthSanUri = tlsClientAuthSanUri;
        return this;
    }


    /**
     * The string representation of the expected IP address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientAuthSanIp(@Nullable String tlsClientAuthSanIp) {
        this.tlsClientAuthSanIp = tlsClientAuthSanIp;
        return this;
    }


    /**
     * The string representation of the expected email address subject alternative name of the certificate
     * this client will use in mutual TLS authentication.
     * 
     * <p>See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
     * Registration" for details.
     */
    public ClientRegistrationDeleteApiFormClient withTlsClientAuthSanEmail(@Nullable String tlsClientAuthSanEmail) {
        this.tlsClientAuthSanEmail = tlsClientAuthSanEmail;
        return this;
    }


    /**
     * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
     * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
     * in "OAuth 2.0 Pushed Authorization Requests".
     */
    public ClientRegistrationDeleteApiFormClient withParRequired(@Nullable Boolean parRequired) {
        this.parRequired = parRequired;
        return this;
    }


    /**
     * The flag to indicate whether authorization requests from this client are always required to
     * utilize a request object by using either `request` or `request_uri` request parameter.
     * 
     * <p>If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
     * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
     * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
     */
    public ClientRegistrationDeleteApiFormClient withRequestObjectRequired(@Nullable Boolean requestObjectRequired) {
        this.requestObjectRequired = requestObjectRequired;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withRequestSignAlg(@Nullable ClientRegistrationDeleteApiFormRequestSignAlg requestSignAlg) {
        this.requestSignAlg = requestSignAlg;
        return this;
    }


    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public ClientRegistrationDeleteApiFormClient withRequestEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormRequestEncryptionAlg requestEncryptionAlg) {
        this.requestEncryptionAlg = requestEncryptionAlg;
        return this;
    }


    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public ClientRegistrationDeleteApiFormClient withRequestEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormRequestEncryptionEnc requestEncryptionEnc) {
        this.requestEncryptionEnc = requestEncryptionEnc;
        return this;
    }


    /**
     * An array of URLs each of which points to a request object.
     * 
     * <p>Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
     * This property is used for the pre-registration.
     * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
     */
    public ClientRegistrationDeleteApiFormClient withRequestUris(@Nullable List<String> requestUris) {
        this.requestUris = requestUris;
        return this;
    }


    /**
     * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
     * 
     * <p>This property corresponds to `default_max_age` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withDefaultMaxAge(@Nullable Integer defaultMaxAge) {
        this.defaultMaxAge = defaultMaxAge;
        return this;
    }


    /**
     * The default ACRs (Authentication Context Class References). This value is used when an authorization
     * request from the client application has neither `acr_values` request parameter nor `acr` claim
     * in claims request parameter.
     */
    public ClientRegistrationDeleteApiFormClient withDefaultAcrs(@Nullable List<String> defaultAcrs) {
        this.defaultAcrs = defaultAcrs;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withIdTokenSignAlg(@Nullable ClientRegistrationDeleteApiFormIdTokenSignAlg idTokenSignAlg) {
        this.idTokenSignAlg = idTokenSignAlg;
        return this;
    }


    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public ClientRegistrationDeleteApiFormClient withIdTokenEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionAlg idTokenEncryptionAlg) {
        this.idTokenEncryptionAlg = idTokenEncryptionAlg;
        return this;
    }


    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public ClientRegistrationDeleteApiFormClient withIdTokenEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionEnc idTokenEncryptionEnc) {
        this.idTokenEncryptionEnc = idTokenEncryptionEnc;
        return this;
    }


    /**
     * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
     * 
     * <p>This property corresponds to `require_auth_time` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withAuthTimeRequired(@Nullable Boolean authTimeRequired) {
        this.authTimeRequired = authTimeRequired;
        return this;
    }


    /**
     * The subject type that the client application requests. Details about the subject type are described in
     * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
     * 
     * <p>This property corresponds to `subject_type` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withSubjectType(@Nullable ClientRegistrationDeleteApiFormSubjectType subjectType) {
        this.subjectType = subjectType;
        return this;
    }


    /**
     * The value of the sector identifier URI.
     * This represents the `sector_identifier_uri` client metadata which is defined in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
     */
    public ClientRegistrationDeleteApiFormClient withSectorIdentifierUri(@Nullable String sectorIdentifierUri) {
        this.sectorIdentifierUri = sectorIdentifierUri;
        return this;
    }


    /**
     * The sector identifier host component as derived from either the `sector_identifier_uri` or the
     * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
     * are also registered, the value of this property is `null`.
     */
    public ClientRegistrationDeleteApiFormClient withDerivedSectorIdentifier(@Nullable String derivedSectorIdentifier) {
        this.derivedSectorIdentifier = derivedSectorIdentifier;
        return this;
    }


    /**
     * The URL pointing to the JWK Set of the client application.
     * The content pointed to by the URL is JSON which complies with the format described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
     * and/or signs request objects, it must make available its JWK Set containing public keys for the
     * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
     * Set from the URL as necessary.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withJwksUri(@Nullable String jwksUri) {
        this.jwksUri = jwksUri;
        return this;
    }


    /**
     * The content of the JWK Set of the client application.
     * The format is described in
     * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
     * The JWK Set must not include private keys of the client application.
     * 
     * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
     * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
     * when `jwksUri` is registered.
     * 
     * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
     * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withJwks(@Nullable String jwks) {
        this.jwks = jwks;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withUserInfoSignAlg(@Nullable ClientRegistrationDeleteApiFormUserInfoSignAlg userInfoSignAlg) {
        this.userInfoSignAlg = userInfoSignAlg;
        return this;
    }


    /**
     * this is the 'alg' header value for encrypted JWT tokens.
     * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
     * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
     * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
     * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
     * 
     * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
     */
    public ClientRegistrationDeleteApiFormClient withUserInfoEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionAlg userInfoEncryptionAlg) {
        this.userInfoEncryptionAlg = userInfoEncryptionAlg;
        return this;
    }


    /**
     * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
     * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
     *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
     *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
     *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
     */
    public ClientRegistrationDeleteApiFormClient withUserInfoEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionEnc userInfoEncryptionEnc) {
        this.userInfoEncryptionEnc = userInfoEncryptionEnc;
        return this;
    }


    /**
     * The URL which a third party can use to initiate a login by the client application.
     * 
     * <p>This property corresponds to `initiate_login_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withLoginUri(@Nullable String loginUri) {
        this.loginUri = loginUri;
        return this;
    }


    /**
     * The URL pointing to the "Terms Of Service" page.
     * 
     * <p>This property corresponds to `tos_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withTosUri(@Nullable String tosUri) {
        this.tosUri = tosUri;
        return this;
    }


    /**
     * URLs of "Terms Of Service" pages with language tags.
     * 
     * <p>If the client application has different "Terms Of Service" pages for different languages,
     * this property can be used to register the URLs.
     */
    public ClientRegistrationDeleteApiFormClient withTosUris(@Nullable List<ClientRegistrationDeleteApiFormTosUris> tosUris) {
        this.tosUris = tosUris;
        return this;
    }


    /**
     * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
     * 
     * <p>This property corresponds to `policy_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withPolicyUri(@Nullable String policyUri) {
        this.policyUri = policyUri;
        return this;
    }


    /**
     * URLs of policy pages with language tags.
     * If the client application has different policy pages for different languages, this property can be used to register the URLs.
     */
    public ClientRegistrationDeleteApiFormClient withPolicyUris(@Nullable List<ClientRegistrationDeleteApiFormPolicyUris> policyUris) {
        this.policyUris = policyUris;
        return this;
    }


    /**
     * The URL pointing to the home page of the client application.
     * 
     * <p>This property corresponds to `client_uri` in
     * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
     */
    public ClientRegistrationDeleteApiFormClient withClientUri(@Nullable String clientUri) {
        this.clientUri = clientUri;
        return this;
    }


    /**
     * Home page URLs with language tags.
     * If the client application has different home pages for different languages, this property can
     * be used to register the URLs.
     */
    public ClientRegistrationDeleteApiFormClient withClientUris(@Nullable List<ClientRegistrationDeleteApiFormClientUris> clientUris) {
        this.clientUris = clientUris;
        return this;
    }


    /**
     * The backchannel token delivery mode.
     * 
     * <p>This property corresponds to the `backchannel_token_delivery_mode` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    public ClientRegistrationDeleteApiFormClient withBcDeliveryMode(@Nullable String bcDeliveryMode) {
        this.bcDeliveryMode = bcDeliveryMode;
        return this;
    }


    /**
     * The backchannel client notification endpoint.
     * 
     * <p>This property corresponds to the `backchannel_client_notification_endpoint` metadata.
     * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
     * Backchannel Authentication)".
     */
    public ClientRegistrationDeleteApiFormClient withBcNotificationEndpoint(@Nullable String bcNotificationEndpoint) {
        this.bcNotificationEndpoint = bcNotificationEndpoint;
        return this;
    }


    /**
     * The signature algorithm for JWT. This value is represented on 'alg' attribute
     * of the header of JWT.
     * 
     * <p>it's semantics depends upon where is this defined, for instance:
     *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
     *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
     *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
     */
    public ClientRegistrationDeleteApiFormClient withBcRequestSignAlg(@Nullable ClientRegistrationDeleteApiFormBcRequestSignAlg bcRequestSignAlg) {
        this.bcRequestSignAlg = bcRequestSignAlg;
        return this;
    }


    /**
     * The boolean flag to indicate whether a user code is required when this client makes a backchannel
     * authentication request.
     * 
     * <p>This property corresponds to the `backchannel_user_code_parameter` metadata.
     */
    public ClientRegistrationDeleteApiFormClient withBcUserCodeRequired(@Nullable Boolean bcUserCodeRequired) {
        this.bcUserCodeRequired = bcUserCodeRequired;
        return this;
    }


    /**
     * The attributes of this client.
     */
    public ClientRegistrationDeleteApiFormClient withAttributes(@Nullable List<ClientRegistrationDeleteApiFormAttribute> attributes) {
        this.attributes = attributes;
        return this;
    }


    public ClientRegistrationDeleteApiFormClient withExtension(@Nullable ClientRegistrationDeleteApiFormExtension extension) {
        this.extension = extension;
        return this;
    }


    /**
     * The authorization details types that this client may use as values of the `type` field in
     * `authorization_details`.
     * 
     * <p>This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
     * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
     * 
     * <p>Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
     * to align with the change made by the 5th draft of the RAR specification.
     */
    public ClientRegistrationDeleteApiFormClient withAuthorizationDetailsTypes(@Nullable List<String> authorizationDetailsTypes) {
        this.authorizationDetailsTypes = authorizationDetailsTypes;
        return this;
    }


    /**
     * The custom client metadata in JSON format.
     * 
     * <p>Standard specifications define client metadata as necessary. The following are such examples.
     * 
     * <p>* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
     * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
     * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
     * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
     * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
     * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
     * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
     * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
     * 
     * <p>Standard client metadata included in Client Registration Request and Client Update Request (cf.
     * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
     * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
     * to corresponding properties of the client application. For example, the value of the `client_name`
     * client metadata in Client Registration/Update Request is set to the clientName property. On the
     * other hand, unrecognized client metadata are discarded.
     * 
     * <p>By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
     * of Service, Authlete can recognize them and stores their values into the database. The stored
     * custom client metadata values can be referenced by this property.
     */
    public ClientRegistrationDeleteApiFormClient withCustomMetadata(@Nullable String customMetadata) {
        this.customMetadata = customMetadata;
        return this;
    }


    /**
     * The flag indicating whether encryption of request object is required when the request object
     * is passed through the front channel.
     * 
     * <p>This flag does not affect the processing of request objects at the Pushed Authorization Request
     * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
     * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
     * 
     * <p>This flag does not indicate whether a request object is always required. There is a different
     * flag, `requestObjectRequired`, for the purpose.
     * 
     * <p>Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
     * flag of the service is `true`.
     */
    public ClientRegistrationDeleteApiFormClient withFrontChannelRequestObjectEncryptionRequired(@Nullable Boolean frontChannelRequestObjectEncryptionRequired) {
        this.frontChannelRequestObjectEncryptionRequired = frontChannelRequestObjectEncryptionRequired;
        return this;
    }


    /**
     * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
     * client metadata.
     * 
     * <p>The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_alg
     * &gt;
     * &gt; OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
     *   since this signals to the OP that a client_secret value needs to be returned from which the
     *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
     *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
     *   is present. If both signing and encryption are requested, the Request Object will be signed
     *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
     *   is that the RP is not declaring whether it might encrypt any Request Objects.
     * 
     * <p>The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
     * Request Objects, even when this parameter is present."
     * 
     * <p>The property that represents the client metadata is `requestEncryptionAlg`. See the description
     * of `requestEncryptionAlg` for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
     * flag of the service is `true`.
     */
    public ClientRegistrationDeleteApiFormClient withRequestObjectEncryptionAlgMatchRequired(@Nullable Boolean requestObjectEncryptionAlgMatchRequired) {
        this.requestObjectEncryptionAlgMatchRequired = requestObjectEncryptionAlgMatchRequired;
        return this;
    }


    /**
     * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
     * client metadata.
     * 
     * <p>The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
     * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
     * 
     * <p>&gt; request_object_encryption_enc
     * &gt;
     * &gt; OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
     *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
     *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
     *   MUST also be provided.
     * 
     * <p>The property that represents the client metadata is `requestEncryptionEnc`. See the description
     * of `requestEncryptionEnc`  for details.
     * 
     * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
     * flag of the service is `true`.
     */
    public ClientRegistrationDeleteApiFormClient withRequestObjectEncryptionEncMatchRequired(@Nullable Boolean requestObjectEncryptionEncMatchRequired) {
        this.requestObjectEncryptionEncMatchRequired = requestObjectEncryptionEncMatchRequired;
        return this;
    }


    /**
     * The digest algorithm that this client requests the server to use
     * when it computes digest values of &lt;a href=
     * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
     * &gt;external attachments&lt;/a&gt;, which may be referenced from within ID tokens
     * or userinfo responses (or any place that can have the `verified_claims` claim).
     * 
     * <p>Possible values are listed in the &lt;a href=
     * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
     * &gt;Hash Algorithm Registry&lt;/a&gt; of IANA (Internet Assigned Numbers Authority),
     * but the server does not necessarily support all the values there. When
     * this property is omitted, `sha-256` is used as the default algorithm.
     * 
     * <p>This property corresponds to the `digest_algorithm` client metadata
     * which was defined by the third implementer's draft of
     * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
     */
    public ClientRegistrationDeleteApiFormClient withDigestAlgorithm(@Nullable String digestAlgorithm) {
        this.digestAlgorithm = digestAlgorithm;
        return this;
    }


    /**
     * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
     * 
     * <p>Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
     * 
     * <p>Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
     */
    public ClientRegistrationDeleteApiFormClient withSingleAccessTokenPerSubject(@Nullable Boolean singleAccessTokenPerSubject) {
        this.singleAccessTokenPerSubject = singleAccessTokenPerSubject;
        return this;
    }


    /**
     * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
     * 
     * <p>If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
     * 
     * <p>See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
     */
    public ClientRegistrationDeleteApiFormClient withPkceRequired(@Nullable Boolean pkceRequired) {
        this.pkceRequired = pkceRequired;
        return this;
    }


    /**
     * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
     * 
     * <p>If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
     * whenever it includes the `code_challenge` request parameter.
     * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
     */
    public ClientRegistrationDeleteApiFormClient withPkceS256Required(@Nullable Boolean pkceS256Required) {
        this.pkceS256Required = pkceS256Required;
        return this;
    }


    /**
     * If the DPoP is required for this client
     */
    public ClientRegistrationDeleteApiFormClient withDpopRequired(@Nullable Boolean dpopRequired) {
        this.dpopRequired = dpopRequired;
        return this;
    }


    /**
     * The flag indicating whether this client was registered by the
     * "automatic" client registration of OIDC Federation.
     */
    public ClientRegistrationDeleteApiFormClient withAutomaticallyRegistered(@Nullable Boolean automaticallyRegistered) {
        this.automaticallyRegistered = automaticallyRegistered;
        return this;
    }


    /**
     * The flag indicating whether this client was registered by the
     * "explicit" client registration of OIDC Federation.
     */
    public ClientRegistrationDeleteApiFormClient withExplicitlyRegistered(@Nullable Boolean explicitlyRegistered) {
        this.explicitlyRegistered = explicitlyRegistered;
        return this;
    }


    /**
     * The flag indicating whether this service signs responses from the resource server.
     */
    public ClientRegistrationDeleteApiFormClient withRsRequestSigned(@Nullable Boolean rsRequestSigned) {
        this.rsRequestSigned = rsRequestSigned;
        return this;
    }


    /**
     * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
     */
    public ClientRegistrationDeleteApiFormClient withRsSignedRequestKeyId(@Nullable String rsSignedRequestKeyId) {
        this.rsSignedRequestKeyId = rsSignedRequestKeyId;
        return this;
    }


    /**
     * The client registration types that the client has declared it may use.
     */
    public ClientRegistrationDeleteApiFormClient withClientRegistrationTypes(@Nullable List<ClientRegistrationDeleteApiFormClientRegistrationType> clientRegistrationTypes) {
        this.clientRegistrationTypes = clientRegistrationTypes;
        return this;
    }


    /**
     * The human-readable name representing the organization that manages this client. This property corresponds
     * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
     */
    public ClientRegistrationDeleteApiFormClient withOrganizationName(@Nullable String organizationName) {
        this.organizationName = organizationName;
        return this;
    }


    /**
     * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
     * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
     */
    public ClientRegistrationDeleteApiFormClient withSignedJwksUri(@Nullable String signedJwksUri) {
        this.signedJwksUri = signedJwksUri;
        return this;
    }


    /**
     * the entity ID of this client.
     */
    public ClientRegistrationDeleteApiFormClient withEntityId(@Nullable String entityId) {
        this.entityId = entityId;
        return this;
    }


    /**
     * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
     * the mechanism defined in OpenID Connect Federation 1.0
     */
    public ClientRegistrationDeleteApiFormClient withTrustAnchorId(@Nullable String trustAnchorId) {
        this.trustAnchorId = trustAnchorId;
        return this;
    }


    /**
     * The trust chain that was used when this client was registered or updated by the mechanism defined in
     * OpenID Connect Federation 1.0
     */
    public ClientRegistrationDeleteApiFormClient withTrustChain(@Nullable List<String> trustChain) {
        this.trustChain = trustChain;
        return this;
    }


    /**
     * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
     * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
     */
    public ClientRegistrationDeleteApiFormClient withTrustChainExpiresAt(@Nullable Long trustChainExpiresAt) {
        this.trustChainExpiresAt = trustChainExpiresAt;
        return this;
    }


    /**
     * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
     */
    public ClientRegistrationDeleteApiFormClient withTrustChainUpdatedAt(@Nullable Long trustChainUpdatedAt) {
        this.trustChainUpdatedAt = trustChainUpdatedAt;
        return this;
    }


    /**
     * The flag which indicates whether this client is locked.
     */
    public ClientRegistrationDeleteApiFormClient withLocked(@Nullable Boolean locked) {
        this.locked = locked;
        return this;
    }


    /**
     * The URL of the credential offer endpoint at which this client
     * (wallet) receives a credential offer from the credential issuer.
     */
    public ClientRegistrationDeleteApiFormClient withCredentialOfferEndpoint(@Nullable String credentialOfferEndpoint) {
        this.credentialOfferEndpoint = credentialOfferEndpoint;
        return this;
    }


    /**
     * The FAPI modes for this client.
     * 
     * <p>When the value of this property is not `null`, Authlete always processes requests from this client
     * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
     * is supported by the service, and the FAPI modes for the service are set to `null`.
     * 
     * <p>For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
     * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
     * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
     * the service, and the FAPI modes for the service are set to `null`.
     */
    public ClientRegistrationDeleteApiFormClient withFapiModes(@Nullable List<ClientRegistrationDeleteApiFormFapiMode> fapiModes) {
        this.fapiModes = fapiModes;
        return this;
    }


    /**
     * The response modes that this client may use.
     */
    public ClientRegistrationDeleteApiFormClient withResponseModes(@Nullable List<ClientRegistrationDeleteApiFormResponseMode> responseModes) {
        this.responseModes = responseModes;
        return this;
    }


    /**
     * True if credential responses to this client must be always encrypted.
     */
    public ClientRegistrationDeleteApiFormClient withCredentialResponseEncryptionRequired(@Nullable Boolean credentialResponseEncryptionRequired) {
        this.credentialResponseEncryptionRequired = credentialResponseEncryptionRequired;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientRegistrationDeleteApiFormClient other = (ClientRegistrationDeleteApiFormClient) o;
        return 
            Utils.enhancedDeepEquals(this.number, other.number) &&
            Utils.enhancedDeepEquals(this.serviceNumber, other.serviceNumber) &&
            Utils.enhancedDeepEquals(this.clientName, other.clientName) &&
            Utils.enhancedDeepEquals(this.clientNames, other.clientNames) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.descriptions, other.descriptions) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientSecret, other.clientSecret) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasEnabled, other.clientIdAliasEnabled) &&
            Utils.enhancedDeepEquals(this.clientType, other.clientType) &&
            Utils.enhancedDeepEquals(this.applicationType, other.applicationType) &&
            Utils.enhancedDeepEquals(this.logoUri, other.logoUri) &&
            Utils.enhancedDeepEquals(this.logoUris, other.logoUris) &&
            Utils.enhancedDeepEquals(this.contacts, other.contacts) &&
            Utils.enhancedDeepEquals(this.tlsClientCertificateBoundAccessTokens, other.tlsClientCertificateBoundAccessTokens) &&
            Utils.enhancedDeepEquals(this.dynamicallyRegistered, other.dynamicallyRegistered) &&
            Utils.enhancedDeepEquals(this.softwareId, other.softwareId) &&
            Utils.enhancedDeepEquals(this.softwareVersion, other.softwareVersion) &&
            Utils.enhancedDeepEquals(this.registrationAccessTokenHash, other.registrationAccessTokenHash) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.modifiedAt, other.modifiedAt) &&
            Utils.enhancedDeepEquals(this.grantTypes, other.grantTypes) &&
            Utils.enhancedDeepEquals(this.responseTypes, other.responseTypes) &&
            Utils.enhancedDeepEquals(this.redirectUris, other.redirectUris) &&
            Utils.enhancedDeepEquals(this.authorizationSignAlg, other.authorizationSignAlg) &&
            Utils.enhancedDeepEquals(this.authorizationEncryptionAlg, other.authorizationEncryptionAlg) &&
            Utils.enhancedDeepEquals(this.authorizationEncryptionEnc, other.authorizationEncryptionEnc) &&
            Utils.enhancedDeepEquals(this.tokenAuthMethod, other.tokenAuthMethod) &&
            Utils.enhancedDeepEquals(this.tokenAuthSignAlg, other.tokenAuthSignAlg) &&
            Utils.enhancedDeepEquals(this.selfSignedCertificateKeyId, other.selfSignedCertificateKeyId) &&
            Utils.enhancedDeepEquals(this.tlsClientAuthSubjectDn, other.tlsClientAuthSubjectDn) &&
            Utils.enhancedDeepEquals(this.tlsClientAuthSanDns, other.tlsClientAuthSanDns) &&
            Utils.enhancedDeepEquals(this.tlsClientAuthSanUri, other.tlsClientAuthSanUri) &&
            Utils.enhancedDeepEquals(this.tlsClientAuthSanIp, other.tlsClientAuthSanIp) &&
            Utils.enhancedDeepEquals(this.tlsClientAuthSanEmail, other.tlsClientAuthSanEmail) &&
            Utils.enhancedDeepEquals(this.parRequired, other.parRequired) &&
            Utils.enhancedDeepEquals(this.requestObjectRequired, other.requestObjectRequired) &&
            Utils.enhancedDeepEquals(this.requestSignAlg, other.requestSignAlg) &&
            Utils.enhancedDeepEquals(this.requestEncryptionAlg, other.requestEncryptionAlg) &&
            Utils.enhancedDeepEquals(this.requestEncryptionEnc, other.requestEncryptionEnc) &&
            Utils.enhancedDeepEquals(this.requestUris, other.requestUris) &&
            Utils.enhancedDeepEquals(this.defaultMaxAge, other.defaultMaxAge) &&
            Utils.enhancedDeepEquals(this.defaultAcrs, other.defaultAcrs) &&
            Utils.enhancedDeepEquals(this.idTokenSignAlg, other.idTokenSignAlg) &&
            Utils.enhancedDeepEquals(this.idTokenEncryptionAlg, other.idTokenEncryptionAlg) &&
            Utils.enhancedDeepEquals(this.idTokenEncryptionEnc, other.idTokenEncryptionEnc) &&
            Utils.enhancedDeepEquals(this.authTimeRequired, other.authTimeRequired) &&
            Utils.enhancedDeepEquals(this.subjectType, other.subjectType) &&
            Utils.enhancedDeepEquals(this.sectorIdentifierUri, other.sectorIdentifierUri) &&
            Utils.enhancedDeepEquals(this.derivedSectorIdentifier, other.derivedSectorIdentifier) &&
            Utils.enhancedDeepEquals(this.jwksUri, other.jwksUri) &&
            Utils.enhancedDeepEquals(this.jwks, other.jwks) &&
            Utils.enhancedDeepEquals(this.userInfoSignAlg, other.userInfoSignAlg) &&
            Utils.enhancedDeepEquals(this.userInfoEncryptionAlg, other.userInfoEncryptionAlg) &&
            Utils.enhancedDeepEquals(this.userInfoEncryptionEnc, other.userInfoEncryptionEnc) &&
            Utils.enhancedDeepEquals(this.loginUri, other.loginUri) &&
            Utils.enhancedDeepEquals(this.tosUri, other.tosUri) &&
            Utils.enhancedDeepEquals(this.tosUris, other.tosUris) &&
            Utils.enhancedDeepEquals(this.policyUri, other.policyUri) &&
            Utils.enhancedDeepEquals(this.policyUris, other.policyUris) &&
            Utils.enhancedDeepEquals(this.clientUri, other.clientUri) &&
            Utils.enhancedDeepEquals(this.clientUris, other.clientUris) &&
            Utils.enhancedDeepEquals(this.bcDeliveryMode, other.bcDeliveryMode) &&
            Utils.enhancedDeepEquals(this.bcNotificationEndpoint, other.bcNotificationEndpoint) &&
            Utils.enhancedDeepEquals(this.bcRequestSignAlg, other.bcRequestSignAlg) &&
            Utils.enhancedDeepEquals(this.bcUserCodeRequired, other.bcUserCodeRequired) &&
            Utils.enhancedDeepEquals(this.attributes, other.attributes) &&
            Utils.enhancedDeepEquals(this.extension, other.extension) &&
            Utils.enhancedDeepEquals(this.authorizationDetailsTypes, other.authorizationDetailsTypes) &&
            Utils.enhancedDeepEquals(this.customMetadata, other.customMetadata) &&
            Utils.enhancedDeepEquals(this.frontChannelRequestObjectEncryptionRequired, other.frontChannelRequestObjectEncryptionRequired) &&
            Utils.enhancedDeepEquals(this.requestObjectEncryptionAlgMatchRequired, other.requestObjectEncryptionAlgMatchRequired) &&
            Utils.enhancedDeepEquals(this.requestObjectEncryptionEncMatchRequired, other.requestObjectEncryptionEncMatchRequired) &&
            Utils.enhancedDeepEquals(this.digestAlgorithm, other.digestAlgorithm) &&
            Utils.enhancedDeepEquals(this.singleAccessTokenPerSubject, other.singleAccessTokenPerSubject) &&
            Utils.enhancedDeepEquals(this.pkceRequired, other.pkceRequired) &&
            Utils.enhancedDeepEquals(this.pkceS256Required, other.pkceS256Required) &&
            Utils.enhancedDeepEquals(this.dpopRequired, other.dpopRequired) &&
            Utils.enhancedDeepEquals(this.automaticallyRegistered, other.automaticallyRegistered) &&
            Utils.enhancedDeepEquals(this.explicitlyRegistered, other.explicitlyRegistered) &&
            Utils.enhancedDeepEquals(this.rsRequestSigned, other.rsRequestSigned) &&
            Utils.enhancedDeepEquals(this.rsSignedRequestKeyId, other.rsSignedRequestKeyId) &&
            Utils.enhancedDeepEquals(this.clientRegistrationTypes, other.clientRegistrationTypes) &&
            Utils.enhancedDeepEquals(this.organizationName, other.organizationName) &&
            Utils.enhancedDeepEquals(this.signedJwksUri, other.signedJwksUri) &&
            Utils.enhancedDeepEquals(this.entityId, other.entityId) &&
            Utils.enhancedDeepEquals(this.trustAnchorId, other.trustAnchorId) &&
            Utils.enhancedDeepEquals(this.trustChain, other.trustChain) &&
            Utils.enhancedDeepEquals(this.trustChainExpiresAt, other.trustChainExpiresAt) &&
            Utils.enhancedDeepEquals(this.trustChainUpdatedAt, other.trustChainUpdatedAt) &&
            Utils.enhancedDeepEquals(this.locked, other.locked) &&
            Utils.enhancedDeepEquals(this.credentialOfferEndpoint, other.credentialOfferEndpoint) &&
            Utils.enhancedDeepEquals(this.fapiModes, other.fapiModes) &&
            Utils.enhancedDeepEquals(this.responseModes, other.responseModes) &&
            Utils.enhancedDeepEquals(this.credentialResponseEncryptionRequired, other.credentialResponseEncryptionRequired);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            number, serviceNumber, clientName,
            clientNames, description, descriptions,
            clientId, clientSecret, clientIdAlias,
            clientIdAliasEnabled, clientType, applicationType,
            logoUri, logoUris, contacts,
            tlsClientCertificateBoundAccessTokens, dynamicallyRegistered, softwareId,
            softwareVersion, registrationAccessTokenHash, createdAt,
            modifiedAt, grantTypes, responseTypes,
            redirectUris, authorizationSignAlg, authorizationEncryptionAlg,
            authorizationEncryptionEnc, tokenAuthMethod, tokenAuthSignAlg,
            selfSignedCertificateKeyId, tlsClientAuthSubjectDn, tlsClientAuthSanDns,
            tlsClientAuthSanUri, tlsClientAuthSanIp, tlsClientAuthSanEmail,
            parRequired, requestObjectRequired, requestSignAlg,
            requestEncryptionAlg, requestEncryptionEnc, requestUris,
            defaultMaxAge, defaultAcrs, idTokenSignAlg,
            idTokenEncryptionAlg, idTokenEncryptionEnc, authTimeRequired,
            subjectType, sectorIdentifierUri, derivedSectorIdentifier,
            jwksUri, jwks, userInfoSignAlg,
            userInfoEncryptionAlg, userInfoEncryptionEnc, loginUri,
            tosUri, tosUris, policyUri,
            policyUris, clientUri, clientUris,
            bcDeliveryMode, bcNotificationEndpoint, bcRequestSignAlg,
            bcUserCodeRequired, attributes, extension,
            authorizationDetailsTypes, customMetadata, frontChannelRequestObjectEncryptionRequired,
            requestObjectEncryptionAlgMatchRequired, requestObjectEncryptionEncMatchRequired, digestAlgorithm,
            singleAccessTokenPerSubject, pkceRequired, pkceS256Required,
            dpopRequired, automaticallyRegistered, explicitlyRegistered,
            rsRequestSigned, rsSignedRequestKeyId, clientRegistrationTypes,
            organizationName, signedJwksUri, entityId,
            trustAnchorId, trustChain, trustChainExpiresAt,
            trustChainUpdatedAt, locked, credentialOfferEndpoint,
            fapiModes, responseModes, credentialResponseEncryptionRequired);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientRegistrationDeleteApiFormClient.class,
                "number", number,
                "serviceNumber", serviceNumber,
                "clientName", clientName,
                "clientNames", clientNames,
                "description", description,
                "descriptions", descriptions,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasEnabled", clientIdAliasEnabled,
                "clientType", clientType,
                "applicationType", applicationType,
                "logoUri", logoUri,
                "logoUris", logoUris,
                "contacts", contacts,
                "tlsClientCertificateBoundAccessTokens", tlsClientCertificateBoundAccessTokens,
                "dynamicallyRegistered", dynamicallyRegistered,
                "softwareId", softwareId,
                "softwareVersion", softwareVersion,
                "registrationAccessTokenHash", registrationAccessTokenHash,
                "createdAt", createdAt,
                "modifiedAt", modifiedAt,
                "grantTypes", grantTypes,
                "responseTypes", responseTypes,
                "redirectUris", redirectUris,
                "authorizationSignAlg", authorizationSignAlg,
                "authorizationEncryptionAlg", authorizationEncryptionAlg,
                "authorizationEncryptionEnc", authorizationEncryptionEnc,
                "tokenAuthMethod", tokenAuthMethod,
                "tokenAuthSignAlg", tokenAuthSignAlg,
                "selfSignedCertificateKeyId", selfSignedCertificateKeyId,
                "tlsClientAuthSubjectDn", tlsClientAuthSubjectDn,
                "tlsClientAuthSanDns", tlsClientAuthSanDns,
                "tlsClientAuthSanUri", tlsClientAuthSanUri,
                "tlsClientAuthSanIp", tlsClientAuthSanIp,
                "tlsClientAuthSanEmail", tlsClientAuthSanEmail,
                "parRequired", parRequired,
                "requestObjectRequired", requestObjectRequired,
                "requestSignAlg", requestSignAlg,
                "requestEncryptionAlg", requestEncryptionAlg,
                "requestEncryptionEnc", requestEncryptionEnc,
                "requestUris", requestUris,
                "defaultMaxAge", defaultMaxAge,
                "defaultAcrs", defaultAcrs,
                "idTokenSignAlg", idTokenSignAlg,
                "idTokenEncryptionAlg", idTokenEncryptionAlg,
                "idTokenEncryptionEnc", idTokenEncryptionEnc,
                "authTimeRequired", authTimeRequired,
                "subjectType", subjectType,
                "sectorIdentifierUri", sectorIdentifierUri,
                "derivedSectorIdentifier", derivedSectorIdentifier,
                "jwksUri", jwksUri,
                "jwks", jwks,
                "userInfoSignAlg", userInfoSignAlg,
                "userInfoEncryptionAlg", userInfoEncryptionAlg,
                "userInfoEncryptionEnc", userInfoEncryptionEnc,
                "loginUri", loginUri,
                "tosUri", tosUri,
                "tosUris", tosUris,
                "policyUri", policyUri,
                "policyUris", policyUris,
                "clientUri", clientUri,
                "clientUris", clientUris,
                "bcDeliveryMode", bcDeliveryMode,
                "bcNotificationEndpoint", bcNotificationEndpoint,
                "bcRequestSignAlg", bcRequestSignAlg,
                "bcUserCodeRequired", bcUserCodeRequired,
                "attributes", attributes,
                "extension", extension,
                "authorizationDetailsTypes", authorizationDetailsTypes,
                "customMetadata", customMetadata,
                "frontChannelRequestObjectEncryptionRequired", frontChannelRequestObjectEncryptionRequired,
                "requestObjectEncryptionAlgMatchRequired", requestObjectEncryptionAlgMatchRequired,
                "requestObjectEncryptionEncMatchRequired", requestObjectEncryptionEncMatchRequired,
                "digestAlgorithm", digestAlgorithm,
                "singleAccessTokenPerSubject", singleAccessTokenPerSubject,
                "pkceRequired", pkceRequired,
                "pkceS256Required", pkceS256Required,
                "dpopRequired", dpopRequired,
                "automaticallyRegistered", automaticallyRegistered,
                "explicitlyRegistered", explicitlyRegistered,
                "rsRequestSigned", rsRequestSigned,
                "rsSignedRequestKeyId", rsSignedRequestKeyId,
                "clientRegistrationTypes", clientRegistrationTypes,
                "organizationName", organizationName,
                "signedJwksUri", signedJwksUri,
                "entityId", entityId,
                "trustAnchorId", trustAnchorId,
                "trustChain", trustChain,
                "trustChainExpiresAt", trustChainExpiresAt,
                "trustChainUpdatedAt", trustChainUpdatedAt,
                "locked", locked,
                "credentialOfferEndpoint", credentialOfferEndpoint,
                "fapiModes", fapiModes,
                "responseModes", responseModes,
                "credentialResponseEncryptionRequired", credentialResponseEncryptionRequired);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Integer number;

        private Integer serviceNumber;

        private String clientName;

        private List<ClientRegistrationDeleteApiFormClientName> clientNames;

        private String description;

        private List<ClientRegistrationDeleteApiFormDescription> descriptions;

        private Long clientId;

        private String clientSecret;

        private String clientIdAlias;

        private Boolean clientIdAliasEnabled;

        private ClientRegistrationDeleteApiFormClientType clientType;

        private ClientRegistrationDeleteApiFormApplicationType applicationType;

        private String logoUri;

        private List<ClientRegistrationDeleteApiFormLogoUris> logoUris;

        private List<String> contacts;

        private Boolean tlsClientCertificateBoundAccessTokens;

        private Boolean dynamicallyRegistered;

        private String softwareId;

        private String softwareVersion;

        private String registrationAccessTokenHash;

        private Long createdAt;

        private Long modifiedAt;

        private List<ClientRegistrationDeleteApiFormGrantType> grantTypes;

        private List<ClientRegistrationDeleteApiFormResponseType> responseTypes;

        private List<String> redirectUris;

        private ClientRegistrationDeleteApiFormAuthorizationSignAlg authorizationSignAlg;

        private ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg authorizationEncryptionAlg;

        private ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc authorizationEncryptionEnc;

        private ClientRegistrationDeleteApiFormTokenAuthMethod tokenAuthMethod;

        private ClientRegistrationDeleteApiFormTokenAuthSignAlg tokenAuthSignAlg;

        private String selfSignedCertificateKeyId;

        private String tlsClientAuthSubjectDn;

        private String tlsClientAuthSanDns;

        private String tlsClientAuthSanUri;

        private String tlsClientAuthSanIp;

        private String tlsClientAuthSanEmail;

        private Boolean parRequired;

        private Boolean requestObjectRequired;

        private ClientRegistrationDeleteApiFormRequestSignAlg requestSignAlg;

        private ClientRegistrationDeleteApiFormRequestEncryptionAlg requestEncryptionAlg;

        private ClientRegistrationDeleteApiFormRequestEncryptionEnc requestEncryptionEnc;

        private List<String> requestUris;

        private Integer defaultMaxAge;

        private List<String> defaultAcrs;

        private ClientRegistrationDeleteApiFormIdTokenSignAlg idTokenSignAlg;

        private ClientRegistrationDeleteApiFormIdTokenEncryptionAlg idTokenEncryptionAlg;

        private ClientRegistrationDeleteApiFormIdTokenEncryptionEnc idTokenEncryptionEnc;

        private Boolean authTimeRequired;

        private ClientRegistrationDeleteApiFormSubjectType subjectType;

        private String sectorIdentifierUri;

        private String derivedSectorIdentifier;

        private String jwksUri;

        private String jwks;

        private ClientRegistrationDeleteApiFormUserInfoSignAlg userInfoSignAlg;

        private ClientRegistrationDeleteApiFormUserInfoEncryptionAlg userInfoEncryptionAlg;

        private ClientRegistrationDeleteApiFormUserInfoEncryptionEnc userInfoEncryptionEnc;

        private String loginUri;

        private String tosUri;

        private List<ClientRegistrationDeleteApiFormTosUris> tosUris;

        private String policyUri;

        private List<ClientRegistrationDeleteApiFormPolicyUris> policyUris;

        private String clientUri;

        private List<ClientRegistrationDeleteApiFormClientUris> clientUris;

        private String bcDeliveryMode;

        private String bcNotificationEndpoint;

        private ClientRegistrationDeleteApiFormBcRequestSignAlg bcRequestSignAlg;

        private Boolean bcUserCodeRequired;

        private List<ClientRegistrationDeleteApiFormAttribute> attributes;

        private ClientRegistrationDeleteApiFormExtension extension;

        private List<String> authorizationDetailsTypes;

        private String customMetadata;

        private Boolean frontChannelRequestObjectEncryptionRequired;

        private Boolean requestObjectEncryptionAlgMatchRequired;

        private Boolean requestObjectEncryptionEncMatchRequired;

        private String digestAlgorithm;

        private Boolean singleAccessTokenPerSubject;

        private Boolean pkceRequired;

        private Boolean pkceS256Required;

        private Boolean dpopRequired;

        private Boolean automaticallyRegistered;

        private Boolean explicitlyRegistered;

        private Boolean rsRequestSigned;

        private String rsSignedRequestKeyId;

        private List<ClientRegistrationDeleteApiFormClientRegistrationType> clientRegistrationTypes;

        private String organizationName;

        private String signedJwksUri;

        private String entityId;

        private String trustAnchorId;

        private List<String> trustChain;

        private Long trustChainExpiresAt;

        private Long trustChainUpdatedAt;

        private Boolean locked;

        private String credentialOfferEndpoint;

        private List<ClientRegistrationDeleteApiFormFapiMode> fapiModes;

        private List<ClientRegistrationDeleteApiFormResponseMode> responseModes;

        private Boolean credentialResponseEncryptionRequired;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The sequential number of the client. The value of this property is assigned by Authlete.
         */
        public Builder number(@Nullable Integer number) {
            this.number = number;
            return this;
        }

        /**
         * The sequential number of the service of the client application. The value of this property is
         * assigned by Authlete.
         */
        public Builder serviceNumber(@Nullable Integer serviceNumber) {
            this.serviceNumber = serviceNumber;
            return this;
        }

        /**
         * The name of the client application. This property corresponds to `client_name` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder clientName(@Nullable String clientName) {
            this.clientName = clientName;
            return this;
        }

        /**
         * Client names with language tags. If the client application has different names for different
         * languages, this property can be used to register the names.
         */
        public Builder clientNames(@Nullable List<ClientRegistrationDeleteApiFormClientName> clientNames) {
            this.clientNames = clientNames;
            return this;
        }

        /**
         * The description about the client application.
         */
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * Descriptions about the client application with language tags. If the client application has different
         * descriptions for different languages, this property can be used to register the descriptions.
         */
        public Builder descriptions(@Nullable List<ClientRegistrationDeleteApiFormDescription> descriptions) {
            this.descriptions = descriptions;
            return this;
        }

        /**
         * The client identifier used in Authlete API calls. The value of this property is assigned by Authlete.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client secret. A random 512-bit value encoded by base64url (86 letters). The value of this
         * property is assigned by Authlete.
         * 
         * <p>Note that Authlete issues a client secret even to a "public" client application, but the client
         * application should not use the client secret unless it changes its client type to "confidential".
         * That is, a public client application should behave as if it had not been issued a client secret.
         * To be specific, a token request from a public client of Authlete should not come along with a
         * client secret although [RFC 6749, 3.2.1. Client Authentication](https://datatracker.ietf.org/doc/html/rfc6749#section-3.2.1)
         * says as follows.
         * 
         * <p>&gt; Confidential clients or other clients issued client credentials MUST authenticate with the
         * authorization server as described in Section 2.3 when making requests to the token endpoint.
         */
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The value of the client's `client_id` property used in OAuth and OpenID Connect calls. By
         * default, this is a string version of the `clientId` property.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * Deprecated. Always set to `true`.
         */
        public Builder clientIdAliasEnabled(@Nullable Boolean clientIdAliasEnabled) {
            this.clientIdAliasEnabled = clientIdAliasEnabled;
            return this;
        }

        /**
         * The client type, either `CONFIDENTIAL` or `PUBLIC`. See [RFC 6749, 2.1. Client Types](https://datatracker.ietf.org/doc/html/rfc6749#section-2.1)
         * for details.
         */
        public Builder clientType(@Nullable ClientRegistrationDeleteApiFormClientType clientType) {
            this.clientType = clientType;
            return this;
        }

        /**
         * The application type. The value of this property affects the validation steps for a redirect URI.
         * See the description about `redirectUris` property for more details.
         */
        public Builder applicationType(@Nullable ClientRegistrationDeleteApiFormApplicationType applicationType) {
            this.applicationType = applicationType;
            return this;
        }

        /**
         * The URL pointing to the logo image of the client application.
         * 
         * <p>This property corresponds to `logo_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
         * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder logoUri(@Nullable String logoUri) {
            this.logoUri = logoUri;
            return this;
        }

        /**
         * Logo image URLs with language tags. If the client application has different logo images for
         * different languages, this property can be used to register URLs of the images.
         */
        public Builder logoUris(@Nullable List<ClientRegistrationDeleteApiFormLogoUris> logoUris) {
            this.logoUris = logoUris;
            return this;
        }

        /**
         * An array of email addresses of people responsible for the client application.
         * 
         * <p>This property corresponds to contacts in [OpenID Connect Dynamic Client Registration 1.0, 2. Client
         * Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder contacts(@Nullable List<String> contacts) {
            this.contacts = contacts;
            return this;
        }

        /**
         * The flag to indicate whether this client use TLS client certificate bound access tokens.
         */
        public Builder tlsClientCertificateBoundAccessTokens(@Nullable Boolean tlsClientCertificateBoundAccessTokens) {
            this.tlsClientCertificateBoundAccessTokens = tlsClientCertificateBoundAccessTokens;
            return this;
        }

        /**
         * The flag to indicate whether this client has been registered dynamically.
         * For more details, see [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
         */
        public Builder dynamicallyRegistered(@Nullable Boolean dynamicallyRegistered) {
            this.dynamicallyRegistered = dynamicallyRegistered;
            return this;
        }

        /**
         * The unique identifier string assigned by the client developer or software publisher used by
         * registration endpoints to identify the client software to be dynamically registered.
         * 
         * <p>This property corresponds to the `software_id metadata` defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
         * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
         */
        public Builder softwareId(@Nullable String softwareId) {
            this.softwareId = softwareId;
            return this;
        }

        /**
         * The version identifier string for the client software identified by the software ID.
         * 
         * <p>This property corresponds to the software_version metadata defined in [2. Client Metadata](https://datatracker.ietf.org/doc/html/rfc7591#section-2)
         * of [RFC 7591](https://datatracker.ietf.org/doc/html/rfc7591).
         */
        public Builder softwareVersion(@Nullable String softwareVersion) {
            this.softwareVersion = softwareVersion;
            return this;
        }

        /**
         * The hash of the registration access token for this client.
         */
        public Builder registrationAccessTokenHash(@Nullable String registrationAccessTokenHash) {
            this.registrationAccessTokenHash = registrationAccessTokenHash;
            return this;
        }

        /**
         * The time at which this client was created. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
         */
        public Builder createdAt(@Nullable Long createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The time at which this client was last modified. The value is represented as milliseconds since the UNIX epoch (1970-01-01).
         */
        public Builder modifiedAt(@Nullable Long modifiedAt) {
            this.modifiedAt = modifiedAt;
            return this;
        }

        /**
         * A string array of grant types which the client application declares that it will restrict itself to using.
         * This property corresponds to `grant_types` in [OpenID Connect Dynamic Client Registration 1.0,
         * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder grantTypes(@Nullable List<ClientRegistrationDeleteApiFormGrantType> grantTypes) {
            this.grantTypes = grantTypes;
            return this;
        }

        /**
         * A string array of response types which the client application declares that it will restrict itself to using.
         * This property corresponds to `response_types` in [OpenID Connect Dynamic Client Registration 1.0,
         * 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder responseTypes(@Nullable List<ClientRegistrationDeleteApiFormResponseType> responseTypes) {
            this.responseTypes = responseTypes;
            return this;
        }

        /**
         * Redirect URIs that the client application uses to receive a response from the authorization endpoint.
         * Requirements for a redirect URI are as follows.
         * 
         * <p>**Requirements by RFC 6749** (From [RFC 6749, 3.1.2. Redirection Endpoint](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2))
         * 
         * <p>- Must be an absolute URI.
         * - Must not have a fragment component.
         * 
         * <p>**Requirements by OpenID Connect** (From "[OpenID Connect Dynamic Client Registration 1.0, 2.
         * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata),
         * application_type")
         * 
         * <p>- The scheme of the redirect URI used for Implicit Grant by a client application whose application
         * is `web` must be `https`. This is checked at runtime by Authlete.
         * - The hostname of the redirect URI used for Implicit Grant by a client application whose application
         * type is `web` must not be `localhost`. This is checked at runtime by Authlete.
         * - The scheme of the redirect URI used by a client application whose application type is `native`
         * must be either (1) a custom scheme or (2) `http`, which is allowed only when the hostname part
         * is `localhost`. This is checked at runtime by Authlete.
         * 
         * <p>**Requirements by Authlete**
         * 
         * <p>- Must consist of printable ASCII letters only.
         * - Must not exceed 200 letters.
         * 
         * <p>Note that Authlete allows the application type to be `null`. In other words, a client application
         * does not have to choose `web` or `native` as its application type.
         * If the application type is `null`, the requirements by OpenID Connect are not checked at runtime.
         * 
         * <p>An authorization request from a client application which has not registered any redirect URI
         * fails unless at least all the following conditions are satisfied.
         * 
         * <p>- The client type of the client application is `confidential`.
         * - The value of `response_type` request parameter is `code`.
         * - The authorization request has the `redirect_uri` request parameter.
         * - The value of `scope` request parameter does not contain `openid`.
         * 
         * <p>RFC 6749 allows partial match of redirect URI under some conditions (see [RFC 6749, 3.1.2.2.
         * Registration Requirements](https://datatracker.ietf.org/doc/html/rfc6749#section-3.1.2.2) for
         * details), but OpenID Connect requires exact match.
         */
        public Builder redirectUris(@Nullable List<String> redirectUris) {
            this.redirectUris = redirectUris;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder authorizationSignAlg(@Nullable ClientRegistrationDeleteApiFormAuthorizationSignAlg authorizationSignAlg) {
            this.authorizationSignAlg = authorizationSignAlg;
            return this;
        }

        /**
         * this is the 'alg' header value for encrypted JWT tokens.
         * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
         * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
         * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
         * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
         * 
         * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
         */
        public Builder authorizationEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionAlg authorizationEncryptionAlg) {
            this.authorizationEncryptionAlg = authorizationEncryptionAlg;
            return this;
        }

        /**
         * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
         * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
         *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
         *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
         *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
         */
        public Builder authorizationEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormAuthorizationEncryptionEnc authorizationEncryptionEnc) {
            this.authorizationEncryptionEnc = authorizationEncryptionEnc;
            return this;
        }

        /**
         * The client authentication method that the client application declares that it uses at the token
         * endpoint. This property corresponds to `token_endpoint_auth_method` in [OpenID Connect Dynamic
         * Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder tokenAuthMethod(@Nullable ClientRegistrationDeleteApiFormTokenAuthMethod tokenAuthMethod) {
            this.tokenAuthMethod = tokenAuthMethod;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder tokenAuthSignAlg(@Nullable ClientRegistrationDeleteApiFormTokenAuthSignAlg tokenAuthSignAlg) {
            this.tokenAuthSignAlg = tokenAuthSignAlg;
            return this;
        }

        /**
         * The key ID of a JWK containing a self-signed certificate of this client.
         */
        public Builder selfSignedCertificateKeyId(@Nullable String selfSignedCertificateKeyId) {
            this.selfSignedCertificateKeyId = selfSignedCertificateKeyId;
            return this;
        }

        /**
         * The string representation of the expected subject distinguished name of the certificate this
         * client will use in mutual TLS authentication.
         * 
         * <p>See `tls_client_auth_subject_dn` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
         * Registration" for details.
         */
        public Builder tlsClientAuthSubjectDn(@Nullable String tlsClientAuthSubjectDn) {
            this.tlsClientAuthSubjectDn = tlsClientAuthSubjectDn;
            return this;
        }

        /**
         * The string representation of the expected DNS subject alternative name of the certificate this
         * client will use in mutual TLS authentication.
         * 
         * <p>See `tls_client_auth_san_dns` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
         * Registration" for details.
         */
        public Builder tlsClientAuthSanDns(@Nullable String tlsClientAuthSanDns) {
            this.tlsClientAuthSanDns = tlsClientAuthSanDns;
            return this;
        }

        /**
         * The string representation of the expected URI subject alternative name of the certificate this
         * client will use in mutual TLS authentication.
         * 
         * <p>See `tls_client_auth_san_uri` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
         * Registration" for details.
         */
        public Builder tlsClientAuthSanUri(@Nullable String tlsClientAuthSanUri) {
            this.tlsClientAuthSanUri = tlsClientAuthSanUri;
            return this;
        }

        /**
         * The string representation of the expected IP address subject alternative name of the certificate
         * this client will use in mutual TLS authentication.
         * 
         * <p>See `tls_client_auth_san_ip` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
         * Registration" for details.
         */
        public Builder tlsClientAuthSanIp(@Nullable String tlsClientAuthSanIp) {
            this.tlsClientAuthSanIp = tlsClientAuthSanIp;
            return this;
        }

        /**
         * The string representation of the expected email address subject alternative name of the certificate
         * this client will use in mutual TLS authentication.
         * 
         * <p>See `tls_client_auth_san_email` in "Mutual TLS Profiles for OAuth Clients, 2.3. Dynamic Client
         * Registration" for details.
         */
        public Builder tlsClientAuthSanEmail(@Nullable String tlsClientAuthSanEmail) {
            this.tlsClientAuthSanEmail = tlsClientAuthSanEmail;
            return this;
        }

        /**
         * The flag to indicate whether this client is required to use the pushed authorization request endpoint.
         * This property corresponds to the `require_pushed_authorization_requests` client metadata defined
         * in "OAuth 2.0 Pushed Authorization Requests".
         */
        public Builder parRequired(@Nullable Boolean parRequired) {
            this.parRequired = parRequired;
            return this;
        }

        /**
         * The flag to indicate whether authorization requests from this client are always required to
         * utilize a request object by using either `request` or `request_uri` request parameter.
         * 
         * <p>If this flag is set to `true` and the service's `traditionalRequestObjectProcessingApplied` is
         * set to `false`, authorization requests from this client are processed as if `require_signed_request_object`
         * client metadata of this client is `true`. The metadata is defined in "JAR (JWT Secured Authorization Request)".
         */
        public Builder requestObjectRequired(@Nullable Boolean requestObjectRequired) {
            this.requestObjectRequired = requestObjectRequired;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder requestSignAlg(@Nullable ClientRegistrationDeleteApiFormRequestSignAlg requestSignAlg) {
            this.requestSignAlg = requestSignAlg;
            return this;
        }

        /**
         * this is the 'alg' header value for encrypted JWT tokens.
         * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
         * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
         * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
         * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
         * 
         * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
         */
        public Builder requestEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormRequestEncryptionAlg requestEncryptionAlg) {
            this.requestEncryptionAlg = requestEncryptionAlg;
            return this;
        }

        /**
         * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
         * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
         *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
         *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
         *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
         */
        public Builder requestEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormRequestEncryptionEnc requestEncryptionEnc) {
            this.requestEncryptionEnc = requestEncryptionEnc;
            return this;
        }

        /**
         * An array of URLs each of which points to a request object.
         * 
         * <p>Authlete requires that URLs used as values for `request_uri` request parameter be pre-registered.
         * This property is used for the pre-registration.
         * See [OpenID Connect Core 1.0, 6.2. Passing a Request Object by Reference](https://openid.net/specs/openid-connect-core-1_0.html#RequestUriParameter) for details.
         */
        public Builder requestUris(@Nullable List<String> requestUris) {
            this.requestUris = requestUris;
            return this;
        }

        /**
         * The default maximum authentication age in seconds. This value is used when an authorization request from the client application does not have `max_age` request parameter.
         * 
         * <p>This property corresponds to `default_max_age` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder defaultMaxAge(@Nullable Integer defaultMaxAge) {
            this.defaultMaxAge = defaultMaxAge;
            return this;
        }

        /**
         * The default ACRs (Authentication Context Class References). This value is used when an authorization
         * request from the client application has neither `acr_values` request parameter nor `acr` claim
         * in claims request parameter.
         */
        public Builder defaultAcrs(@Nullable List<String> defaultAcrs) {
            this.defaultAcrs = defaultAcrs;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder idTokenSignAlg(@Nullable ClientRegistrationDeleteApiFormIdTokenSignAlg idTokenSignAlg) {
            this.idTokenSignAlg = idTokenSignAlg;
            return this;
        }

        /**
         * this is the 'alg' header value for encrypted JWT tokens.
         * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
         * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
         * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
         * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
         * 
         * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
         */
        public Builder idTokenEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionAlg idTokenEncryptionAlg) {
            this.idTokenEncryptionAlg = idTokenEncryptionAlg;
            return this;
        }

        /**
         * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
         * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
         *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
         *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
         *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
         */
        public Builder idTokenEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormIdTokenEncryptionEnc idTokenEncryptionEnc) {
            this.idTokenEncryptionEnc = idTokenEncryptionEnc;
            return this;
        }

        /**
         * The flag to indicate whether this client requires `auth_time` claim to be embedded in the ID token.
         * 
         * <p>This property corresponds to `require_auth_time` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder authTimeRequired(@Nullable Boolean authTimeRequired) {
            this.authTimeRequired = authTimeRequired;
            return this;
        }

        /**
         * The subject type that the client application requests. Details about the subject type are described in
         * [OpenID Connect Core 1.0, 8. Subjct Identifier Types](https://openid.net/specs/openid-connect-core-1_0.html#SubjectIDTypes).
         * 
         * <p>This property corresponds to `subject_type` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder subjectType(@Nullable ClientRegistrationDeleteApiFormSubjectType subjectType) {
            this.subjectType = subjectType;
            return this;
        }

        /**
         * The value of the sector identifier URI.
         * This represents the `sector_identifier_uri` client metadata which is defined in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata)
         */
        public Builder sectorIdentifierUri(@Nullable String sectorIdentifierUri) {
            this.sectorIdentifierUri = sectorIdentifierUri;
            return this;
        }

        /**
         * The sector identifier host component as derived from either the `sector_identifier_uri` or the
         * registered redirect URI. If no `sector_identifier_uri` is registered and multiple redirect URIs
         * are also registered, the value of this property is `null`.
         */
        public Builder derivedSectorIdentifier(@Nullable String derivedSectorIdentifier) {
            this.derivedSectorIdentifier = derivedSectorIdentifier;
            return this;
        }

        /**
         * The URL pointing to the JWK Set of the client application.
         * The content pointed to by the URL is JSON which complies with the format described in
         * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
         * The JWK Set must not include private keys of the client application.
         * 
         * <p>If the client application requests encryption for ID tokens (from the authorization/token/userinfo endpoints)
         * and/or signs request objects, it must make available its JWK Set containing public keys for the
         * encryption and/or the signature at the URL of `jwksUri`. The service (Authlete) fetches the JWK
         * Set from the URL as necessary.
         * 
         * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
         * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
         * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
         * when `jwksUri` is registered.
         * 
         * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
         * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder jwksUri(@Nullable String jwksUri) {
            this.jwksUri = jwksUri;
            return this;
        }

        /**
         * The content of the JWK Set of the client application.
         * The format is described in
         * [JSON Web Key (JWK), 5. JWK Set Format](https://datatracker.ietf.org/doc/html/rfc7517#section-5).
         * The JWK Set must not include private keys of the client application.
         * 
         * <p>[OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
         * says that `jwks` must not be used when the client can use `jwks_uri`, but Authlete allows both
         * properties to be registered at the same time. However, Authlete does not use the content of `jwks`
         * when `jwksUri` is registered.
         * 
         * <p>This property corresponds to `jwks_uri` in [OpenID Connect Dynamic Client Registration 1.0, 2.
         * Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder jwks(@Nullable String jwks) {
            this.jwks = jwks;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder userInfoSignAlg(@Nullable ClientRegistrationDeleteApiFormUserInfoSignAlg userInfoSignAlg) {
            this.userInfoSignAlg = userInfoSignAlg;
            return this;
        }

        /**
         * this is the 'alg' header value for encrypted JWT tokens.
         * Depending upon the context, this refers to key transport scheme to be used by the client and by the server. For instance:
         * - as `authorizationEncryptionAlg` value, it refers to the encoding algorithm used by server for transporting they keys on JARM objects
         * - as `requestEncryptionAlg` value, it refers to the expected key transport encoding algorithm that server expect from client when encrypting a Request Object
         * - as `idTokenEncryptionAlg` value, it refers to the algorithm used by the server to key transport of id_tokens
         * 
         * <p>**Please note that some of the algorithms are more secure than others, some are not supported very well cross platforms and some (like RSA1_5) is known to be weak**.
         */
        public Builder userInfoEncryptionAlg(@Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionAlg userInfoEncryptionAlg) {
            this.userInfoEncryptionAlg = userInfoEncryptionAlg;
            return this;
        }

        /**
         * This is the encryption algorithm to be used when encrypting a JWT on client or server side.
         * Depending upon the context, this refers to encryption done by the client or by the server. For instance:
         *   - as `authorizationEncryptionEnc` value, it refers to the encryption algorithm used by server when creating a JARM response
         *   - as `requestEncryptionEnc` value, it refers to the expected encryption algorithm used by the client when encrypting a Request Object
         *   - as `idTokenEncryptionEnc` value, it refers to the algorithm used by the server to encrypt id_tokens
         */
        public Builder userInfoEncryptionEnc(@Nullable ClientRegistrationDeleteApiFormUserInfoEncryptionEnc userInfoEncryptionEnc) {
            this.userInfoEncryptionEnc = userInfoEncryptionEnc;
            return this;
        }

        /**
         * The URL which a third party can use to initiate a login by the client application.
         * 
         * <p>This property corresponds to `initiate_login_uri` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder loginUri(@Nullable String loginUri) {
            this.loginUri = loginUri;
            return this;
        }

        /**
         * The URL pointing to the "Terms Of Service" page.
         * 
         * <p>This property corresponds to `tos_uri` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder tosUri(@Nullable String tosUri) {
            this.tosUri = tosUri;
            return this;
        }

        /**
         * URLs of "Terms Of Service" pages with language tags.
         * 
         * <p>If the client application has different "Terms Of Service" pages for different languages,
         * this property can be used to register the URLs.
         */
        public Builder tosUris(@Nullable List<ClientRegistrationDeleteApiFormTosUris> tosUris) {
            this.tosUris = tosUris;
            return this;
        }

        /**
         * The URL pointing to the page which describes the policy as to how end-user's profile data is used.
         * 
         * <p>This property corresponds to `policy_uri` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder policyUri(@Nullable String policyUri) {
            this.policyUri = policyUri;
            return this;
        }

        /**
         * URLs of policy pages with language tags.
         * If the client application has different policy pages for different languages, this property can be used to register the URLs.
         */
        public Builder policyUris(@Nullable List<ClientRegistrationDeleteApiFormPolicyUris> policyUris) {
            this.policyUris = policyUris;
            return this;
        }

        /**
         * The URL pointing to the home page of the client application.
         * 
         * <p>This property corresponds to `client_uri` in
         * [OpenID Connect Dynamic Client Registration 1.0, 2. Client Metadata](https://openid.net/specs/openid-connect-registration-1_0.html#ClientMetadata).
         */
        public Builder clientUri(@Nullable String clientUri) {
            this.clientUri = clientUri;
            return this;
        }

        /**
         * Home page URLs with language tags.
         * If the client application has different home pages for different languages, this property can
         * be used to register the URLs.
         */
        public Builder clientUris(@Nullable List<ClientRegistrationDeleteApiFormClientUris> clientUris) {
            this.clientUris = clientUris;
            return this;
        }

        /**
         * The backchannel token delivery mode.
         * 
         * <p>This property corresponds to the `backchannel_token_delivery_mode` metadata.
         * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
         * Backchannel Authentication)".
         */
        public Builder bcDeliveryMode(@Nullable String bcDeliveryMode) {
            this.bcDeliveryMode = bcDeliveryMode;
            return this;
        }

        /**
         * The backchannel client notification endpoint.
         * 
         * <p>This property corresponds to the `backchannel_client_notification_endpoint` metadata.
         * The backchannel token delivery mode is defined in the specification of "CIBA (Client Initiated
         * Backchannel Authentication)".
         */
        public Builder bcNotificationEndpoint(@Nullable String bcNotificationEndpoint) {
            this.bcNotificationEndpoint = bcNotificationEndpoint;
            return this;
        }

        /**
         * The signature algorithm for JWT. This value is represented on 'alg' attribute
         * of the header of JWT.
         * 
         * <p>it's semantics depends upon where is this defined, for instance:
         *   - as service accessTokenSignAlg value, it defines that access token are JWT and the algorithm used to sign it. Check your [KB article](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/jwt-based-access-token).
         *   - as client authorizationSignAlg value, it represents the signature algorithm used when [creating a JARM response](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/enabling-jarm).
         *   - or as client requestSignAlg value, it specifies which is the expected signature used by [client on a Request Object](https://kb.authlete.com/en/s/oauth-and-openid-connect/a/request-objects).
         */
        public Builder bcRequestSignAlg(@Nullable ClientRegistrationDeleteApiFormBcRequestSignAlg bcRequestSignAlg) {
            this.bcRequestSignAlg = bcRequestSignAlg;
            return this;
        }

        /**
         * The boolean flag to indicate whether a user code is required when this client makes a backchannel
         * authentication request.
         * 
         * <p>This property corresponds to the `backchannel_user_code_parameter` metadata.
         */
        public Builder bcUserCodeRequired(@Nullable Boolean bcUserCodeRequired) {
            this.bcUserCodeRequired = bcUserCodeRequired;
            return this;
        }

        /**
         * The attributes of this client.
         */
        public Builder attributes(@Nullable List<ClientRegistrationDeleteApiFormAttribute> attributes) {
            this.attributes = attributes;
            return this;
        }

        public Builder extension(@Nullable ClientRegistrationDeleteApiFormExtension extension) {
            this.extension = extension;
            return this;
        }

        /**
         * The authorization details types that this client may use as values of the `type` field in
         * `authorization_details`.
         * 
         * <p>This property corresponds to the `authorization_details_types` metadata. See [OAuth 2.0 Rich
         * Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/) for details.
         * 
         * <p>Note that the property name was renamed from authorizationDataTypes to authorizationDetailsTypes
         * to align with the change made by the 5th draft of the RAR specification.
         */
        public Builder authorizationDetailsTypes(@Nullable List<String> authorizationDetailsTypes) {
            this.authorizationDetailsTypes = authorizationDetailsTypes;
            return this;
        }

        /**
         * The custom client metadata in JSON format.
         * 
         * <p>Standard specifications define client metadata as necessary. The following are such examples.
         * 
         * <p>* [OpenID Connect Dynamic Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html)
         * * [RFC 7591 OAuth 2.0 Dynamic Client Registration Protocol](https://www.rfc-editor.org/rfc/rfc7591.html)
         * * [RFC 8705 OAuth 2.0 Mutual-TLS Client Authentication and Certificate-Bound Access Tokens](https://www.rfc-editor.org/rfc/rfc8705.html)
         * * [OpenID Connect Client-Initiated Backchannel Authentication Flow - Core 1.0](https://openid.net/specs/openid-client-initiated-backchannel-authentication-core-1_0.html)
         * * [The OAuth 2.0 Authorization Framework: JWT Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-jwsreq/)
         * * [Financial-grade API: JWT Secured Authorization Response Mode for OAuth 2.0 (JARM)](https://openid.net/specs/openid-financial-api-jarm.html)
         * * [OAuth 2.0 Pushed Authorization Requests (PAR)](https://datatracker.ietf.org/doc/rfc9126/)
         * * [OAuth 2.0 Rich Authorization Requests (RAR)](https://datatracker.ietf.org/doc/draft-ietf-oauth-rar/)
         * 
         * <p>Standard client metadata included in Client Registration Request and Client Update Request (cf.
         * [OIDC DynReg](https://openid.net/specs/openid-connect-registration-1_0.html), [RFC 7591](https://www.rfc-editor.org/rfc/rfc7591.html)
         * and [RFC 7592](https://www.rfc-editor.org/rfc/rfc7592.html)) are, if supported by Authlete, set
         * to corresponding properties of the client application. For example, the value of the `client_name`
         * client metadata in Client Registration/Update Request is set to the clientName property. On the
         * other hand, unrecognized client metadata are discarded.
         * 
         * <p>By listing up custom client metadata in advance by using the `supportedCustomClientMetadata` property
         * of Service, Authlete can recognize them and stores their values into the database. The stored
         * custom client metadata values can be referenced by this property.
         */
        public Builder customMetadata(@Nullable String customMetadata) {
            this.customMetadata = customMetadata;
            return this;
        }

        /**
         * The flag indicating whether encryption of request object is required when the request object
         * is passed through the front channel.
         * 
         * <p>This flag does not affect the processing of request objects at the Pushed Authorization Request
         * Endpoint, which is defined in [OAuth 2.0 Pushed Authorization Requests](https://datatracker.ietf.org/doc/rfc9126/).
         * Unecrypted request objects are accepted at the endpoint even if this flag is `true`.
         * 
         * <p>This flag does not indicate whether a request object is always required. There is a different
         * flag, `requestObjectRequired`, for the purpose.
         * 
         * <p>Even if this flag is `false`, encryption of request object is required if the `frontChannelRequestObjectEncryptionRequired`
         * flag of the service is `true`.
         */
        public Builder frontChannelRequestObjectEncryptionRequired(@Nullable Boolean frontChannelRequestObjectEncryptionRequired) {
            this.frontChannelRequestObjectEncryptionRequired = frontChannelRequestObjectEncryptionRequired;
            return this;
        }

        /**
         * The flag indicating whether the JWE alg of encrypted request object must match the `request_object_encryption_alg`
         * client metadata.
         * 
         * <p>The `request_object_encryption_alg` client metadata itself is defined in [OpenID Connect Dynamic
         * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
         * 
         * <p>&gt; request_object_encryption_alg
         * &gt;
         * &gt; OPTIONAL. JWE [JWE] alg algorithm [JWA] the RP is declaring that it may use for encrypting Request
         *   Objects sent to the OP. This parameter SHOULD be included when symmetric encryption will be used,
         *   since this signals to the OP that a client_secret value needs to be returned from which the
         *   symmetric key will be derived, that might not otherwise be returned. The RP MAY still use other
         *   supported encryption algorithms or send unencrypted Request Objects, even when this parameter
         *   is present. If both signing and encryption are requested, the Request Object will be signed
         *   then encrypted, with the result being a Nested JWT, as defined in [JWT]. The default, if omitted,
         *   is that the RP is not declaring whether it might encrypt any Request Objects.
         * 
         * <p>The point here is "The RP MAY still use other supported encryption algorithms or send unencrypted
         * Request Objects, even when this parameter is present."
         * 
         * <p>The property that represents the client metadata is `requestEncryptionAlg`. See the description
         * of `requestEncryptionAlg` for details.
         * 
         * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionAlgMatchRequired`
         * flag of the service is `true`.
         */
        public Builder requestObjectEncryptionAlgMatchRequired(@Nullable Boolean requestObjectEncryptionAlgMatchRequired) {
            this.requestObjectEncryptionAlgMatchRequired = requestObjectEncryptionAlgMatchRequired;
            return this;
        }

        /**
         * The flag indicating whether the JWE enc of encrypted request object must match the `request_object_encryption_enc`
         * client metadata.
         * 
         * <p>The `request_object_encryption_enc` client metadata itself is defined in [OpenID Connect Dynamic
         * Client Registration 1.0](https://openid.net/specs/openid-connect-registration-1_0.html) as follows.
         * 
         * <p>&gt; request_object_encryption_enc
         * &gt;
         * &gt; OPTIONAL. JWE enc algorithm [JWA] the RP is declaring that it may use for encrypting Request
         *   Objects sent to the OP. If request_object_encryption_alg is specified, the default for this
         *   value is A128CBC-HS256. When request_object_encryption_enc is included, request_object_encryption_alg
         *   MUST also be provided.
         * 
         * <p>The property that represents the client metadata is `requestEncryptionEnc`. See the description
         * of `requestEncryptionEnc`  for details.
         * 
         * <p>Even if this flag is `false`, the match is required if the `requestObjectEncryptionEncMatchRequired`
         * flag of the service is `true`.
         */
        public Builder requestObjectEncryptionEncMatchRequired(@Nullable Boolean requestObjectEncryptionEncMatchRequired) {
            this.requestObjectEncryptionEncMatchRequired = requestObjectEncryptionEncMatchRequired;
            return this;
        }

        /**
         * The digest algorithm that this client requests the server to use
         * when it computes digest values of &lt;a href=
         * "https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html#name-external-attachments"
         * &gt;external attachments&lt;/a&gt;, which may be referenced from within ID tokens
         * or userinfo responses (or any place that can have the `verified_claims` claim).
         * 
         * <p>Possible values are listed in the &lt;a href=
         * "https://www.iana.org/assignments/named-information/named-information.xhtml#hash-alg"
         * &gt;Hash Algorithm Registry&lt;/a&gt; of IANA (Internet Assigned Numbers Authority),
         * but the server does not necessarily support all the values there. When
         * this property is omitted, `sha-256` is used as the default algorithm.
         * 
         * <p>This property corresponds to the `digest_algorithm` client metadata
         * which was defined by the third implementer's draft of
         * [OpenID Connect for Identity Assurance 1.0](https://openid.net/specs/openid-connect-4-identity-assurance-1_0.html).
         */
        public Builder digestAlgorithm(@Nullable String digestAlgorithm) {
            this.digestAlgorithm = digestAlgorithm;
            return this;
        }

        /**
         * If `Enabled` is selected, an attempt to issue a new access token invalidates existing access tokens that are associated with the same combination of subject and client.
         * 
         * <p>Note that, however, attempts by Client Credentials Flow do not invalidate existing access tokens because access tokens issued by Client Credentials Flow are not associated with any end-user's subject.
         * 
         * <p>Even if `Disabled` is selected here, single access token per subject is effective if `singleAccessTokenPerSubject` of the `Service` this client belongs to is Enabled.
         */
        public Builder singleAccessTokenPerSubject(@Nullable Boolean singleAccessTokenPerSubject) {
            this.singleAccessTokenPerSubject = singleAccessTokenPerSubject;
            return this;
        }

        /**
         * The flag to indicate whether the use of Proof Key for Code Exchange (PKCE) is always required for authorization requests by Authorization Code Flow.
         * 
         * <p>If `true`, `code_challenge` request parameter is always required for authorization requests using Authorization Code Flow.
         * 
         * <p>See [RFC 7636](https://tools.ietf.org/html/rfc7636) (Proof Key for Code Exchange by OAuth Public Clients) for details about `code_challenge` request parameter.
         */
        public Builder pkceRequired(@Nullable Boolean pkceRequired) {
            this.pkceRequired = pkceRequired;
            return this;
        }

        /**
         * The flag to indicate whether `S256` is always required as the code challenge method whenever [PKCE (RFC 7636)](https://tools.ietf.org/html/rfc7636) is used.
         * 
         * <p>If this flag is set to `true`, `code_challenge_method=S256` must be included in the authorization request
         * whenever it includes the `code_challenge` request parameter.
         * Neither omission of the `code_challenge_method` request parameter nor use of plain (`code_challenge_method=plain`) is allowed.
         */
        public Builder pkceS256Required(@Nullable Boolean pkceS256Required) {
            this.pkceS256Required = pkceS256Required;
            return this;
        }

        /**
         * If the DPoP is required for this client
         */
        public Builder dpopRequired(@Nullable Boolean dpopRequired) {
            this.dpopRequired = dpopRequired;
            return this;
        }

        /**
         * The flag indicating whether this client was registered by the
         * "automatic" client registration of OIDC Federation.
         */
        public Builder automaticallyRegistered(@Nullable Boolean automaticallyRegistered) {
            this.automaticallyRegistered = automaticallyRegistered;
            return this;
        }

        /**
         * The flag indicating whether this client was registered by the
         * "explicit" client registration of OIDC Federation.
         */
        public Builder explicitlyRegistered(@Nullable Boolean explicitlyRegistered) {
            this.explicitlyRegistered = explicitlyRegistered;
            return this;
        }

        /**
         * The flag indicating whether this service signs responses from the resource server.
         */
        public Builder rsRequestSigned(@Nullable Boolean rsRequestSigned) {
            this.rsRequestSigned = rsRequestSigned;
            return this;
        }

        /**
         * The key ID of a JWK containing the public key used by this client to sign requests to the resource server.
         */
        public Builder rsSignedRequestKeyId(@Nullable String rsSignedRequestKeyId) {
            this.rsSignedRequestKeyId = rsSignedRequestKeyId;
            return this;
        }

        /**
         * The client registration types that the client has declared it may use.
         */
        public Builder clientRegistrationTypes(@Nullable List<ClientRegistrationDeleteApiFormClientRegistrationType> clientRegistrationTypes) {
            this.clientRegistrationTypes = clientRegistrationTypes;
            return this;
        }

        /**
         * The human-readable name representing the organization that manages this client. This property corresponds
         * to the organization_name client metadata that is defined in OpenID Connect Federation 1.0.
         */
        public Builder organizationName(@Nullable String organizationName) {
            this.organizationName = organizationName;
            return this;
        }

        /**
         * The URI of the endpoint that returns this client's JWK Set document in the JWT format. This property
         * corresponds to the `signed_jwks_uri` client metadata defined in OpenID Connect Federation 1.0.
         */
        public Builder signedJwksUri(@Nullable String signedJwksUri) {
            this.signedJwksUri = signedJwksUri;
            return this;
        }

        /**
         * the entity ID of this client.
         */
        public Builder entityId(@Nullable String entityId) {
            this.entityId = entityId;
            return this;
        }

        /**
         * The entity ID of the trust anchor of the trust chain that was used when this client was registered or updated by
         * the mechanism defined in OpenID Connect Federation 1.0
         */
        public Builder trustAnchorId(@Nullable String trustAnchorId) {
            this.trustAnchorId = trustAnchorId;
            return this;
        }

        /**
         * The trust chain that was used when this client was registered or updated by the mechanism defined in
         * OpenID Connect Federation 1.0
         */
        public Builder trustChain(@Nullable List<String> trustChain) {
            this.trustChain = trustChain;
            return this;
        }

        /**
         * the expiration time of the trust chain that was used when this client was registered or updated by the mechanism
         * defined in OpenID Connect Federation 1.0. The value is represented as milliseconds elapsed since the Unix epoch (1970-01-01).
         */
        public Builder trustChainExpiresAt(@Nullable Long trustChainExpiresAt) {
            this.trustChainExpiresAt = trustChainExpiresAt;
            return this;
        }

        /**
         * the time at which the trust chain was updated by the mechanism defined in OpenID Connect Federation 1.0
         */
        public Builder trustChainUpdatedAt(@Nullable Long trustChainUpdatedAt) {
            this.trustChainUpdatedAt = trustChainUpdatedAt;
            return this;
        }

        /**
         * The flag which indicates whether this client is locked.
         */
        public Builder locked(@Nullable Boolean locked) {
            this.locked = locked;
            return this;
        }

        /**
         * The URL of the credential offer endpoint at which this client
         * (wallet) receives a credential offer from the credential issuer.
         */
        public Builder credentialOfferEndpoint(@Nullable String credentialOfferEndpoint) {
            this.credentialOfferEndpoint = credentialOfferEndpoint;
            return this;
        }

        /**
         * The FAPI modes for this client.
         * 
         * <p>When the value of this property is not `null`, Authlete always processes requests from this client
         * based on the specified FAPI modes if the FAPI feature is enabled in Authlete, the FAPI profile
         * is supported by the service, and the FAPI modes for the service are set to `null`.
         * 
         * <p>For instance, when this property is set to an array containing `FAPI1_ADVANCED` only, Authlete
         * always processes requests from this client based on "Financial-grade API Security Profile 1.0 -
         * Part 2: Advanced" if the FAPI feature is enabled in Authlete, the FAPI profile is supported by
         * the service, and the FAPI modes for the service are set to `null`.
         */
        public Builder fapiModes(@Nullable List<ClientRegistrationDeleteApiFormFapiMode> fapiModes) {
            this.fapiModes = fapiModes;
            return this;
        }

        /**
         * The response modes that this client may use.
         */
        public Builder responseModes(@Nullable List<ClientRegistrationDeleteApiFormResponseMode> responseModes) {
            this.responseModes = responseModes;
            return this;
        }

        /**
         * True if credential responses to this client must be always encrypted.
         */
        public Builder credentialResponseEncryptionRequired(@Nullable Boolean credentialResponseEncryptionRequired) {
            this.credentialResponseEncryptionRequired = credentialResponseEncryptionRequired;
            return this;
        }

        public ClientRegistrationDeleteApiFormClient build() {
            return new ClientRegistrationDeleteApiFormClient(
                number, serviceNumber, clientName,
                clientNames, description, descriptions,
                clientId, clientSecret, clientIdAlias,
                clientIdAliasEnabled, clientType, applicationType,
                logoUri, logoUris, contacts,
                tlsClientCertificateBoundAccessTokens, dynamicallyRegistered, softwareId,
                softwareVersion, registrationAccessTokenHash, createdAt,
                modifiedAt, grantTypes, responseTypes,
                redirectUris, authorizationSignAlg, authorizationEncryptionAlg,
                authorizationEncryptionEnc, tokenAuthMethod, tokenAuthSignAlg,
                selfSignedCertificateKeyId, tlsClientAuthSubjectDn, tlsClientAuthSanDns,
                tlsClientAuthSanUri, tlsClientAuthSanIp, tlsClientAuthSanEmail,
                parRequired, requestObjectRequired, requestSignAlg,
                requestEncryptionAlg, requestEncryptionEnc, requestUris,
                defaultMaxAge, defaultAcrs, idTokenSignAlg,
                idTokenEncryptionAlg, idTokenEncryptionEnc, authTimeRequired,
                subjectType, sectorIdentifierUri, derivedSectorIdentifier,
                jwksUri, jwks, userInfoSignAlg,
                userInfoEncryptionAlg, userInfoEncryptionEnc, loginUri,
                tosUri, tosUris, policyUri,
                policyUris, clientUri, clientUris,
                bcDeliveryMode, bcNotificationEndpoint, bcRequestSignAlg,
                bcUserCodeRequired, attributes, extension,
                authorizationDetailsTypes, customMetadata, frontChannelRequestObjectEncryptionRequired,
                requestObjectEncryptionAlgMatchRequired, requestObjectEncryptionEncMatchRequired, digestAlgorithm,
                singleAccessTokenPerSubject, pkceRequired, pkceS256Required,
                dpopRequired, automaticallyRegistered, explicitlyRegistered,
                rsRequestSigned, rsSignedRequestKeyId, clientRegistrationTypes,
                organizationName, signedJwksUri, entityId,
                trustAnchorId, trustChain, trustChainExpiresAt,
                trustChainUpdatedAt, locked, credentialOfferEndpoint,
                fapiModes, responseModes, credentialResponseEncryptionRequired);
        }

    }
}
