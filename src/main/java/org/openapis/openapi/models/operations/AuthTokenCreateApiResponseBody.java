/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.AuthorizationDetails;
import org.openapis.openapi.models.components.Property;
import org.openapis.openapi.utils.Utils;


public class AuthTokenCreateApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthTokenCreateApiAction action;

    /**
     * The newly issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The ID of the client application associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The time at which the access token expires.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresAt")
    private Long expiresAt;

    /**
     * The duration of the newly issued access token in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiresIn")
    private Long expiresIn;

    /**
     * The grant type for the newly issued access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantType")
    private String grantType;

    /**
     * The extra properties associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<Property> properties;

    /**
     * The newly issued refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * Scopes which are associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The subject (= unique identifier) of the user associated with the newly issued access
     * token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The token type of the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenType")
    private String tokenType;

    /**
     * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
     * is set to a `non-null` value), a JWT-based access token is issued along with the original
     * random-string one.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAccessToken")
    private String jwtAccessToken;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetails authorizationDetails;

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forExternalAttachment")
    private Boolean forExternalAttachment;

    /**
     * Set the unique token identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokenId")
    private String tokenId;

    /**
     * The scopes associated with the refresh token. May be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenScopes")
    private List<String> refreshTokenScopes;

    @JsonCreator
    public AuthTokenCreateApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthTokenCreateApiAction action,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("expiresAt") @Nullable Long expiresAt,
            @JsonProperty("expiresIn") @Nullable Long expiresIn,
            @JsonProperty("grantType") @Nullable String grantType,
            @JsonProperty("properties") @Nullable List<Property> properties,
            @JsonProperty("refreshToken") @Nullable String refreshToken,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("tokenType") @Nullable String tokenType,
            @JsonProperty("jwtAccessToken") @Nullable String jwtAccessToken,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetails authorizationDetails,
            @JsonProperty("forExternalAttachment") @Nullable Boolean forExternalAttachment,
            @JsonProperty("tokenId") @Nullable String tokenId,
            @JsonProperty("refreshTokenScopes") @Nullable List<String> refreshTokenScopes) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.accessToken = accessToken;
        this.clientId = clientId;
        this.expiresAt = expiresAt;
        this.expiresIn = expiresIn;
        this.grantType = grantType;
        this.properties = properties;
        this.refreshToken = refreshToken;
        this.scopes = scopes;
        this.subject = subject;
        this.tokenType = tokenType;
        this.jwtAccessToken = jwtAccessToken;
        this.authorizationDetails = authorizationDetails;
        this.forExternalAttachment = forExternalAttachment;
        this.tokenId = tokenId;
        this.refreshTokenScopes = refreshTokenScopes;
    }
    
    public AuthTokenCreateApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthTokenCreateApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The newly issued access token.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The ID of the client application associated with the access token.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The time at which the access token expires.
     */
    public Optional<Long> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * The duration of the newly issued access token in seconds.
     */
    public Optional<Long> expiresIn() {
        return Optional.ofNullable(this.expiresIn);
    }

    /**
     * The grant type for the newly issued access token.
     */
    public Optional<String> grantType() {
        return Optional.ofNullable(this.grantType);
    }

    /**
     * The extra properties associated with the access token.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The newly issued refresh token.
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * Scopes which are associated with the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The subject (= unique identifier) of the user associated with the newly issued access
     * token.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The token type of the access token.
     */
    public Optional<String> tokenType() {
        return Optional.ofNullable(this.tokenType);
    }

    /**
     * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
     * is set to a `non-null` value), a JWT-based access token is issued along with the original
     * random-string one.
     */
    public Optional<String> jwtAccessToken() {
        return Optional.ofNullable(this.jwtAccessToken);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public Optional<Boolean> forExternalAttachment() {
        return Optional.ofNullable(this.forExternalAttachment);
    }

    /**
     * Set the unique token identifier.
     */
    public Optional<String> tokenId() {
        return Optional.ofNullable(this.tokenId);
    }

    /**
     * The scopes associated with the refresh token. May be null.
     */
    public Optional<List<String>> refreshTokenScopes() {
        return Optional.ofNullable(this.refreshTokenScopes);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthTokenCreateApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthTokenCreateApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthTokenCreateApiResponseBody withAction(@Nullable AuthTokenCreateApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The newly issued access token.
     */
    public AuthTokenCreateApiResponseBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The ID of the client application associated with the access token.
     */
    public AuthTokenCreateApiResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The time at which the access token expires.
     */
    public AuthTokenCreateApiResponseBody withExpiresAt(@Nullable Long expiresAt) {
        this.expiresAt = expiresAt;
        return this;
    }


    /**
     * The duration of the newly issued access token in seconds.
     */
    public AuthTokenCreateApiResponseBody withExpiresIn(@Nullable Long expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }


    /**
     * The grant type for the newly issued access token.
     */
    public AuthTokenCreateApiResponseBody withGrantType(@Nullable String grantType) {
        this.grantType = grantType;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     */
    public AuthTokenCreateApiResponseBody withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The newly issued refresh token.
     */
    public AuthTokenCreateApiResponseBody withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }


    /**
     * Scopes which are associated with the access token.
     */
    public AuthTokenCreateApiResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The subject (= unique identifier) of the user associated with the newly issued access
     * token.
     */
    public AuthTokenCreateApiResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The token type of the access token.
     */
    public AuthTokenCreateApiResponseBody withTokenType(@Nullable String tokenType) {
        this.tokenType = tokenType;
        return this;
    }


    /**
     * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
     * is set to a `non-null` value), a JWT-based access token is issued along with the original
     * random-string one.
     */
    public AuthTokenCreateApiResponseBody withJwtAccessToken(@Nullable String jwtAccessToken) {
        this.jwtAccessToken = jwtAccessToken;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthTokenCreateApiResponseBody withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public AuthTokenCreateApiResponseBody withForExternalAttachment(@Nullable Boolean forExternalAttachment) {
        this.forExternalAttachment = forExternalAttachment;
        return this;
    }


    /**
     * Set the unique token identifier.
     */
    public AuthTokenCreateApiResponseBody withTokenId(@Nullable String tokenId) {
        this.tokenId = tokenId;
        return this;
    }


    /**
     * The scopes associated with the refresh token. May be null.
     */
    public AuthTokenCreateApiResponseBody withRefreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
        this.refreshTokenScopes = refreshTokenScopes;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenCreateApiResponseBody other = (AuthTokenCreateApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.expiresAt, other.expiresAt) &&
            Utils.enhancedDeepEquals(this.expiresIn, other.expiresIn) &&
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.tokenType, other.tokenType) &&
            Utils.enhancedDeepEquals(this.jwtAccessToken, other.jwtAccessToken) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.forExternalAttachment, other.forExternalAttachment) &&
            Utils.enhancedDeepEquals(this.tokenId, other.tokenId) &&
            Utils.enhancedDeepEquals(this.refreshTokenScopes, other.refreshTokenScopes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            accessToken, clientId, expiresAt,
            expiresIn, grantType, properties,
            refreshToken, scopes, subject,
            tokenType, jwtAccessToken, authorizationDetails,
            forExternalAttachment, tokenId, refreshTokenScopes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenCreateApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "accessToken", accessToken,
                "clientId", clientId,
                "expiresAt", expiresAt,
                "expiresIn", expiresIn,
                "grantType", grantType,
                "properties", properties,
                "refreshToken", refreshToken,
                "scopes", scopes,
                "subject", subject,
                "tokenType", tokenType,
                "jwtAccessToken", jwtAccessToken,
                "authorizationDetails", authorizationDetails,
                "forExternalAttachment", forExternalAttachment,
                "tokenId", tokenId,
                "refreshTokenScopes", refreshTokenScopes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthTokenCreateApiAction action;

        private String accessToken;

        private Long clientId;

        private Long expiresAt;

        private Long expiresIn;

        private String grantType;

        private List<Property> properties;

        private String refreshToken;

        private List<String> scopes;

        private String subject;

        private String tokenType;

        private String jwtAccessToken;

        private AuthorizationDetails authorizationDetails;

        private Boolean forExternalAttachment;

        private String tokenId;

        private List<String> refreshTokenScopes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthTokenCreateApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The newly issued access token.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The ID of the client application associated with the access token.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The time at which the access token expires.
         */
        public Builder expiresAt(@Nullable Long expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * The duration of the newly issued access token in seconds.
         */
        public Builder expiresIn(@Nullable Long expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * The grant type for the newly issued access token.
         */
        public Builder grantType(@Nullable String grantType) {
            this.grantType = grantType;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The newly issued refresh token.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Scopes which are associated with the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The subject (= unique identifier) of the user associated with the newly issued access
         * token.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The token type of the access token.
         */
        public Builder tokenType(@Nullable String tokenType) {
            this.tokenType = tokenType;
            return this;
        }

        /**
         * If the authorization server is configured to issue JWT-based access tokens (= if `Service.accessTokenSignAlg`
         * is set to a `non-null` value), a JWT-based access token is issued along with the original
         * random-string one.
         */
        public Builder jwtAccessToken(@Nullable String jwtAccessToken) {
            this.jwtAccessToken = jwtAccessToken;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * the flag which indicates whether the access token is for an external
         * attachment.
         */
        public Builder forExternalAttachment(@Nullable Boolean forExternalAttachment) {
            this.forExternalAttachment = forExternalAttachment;
            return this;
        }

        /**
         * Set the unique token identifier.
         */
        public Builder tokenId(@Nullable String tokenId) {
            this.tokenId = tokenId;
            return this;
        }

        /**
         * The scopes associated with the refresh token. May be null.
         */
        public Builder refreshTokenScopes(@Nullable List<String> refreshTokenScopes) {
            this.refreshTokenScopes = refreshTokenScopes;
            return this;
        }

        public AuthTokenCreateApiResponseBody build() {
            return new AuthTokenCreateApiResponseBody(
                resultCode, resultMessage, action,
                accessToken, clientId, expiresAt,
                expiresIn, grantType, properties,
                refreshToken, scopes, subject,
                tokenType, jwtAccessToken, authorizationDetails,
                forExternalAttachment, tokenId, refreshTokenScopes);
        }

    }
}
