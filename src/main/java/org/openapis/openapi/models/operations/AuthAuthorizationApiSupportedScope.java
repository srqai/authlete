/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthAuthorizationApiSupportedScope {
    /**
     * The name of the scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private String name;

    /**
     * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("defaultEntry")
    private Boolean defaultEntry;

    /**
     * The description about the scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private String description;

    /**
     * The descriptions about this scope in multiple languages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("descriptions")
    private List<AuthAuthorizationApiServiceDescription> descriptions;

    /**
     * The attributes of the scope.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attributes")
    private List<AuthAuthorizationApiSupportedScopeAttribute> attributes;

    @JsonCreator
    public AuthAuthorizationApiSupportedScope(
            @JsonProperty("name") @Nullable String name,
            @JsonProperty("defaultEntry") @Nullable Boolean defaultEntry,
            @JsonProperty("description") @Nullable String description,
            @JsonProperty("descriptions") @Nullable List<AuthAuthorizationApiServiceDescription> descriptions,
            @JsonProperty("attributes") @Nullable List<AuthAuthorizationApiSupportedScopeAttribute> attributes) {
        this.name = name;
        this.defaultEntry = defaultEntry;
        this.description = description;
        this.descriptions = descriptions;
        this.attributes = attributes;
    }
    
    public AuthAuthorizationApiSupportedScope() {
        this(null, null, null,
            null, null);
    }

    /**
     * The name of the scope.
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
     */
    public Optional<Boolean> defaultEntry() {
        return Optional.ofNullable(this.defaultEntry);
    }

    /**
     * The description about the scope.
     */
    public Optional<String> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * The descriptions about this scope in multiple languages.
     */
    public Optional<List<AuthAuthorizationApiServiceDescription>> descriptions() {
        return Optional.ofNullable(this.descriptions);
    }

    /**
     * The attributes of the scope.
     */
    public Optional<List<AuthAuthorizationApiSupportedScopeAttribute>> attributes() {
        return Optional.ofNullable(this.attributes);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The name of the scope.
     */
    public AuthAuthorizationApiSupportedScope withName(@Nullable String name) {
        this.name = name;
        return this;
    }


    /**
     * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
     */
    public AuthAuthorizationApiSupportedScope withDefaultEntry(@Nullable Boolean defaultEntry) {
        this.defaultEntry = defaultEntry;
        return this;
    }


    /**
     * The description about the scope.
     */
    public AuthAuthorizationApiSupportedScope withDescription(@Nullable String description) {
        this.description = description;
        return this;
    }


    /**
     * The descriptions about this scope in multiple languages.
     */
    public AuthAuthorizationApiSupportedScope withDescriptions(@Nullable List<AuthAuthorizationApiServiceDescription> descriptions) {
        this.descriptions = descriptions;
        return this;
    }


    /**
     * The attributes of the scope.
     */
    public AuthAuthorizationApiSupportedScope withAttributes(@Nullable List<AuthAuthorizationApiSupportedScopeAttribute> attributes) {
        this.attributes = attributes;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthAuthorizationApiSupportedScope other = (AuthAuthorizationApiSupportedScope) o;
        return 
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.defaultEntry, other.defaultEntry) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.descriptions, other.descriptions) &&
            Utils.enhancedDeepEquals(this.attributes, other.attributes);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            name, defaultEntry, description,
            descriptions, attributes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthAuthorizationApiSupportedScope.class,
                "name", name,
                "defaultEntry", defaultEntry,
                "description", description,
                "descriptions", descriptions,
                "attributes", attributes);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String name;

        private Boolean defaultEntry;

        private String description;

        private List<AuthAuthorizationApiServiceDescription> descriptions;

        private List<AuthAuthorizationApiSupportedScopeAttribute> attributes;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the scope.
         */
        public Builder name(@Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * `true` to mark the scope as default. Scopes marked as default are regarded as requested when an authorization request from a client application does not contain scope request parameter.
         */
        public Builder defaultEntry(@Nullable Boolean defaultEntry) {
            this.defaultEntry = defaultEntry;
            return this;
        }

        /**
         * The description about the scope.
         */
        public Builder description(@Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * The descriptions about this scope in multiple languages.
         */
        public Builder descriptions(@Nullable List<AuthAuthorizationApiServiceDescription> descriptions) {
            this.descriptions = descriptions;
            return this;
        }

        /**
         * The attributes of the scope.
         */
        public Builder attributes(@Nullable List<AuthAuthorizationApiSupportedScopeAttribute> attributes) {
            this.attributes = attributes;
            return this;
        }

        public AuthAuthorizationApiSupportedScope build() {
            return new AuthAuthorizationApiSupportedScope(
                name, defaultEntry, description,
                descriptions, attributes);
        }

    }
}
