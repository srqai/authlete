/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ClientRegistrationDeleteApiRequestBody {
    /**
     * Client ID.
     */
    @JsonProperty("clientId")
    private String clientId;

    /**
     * Client registration access token.
     */
    @JsonProperty("token")
    private String token;

    @JsonCreator
    public ClientRegistrationDeleteApiRequestBody(
            @JsonProperty("clientId") @Nonnull String clientId,
            @JsonProperty("token") @Nonnull String token) {
        this.clientId = Optional.ofNullable(clientId)
            .orElseThrow(() -> new IllegalArgumentException("clientId cannot be null"));
        this.token = Optional.ofNullable(token)
            .orElseThrow(() -> new IllegalArgumentException("token cannot be null"));
    }

    /**
     * Client ID.
     */
    public String clientId() {
        return this.clientId;
    }

    /**
     * Client registration access token.
     */
    public String token() {
        return this.token;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Client ID.
     */
    public ClientRegistrationDeleteApiRequestBody withClientId(@Nonnull String clientId) {
        this.clientId = Utils.checkNotNull(clientId, "clientId");
        return this;
    }


    /**
     * Client registration access token.
     */
    public ClientRegistrationDeleteApiRequestBody withToken(@Nonnull String token) {
        this.token = Utils.checkNotNull(token, "token");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClientRegistrationDeleteApiRequestBody other = (ClientRegistrationDeleteApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.token, other.token);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            clientId, token);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ClientRegistrationDeleteApiRequestBody.class,
                "clientId", clientId,
                "token", token);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String clientId;

        private String token;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * Client ID.
         */
        public Builder clientId(@Nonnull String clientId) {
            this.clientId = Utils.checkNotNull(clientId, "clientId");
            return this;
        }

        /**
         * Client registration access token.
         */
        public Builder token(@Nonnull String token) {
            this.token = Utils.checkNotNull(token, "token");
            return this;
        }

        public ClientRegistrationDeleteApiRequestBody build() {
            return new ClientRegistrationDeleteApiRequestBody(
                clientId, token);
        }

    }
}
