/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthUserinfoApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private AuthUserinfoApiAction action;

    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private List<String> claims;

    /**
     * The ID of the client application which is associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias when the authorization request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * The flag which indicates whether the client ID alias was used when the authorization
     * request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
     * header on errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The scopes covered by the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The subject (= resource owner's ID).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The access token that came along with the userinfo request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private String token;

    /**
     * The extra properties associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthUserinfoApiProperty> properties;

    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userInfoClaims")
    private String userInfoClaims;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<AuthUserinfoApiServiceAttribute> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<AuthUserinfoApiClientAttribute> clientAttributes;

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consentedClaims")
    private List<String> consentedClaims;

    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedClaimsForTx")
    private List<String> requestedClaimsForTx;

    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedVerifiedClaimsForTx")
    private List<List<String>> requestedVerifiedClaimsForTx;

    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transformedClaims")
    private String transformedClaims;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpopNonce")
    private String dpopNonce;

    @JsonCreator
    public AuthUserinfoApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable AuthUserinfoApiAction action,
            @JsonProperty("claims") @Nullable List<String> claims,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("token") @Nullable String token,
            @JsonProperty("properties") @Nullable List<AuthUserinfoApiProperty> properties,
            @JsonProperty("userInfoClaims") @Nullable String userInfoClaims,
            @JsonProperty("serviceAttributes") @Nullable List<AuthUserinfoApiServiceAttribute> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<AuthUserinfoApiClientAttribute> clientAttributes,
            @JsonProperty("consentedClaims") @Nullable List<String> consentedClaims,
            @JsonProperty("requestedClaimsForTx") @Nullable List<String> requestedClaimsForTx,
            @JsonProperty("requestedVerifiedClaimsForTx") @Nullable List<List<String>> requestedVerifiedClaimsForTx,
            @JsonProperty("transformedClaims") @Nullable String transformedClaims,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed,
            @JsonProperty("dpopNonce") @Nullable String dpopNonce) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.claims = claims;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.responseContent = responseContent;
        this.scopes = scopes;
        this.subject = subject;
        this.token = token;
        this.properties = properties;
        this.userInfoClaims = userInfoClaims;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.consentedClaims = consentedClaims;
        this.requestedClaimsForTx = requestedClaimsForTx;
        this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
        this.transformedClaims = transformedClaims;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
        this.dpopNonce = dpopNonce;
    }
    
    public AuthUserinfoApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<AuthUserinfoApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     */
    public Optional<List<String>> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * The ID of the client application which is associated with the access token.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias when the authorization request for the access token was made.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * The flag which indicates whether the client ID alias was used when the authorization
     * request for the access token was made.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
     * header on errors.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The scopes covered by the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The subject (= resource owner's ID).
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The access token that came along with the userinfo request.
     */
    public Optional<String> token() {
        return Optional.ofNullable(this.token);
    }

    /**
     * The extra properties associated with the access token.
     */
    public Optional<List<AuthUserinfoApiProperty>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    public Optional<String> userInfoClaims() {
        return Optional.ofNullable(this.userInfoClaims);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<AuthUserinfoApiServiceAttribute>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<AuthUserinfoApiClientAttribute>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public Optional<List<String>> consentedClaims() {
        return Optional.ofNullable(this.consentedClaims);
    }

    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    public Optional<List<String>> requestedClaimsForTx() {
        return Optional.ofNullable(this.requestedClaimsForTx);
    }

    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    public Optional<List<List<String>>> requestedVerifiedClaimsForTx() {
        return Optional.ofNullable(this.requestedVerifiedClaimsForTx);
    }

    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    public Optional<String> transformedClaims() {
        return Optional.ofNullable(this.transformedClaims);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public Optional<String> dpopNonce() {
        return Optional.ofNullable(this.dpopNonce);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public AuthUserinfoApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public AuthUserinfoApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public AuthUserinfoApiResponseBody withAction(@Nullable AuthUserinfoApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The list of claims that the client application requests to be embedded in the ID token.
     */
    public AuthUserinfoApiResponseBody withClaims(@Nullable List<String> claims) {
        this.claims = claims;
        return this;
    }


    /**
     * The ID of the client application which is associated with the access token.
     */
    public AuthUserinfoApiResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias when the authorization request for the access token was made.
     */
    public AuthUserinfoApiResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * The flag which indicates whether the client ID alias was used when the authorization
     * request for the access token was made.
     */
    public AuthUserinfoApiResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
     * header on errors.
     */
    public AuthUserinfoApiResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The scopes covered by the access token.
     */
    public AuthUserinfoApiResponseBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The subject (= resource owner's ID).
     */
    public AuthUserinfoApiResponseBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The access token that came along with the userinfo request.
     */
    public AuthUserinfoApiResponseBody withToken(@Nullable String token) {
        this.token = token;
        return this;
    }


    /**
     * The extra properties associated with the access token.
     */
    public AuthUserinfoApiResponseBody withProperties(@Nullable List<AuthUserinfoApiProperty> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.
     * 
     * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
     * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
     * In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
     * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
     * 
     * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
     * 
     * <p>```json
     * {
     *   "userinfo":
     *   {
     *     "given_name": { "essential": true },
     *     "nickname": null,
     *     "email": { "essential": true },
     *     "email_verified": { "essential": true },
     *     "picture": null,
     *     "http://example.info/claims/groups": null
     *   },
     *   "id_token":
     *   {
     *     "auth_time": { "essential": true },
     *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
     *   }
     * }
     * ````
     * 
     * <p>The value of this property is the value of the `userinfo` property in JSON format.
     * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
     * 
     * <p>```json
     * {
     *   "given_name": { "essential": true },
     *   "nickname": null,
     *   "email": { "essential": true },
     *   "email_verified": { "essential": true },
     *   "picture": null,
     *   "http://example.info/claims/groups": null
     * }
     * ```
     * 
     * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
     * the value of this property holds the former value.
     */
    public AuthUserinfoApiResponseBody withUserInfoClaims(@Nullable String userInfoClaims) {
        this.userInfoClaims = userInfoClaims;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public AuthUserinfoApiResponseBody withServiceAttributes(@Nullable List<AuthUserinfoApiServiceAttribute> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public AuthUserinfoApiResponseBody withClientAttributes(@Nullable List<AuthUserinfoApiClientAttribute> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public AuthUserinfoApiResponseBody withConsentedClaims(@Nullable List<String> consentedClaims) {
        this.consentedClaims = consentedClaims;
        return this;
    }


    /**
     * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
     * claims"&lt;/i&gt;.
     * 
     * <p>&lt;p&gt;
     * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
     * names of transformed claims in the `claims` request parameter.
     * The following is an example of the `claims` request parameter
     * that requests a predefined transformed claim named `18_or_over`
     * and a transformed claim named `nationality_usa` to be embedded
     * in the response from the userinfo endpoint.
     * &lt;/p&gt;
     * 
     * <p>```json
     * {
     *   "transformed_claims": {
     *     "nationality_usa": {
     *       "claim": "nationalities",
     *       "fn": [
     *         [ "eq", "USA" ],
     *         "any"
     *       ]
     *     }
     *   },
     *   "userinfo": {
     *     "::18_or_over": null,
     *     ":nationality_usa": null
     *   }
     * }
     * ```
     * 
     * <p>The example above assumes that a transformed claim named `18_or_over`
     * is predefined by the authorization server like below.
     * 
     * <p>```json
     * {
     *   "18_or_over": {
     *     "claim": "birthdate",
     *     "fn": [
     *       "years_ago",
     *       [ "gte", 18 ]
     *     ]
     *   }
     * }
     * ```
     * 
     * <p>In the example, the `nationalities` claim is requested indirectly
     * by the `nationality_usa` transformed claim. Likewise, the
     * `birthdate` claim is requested indirectly by the `18_or_over`
     * transformed claim.
     * 
     * <p>When the `claims` request parameter of an authorization request is
     * like the example above, this `requestedClaimsForTx` property will
     * hold the following value.
     * 
     * <p>```json
     * [ "birthdate", "nationalities" ]
     * ```
     * 
     * <p>It is expected that the authorization server implementation prepares values
     * of the listed claims and passes them as the value of the `claimsForTx`
     * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
     * is an example of the value of the `claimsForTx` request parameter.
     * 
     * <p>```json
     * {
     *   "birthdate": "1970-01-23",
     *   "nationalities": [ "DEU", "USA" ]
     * }
     * ```
     */
    public AuthUserinfoApiResponseBody withRequestedClaimsForTx(@Nullable List<String> requestedClaimsForTx) {
        this.requestedClaimsForTx = requestedClaimsForTx;
        return this;
    }


    /**
     * Names of verified claims that will be referenced when transformed claims are computed.
     */
    public AuthUserinfoApiResponseBody withRequestedVerifiedClaimsForTx(@Nullable List<List<String>> requestedVerifiedClaimsForTx) {
        this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
        return this;
    }


    /**
     * the value of the `transformed_claims` property in the `claims` request
     * parameter of an authorization request or in the `claims` property in a
     * request object.
     */
    public AuthUserinfoApiResponseBody withTransformedClaims(@Nullable String transformedClaims) {
        this.transformedClaims = transformedClaims;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public AuthUserinfoApiResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthUserinfoApiResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    /**
     * The expected nonce value for DPoP proof JWT, which should be used
     * as the value of the `DPoP-Nonce` HTTP header.
     */
    public AuthUserinfoApiResponseBody withDpopNonce(@Nullable String dpopNonce) {
        this.dpopNonce = dpopNonce;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthUserinfoApiResponseBody other = (AuthUserinfoApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.token, other.token) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.userInfoClaims, other.userInfoClaims) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.consentedClaims, other.consentedClaims) &&
            Utils.enhancedDeepEquals(this.requestedClaimsForTx, other.requestedClaimsForTx) &&
            Utils.enhancedDeepEquals(this.requestedVerifiedClaimsForTx, other.requestedVerifiedClaimsForTx) &&
            Utils.enhancedDeepEquals(this.transformedClaims, other.transformedClaims) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed) &&
            Utils.enhancedDeepEquals(this.dpopNonce, other.dpopNonce);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            claims, clientId, clientIdAlias,
            clientIdAliasUsed, responseContent, scopes,
            subject, token, properties,
            userInfoClaims, serviceAttributes, clientAttributes,
            consentedClaims, requestedClaimsForTx, requestedVerifiedClaimsForTx,
            transformedClaims, clientEntityId, clientEntityIdUsed,
            dpopNonce);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthUserinfoApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "claims", claims,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "responseContent", responseContent,
                "scopes", scopes,
                "subject", subject,
                "token", token,
                "properties", properties,
                "userInfoClaims", userInfoClaims,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "consentedClaims", consentedClaims,
                "requestedClaimsForTx", requestedClaimsForTx,
                "requestedVerifiedClaimsForTx", requestedVerifiedClaimsForTx,
                "transformedClaims", transformedClaims,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed,
                "dpopNonce", dpopNonce);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private AuthUserinfoApiAction action;

        private List<String> claims;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String responseContent;

        private List<String> scopes;

        private String subject;

        private String token;

        private List<AuthUserinfoApiProperty> properties;

        private String userInfoClaims;

        private List<AuthUserinfoApiServiceAttribute> serviceAttributes;

        private List<AuthUserinfoApiClientAttribute> clientAttributes;

        private List<String> consentedClaims;

        private List<String> requestedClaimsForTx;

        private List<List<String>> requestedVerifiedClaimsForTx;

        private String transformedClaims;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private String dpopNonce;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable AuthUserinfoApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The list of claims that the client application requests to be embedded in the ID token.
         */
        public Builder claims(@Nullable List<String> claims) {
            this.claims = claims;
            return this;
        }

        /**
         * The ID of the client application which is associated with the access token.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias when the authorization request for the access token was made.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * The flag which indicates whether the client ID alias was used when the authorization
         * request for the access token was made.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The content that the authorization server implementation can use as the value of `WWW-Authenticate`
         * header on errors.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The scopes covered by the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The subject (= resource owner's ID).
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The access token that came along with the userinfo request.
         */
        public Builder token(@Nullable String token) {
            this.token = token;
            return this;
        }

        /**
         * The extra properties associated with the access token.
         */
        public Builder properties(@Nullable List<AuthUserinfoApiProperty> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * The value of the `userinfo` property in the `claims` request parameter or in the `claims` property in an authorization request object.
         * 
         * <p>A client application may request certain claims be embedded in an ID token or in a response from the userInfo endpoint.
         * There are several ways. Including the `claims` request parameter and including the `claims` property in a request object are such examples.
         * In both cases, the value of the `claims` parameter/property is JSON. Its format is described in [5.5. Requesting Claims using the "claims"
         * Request Parameter](https://openid.net/specs/openid-connect-core-1_0.html#ClaimsParameter).
         * 
         * <p>The following is an excerpt from the specification. You can find `userinfo` and `id_token` are top-level properties.
         * 
         * <p>```json
         * {
         *   "userinfo":
         *   {
         *     "given_name": { "essential": true },
         *     "nickname": null,
         *     "email": { "essential": true },
         *     "email_verified": { "essential": true },
         *     "picture": null,
         *     "http://example.info/claims/groups": null
         *   },
         *   "id_token":
         *   {
         *     "auth_time": { "essential": true },
         *     "acr": { "values": [ "urn:mace:incommon:iap:silver" ] }
         *   }
         * }
         * ````
         * 
         * <p>The value of this property is the value of the `userinfo` property in JSON format.
         * For example, if the JSON above is included in an authorization request, this property holds JSON equivalent to the following.
         * 
         * <p>```json
         * {
         *   "given_name": { "essential": true },
         *   "nickname": null,
         *   "email": { "essential": true },
         *   "email_verified": { "essential": true },
         *   "picture": null,
         *   "http://example.info/claims/groups": null
         * }
         * ```
         * 
         * <p>Note that if a request object is given and it contains the `claims` property and if the `claims` request parameter is also given,
         * the value of this property holds the former value.
         */
        public Builder userInfoClaims(@Nullable String userInfoClaims) {
            this.userInfoClaims = userInfoClaims;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<AuthUserinfoApiServiceAttribute> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<AuthUserinfoApiClientAttribute> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * the claims that the user has consented for the client application
         * to know.
         */
        public Builder consentedClaims(@Nullable List<String> consentedClaims) {
            this.consentedClaims = consentedClaims;
            return this;
        }

        /**
         * Get names of claims that are requested indirectly by &lt;i&gt;"transformed
         * claims"&lt;/i&gt;.
         * 
         * <p>&lt;p&gt;
         * A client application can request &lt;i&gt;"transformed claims"&lt;/i&gt; by adding
         * names of transformed claims in the `claims` request parameter.
         * The following is an example of the `claims` request parameter
         * that requests a predefined transformed claim named `18_or_over`
         * and a transformed claim named `nationality_usa` to be embedded
         * in the response from the userinfo endpoint.
         * &lt;/p&gt;
         * 
         * <p>```json
         * {
         *   "transformed_claims": {
         *     "nationality_usa": {
         *       "claim": "nationalities",
         *       "fn": [
         *         [ "eq", "USA" ],
         *         "any"
         *       ]
         *     }
         *   },
         *   "userinfo": {
         *     "::18_or_over": null,
         *     ":nationality_usa": null
         *   }
         * }
         * ```
         * 
         * <p>The example above assumes that a transformed claim named `18_or_over`
         * is predefined by the authorization server like below.
         * 
         * <p>```json
         * {
         *   "18_or_over": {
         *     "claim": "birthdate",
         *     "fn": [
         *       "years_ago",
         *       [ "gte", 18 ]
         *     ]
         *   }
         * }
         * ```
         * 
         * <p>In the example, the `nationalities` claim is requested indirectly
         * by the `nationality_usa` transformed claim. Likewise, the
         * `birthdate` claim is requested indirectly by the `18_or_over`
         * transformed claim.
         * 
         * <p>When the `claims` request parameter of an authorization request is
         * like the example above, this `requestedClaimsForTx` property will
         * hold the following value.
         * 
         * <p>```json
         * [ "birthdate", "nationalities" ]
         * ```
         * 
         * <p>It is expected that the authorization server implementation prepares values
         * of the listed claims and passes them as the value of the `claimsForTx`
         * request parameter when it calls the `/api/auth/userinfo/issue` API. The following
         * is an example of the value of the `claimsForTx` request parameter.
         * 
         * <p>```json
         * {
         *   "birthdate": "1970-01-23",
         *   "nationalities": [ "DEU", "USA" ]
         * }
         * ```
         */
        public Builder requestedClaimsForTx(@Nullable List<String> requestedClaimsForTx) {
            this.requestedClaimsForTx = requestedClaimsForTx;
            return this;
        }

        /**
         * Names of verified claims that will be referenced when transformed claims are computed.
         */
        public Builder requestedVerifiedClaimsForTx(@Nullable List<List<String>> requestedVerifiedClaimsForTx) {
            this.requestedVerifiedClaimsForTx = requestedVerifiedClaimsForTx;
            return this;
        }

        /**
         * the value of the `transformed_claims` property in the `claims` request
         * parameter of an authorization request or in the `claims` property in a
         * request object.
         */
        public Builder transformedClaims(@Nullable String transformedClaims) {
            this.transformedClaims = transformedClaims;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        /**
         * The expected nonce value for DPoP proof JWT, which should be used
         * as the value of the `DPoP-Nonce` HTTP header.
         */
        public Builder dpopNonce(@Nullable String dpopNonce) {
            this.dpopNonce = dpopNonce;
            return this;
        }

        public AuthUserinfoApiResponseBody build() {
            return new AuthUserinfoApiResponseBody(
                resultCode, resultMessage, action,
                claims, clientId, clientIdAlias,
                clientIdAliasUsed, responseContent, scopes,
                subject, token, properties,
                userInfoClaims, serviceAttributes, clientAttributes,
                consentedClaims, requestedClaimsForTx, requestedVerifiedClaimsForTx,
                transformedClaims, clientEntityId, clientEntityIdUsed,
                dpopNonce);
        }

    }
}
