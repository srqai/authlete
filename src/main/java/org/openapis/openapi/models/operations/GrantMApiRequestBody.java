/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class GrantMApiRequestBody {
    /**
     * An access token to introspect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * A string array listing names of scopes which the caller (= a protected resource endpoint of the
     * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
     * the format of `scopes` is a space-separated list of scope names.
     * 
     * <p>If this parameter is a non-empty array and if it contains a scope which is not covered by the
     * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * A subject (= a user account managed by the service) whom the caller (= a protected resource
     * endpoint of the service) requires.
     * 
     * <p>If this parameter is not `null` and if the value does not match the subject who is associated
     * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * Client certificate in PEM format, used to validate binding against access tokens using the TLS
     * client certificate confirmation method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificate")
    private String clientCertificate;

    /**
     * `DPoP` header presented by the client during the request to the resource server.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private
     * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
     * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpop")
    private String dpop;

    /**
     * HTTP method of the request from the client to the protected resource endpoint. This field is
     * used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htm")
    private String htm;

    /**
     * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htu")
    private String htu;

    /**
     * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmAction")
    private GmAction gmAction;

    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;

    @JsonCreator
    public GrantMApiRequestBody(
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("clientCertificate") @Nullable String clientCertificate,
            @JsonProperty("dpop") @Nullable String dpop,
            @JsonProperty("htm") @Nullable String htm,
            @JsonProperty("htu") @Nullable String htu,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("gmAction") @Nullable GmAction gmAction,
            @JsonProperty("grantId") @Nullable String grantId) {
        this.accessToken = accessToken;
        this.scopes = scopes;
        this.subject = subject;
        this.clientCertificate = clientCertificate;
        this.dpop = dpop;
        this.htm = htm;
        this.htu = htu;
        this.resources = resources;
        this.gmAction = gmAction;
        this.grantId = grantId;
    }
    
    public GrantMApiRequestBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null);
    }

    /**
     * An access token to introspect.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * A string array listing names of scopes which the caller (= a protected resource endpoint of the
     * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
     * the format of `scopes` is a space-separated list of scope names.
     * 
     * <p>If this parameter is a non-empty array and if it contains a scope which is not covered by the
     * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * A subject (= a user account managed by the service) whom the caller (= a protected resource
     * endpoint of the service) requires.
     * 
     * <p>If this parameter is not `null` and if the value does not match the subject who is associated
     * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * Client certificate in PEM format, used to validate binding against access tokens using the TLS
     * client certificate confirmation method.
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * `DPoP` header presented by the client during the request to the resource server.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private
     * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
     * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
     */
    public Optional<String> dpop() {
        return Optional.ofNullable(this.dpop);
    }

    /**
     * HTTP method of the request from the client to the protected resource endpoint. This field is
     * used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> htm() {
        return Optional.ofNullable(this.htm);
    }

    /**
     * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> htu() {
        return Optional.ofNullable(this.htu);
    }

    /**
     * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public Optional<GmAction> gmAction() {
        return Optional.ofNullable(this.gmAction);
    }

    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An access token to introspect.
     */
    public GrantMApiRequestBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * A string array listing names of scopes which the caller (= a protected resource endpoint of the
     * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
     * the format of `scopes` is a space-separated list of scope names.
     * 
     * <p>If this parameter is a non-empty array and if it contains a scope which is not covered by the
     * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
     */
    public GrantMApiRequestBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * A subject (= a user account managed by the service) whom the caller (= a protected resource
     * endpoint of the service) requires.
     * 
     * <p>If this parameter is not `null` and if the value does not match the subject who is associated
     * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
     */
    public GrantMApiRequestBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * Client certificate in PEM format, used to validate binding against access tokens using the TLS
     * client certificate confirmation method.
     */
    public GrantMApiRequestBody withClientCertificate(@Nullable String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }


    /**
     * `DPoP` header presented by the client during the request to the resource server.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private
     * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
     * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
     */
    public GrantMApiRequestBody withDpop(@Nullable String dpop) {
        this.dpop = dpop;
        return this;
    }


    /**
     * HTTP method of the request from the client to the protected resource endpoint. This field is
     * used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public GrantMApiRequestBody withHtm(@Nullable String htm) {
        this.htm = htm;
        return this;
    }


    /**
     * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public GrantMApiRequestBody withHtu(@Nullable String htu) {
        this.htu = htu;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
     */
    public GrantMApiRequestBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public GrantMApiRequestBody withGmAction(@Nullable GmAction gmAction) {
        this.gmAction = gmAction;
        return this;
    }


    /**
     * The value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public GrantMApiRequestBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GrantMApiRequestBody other = (GrantMApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.clientCertificate, other.clientCertificate) &&
            Utils.enhancedDeepEquals(this.dpop, other.dpop) &&
            Utils.enhancedDeepEquals(this.htm, other.htm) &&
            Utils.enhancedDeepEquals(this.htu, other.htu) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.gmAction, other.gmAction) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessToken, scopes, subject,
            clientCertificate, dpop, htm,
            htu, resources, gmAction,
            grantId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GrantMApiRequestBody.class,
                "accessToken", accessToken,
                "scopes", scopes,
                "subject", subject,
                "clientCertificate", clientCertificate,
                "dpop", dpop,
                "htm", htm,
                "htu", htu,
                "resources", resources,
                "gmAction", gmAction,
                "grantId", grantId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessToken;

        private List<String> scopes;

        private String subject;

        private String clientCertificate;

        private String dpop;

        private String htm;

        private String htu;

        private List<String> resources;

        private GmAction gmAction;

        private String grantId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * An access token to introspect.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * A string array listing names of scopes which the caller (= a protected resource endpoint of the
         * service) requires. When the content type of the request from the service is `application/x-www-form-urlencoded`,
         * the format of `scopes` is a space-separated list of scope names.
         * 
         * <p>If this parameter is a non-empty array and if it contains a scope which is not covered by the
         * access token,`action=FORBIDDEN` with `error=insufficient_scope` is returned from Authlete.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * A subject (= a user account managed by the service) whom the caller (= a protected resource
         * endpoint of the service) requires.
         * 
         * <p>If this parameter is not `null` and if the value does not match the subject who is associated
         * with the access token, `action=FORBIDDEN` with `error=invalid_request` is returned from Authlete.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * Client certificate in PEM format, used to validate binding against access tokens using the TLS
         * client certificate confirmation method.
         */
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * `DPoP` header presented by the client during the request to the resource server.
         * 
         * <p>The header contains a signed JWT which includes the public key that is paired with the private
         * key used to sign the JWT. See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application
         * Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop) for details.
         */
        public Builder dpop(@Nullable String dpop) {
            this.dpop = dpop;
            return this;
        }

        /**
         * HTTP method of the request from the client to the protected resource endpoint. This field is
         * used to validate the `DPoP` header.
         * 
         * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder htm(@Nullable String htm) {
            this.htm = htm;
            return this;
        }

        /**
         * URL of the protected resource endpoint. This field is used to validate the `DPoP` header.
         * 
         * <p>See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder htu(@Nullable String htu) {
            this.htu = htu;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters in the token request. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The grant management action of the device authorization request.
         * 
         * <p>The `grant_management_action` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
         */
        public Builder gmAction(@Nullable GmAction gmAction) {
            this.gmAction = gmAction;
            return this;
        }

        /**
         * The value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        public GrantMApiRequestBody build() {
            return new GrantMApiRequestBody(
                accessToken, scopes, subject,
                clientCertificate, dpop, htm,
                htu, resources, gmAction,
                grantId);
        }

    }
}
