/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class InfoApiResponseBody {
    /**
     * The server version.
     */
    @JsonProperty("version")
    private String version;

    /**
     * the features that the server supports.
     */
    @JsonProperty("features")
    private List<String> features;

    @JsonCreator
    public InfoApiResponseBody(
            @JsonProperty("version") @Nonnull String version,
            @JsonProperty("features") @Nonnull List<String> features) {
        this.version = Optional.ofNullable(version)
            .orElseThrow(() -> new IllegalArgumentException("version cannot be null"));
        this.features = Optional.ofNullable(features)
            .orElseThrow(() -> new IllegalArgumentException("features cannot be null"));
    }

    /**
     * The server version.
     */
    public String version() {
        return this.version;
    }

    /**
     * the features that the server supports.
     */
    public List<String> features() {
        return this.features;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The server version.
     */
    public InfoApiResponseBody withVersion(@Nonnull String version) {
        this.version = Utils.checkNotNull(version, "version");
        return this;
    }


    /**
     * the features that the server supports.
     */
    public InfoApiResponseBody withFeatures(@Nonnull List<String> features) {
        this.features = Utils.checkNotNull(features, "features");
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InfoApiResponseBody other = (InfoApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.version, other.version) &&
            Utils.enhancedDeepEquals(this.features, other.features);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            version, features);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InfoApiResponseBody.class,
                "version", version,
                "features", features);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String version;

        private List<String> features;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The server version.
         */
        public Builder version(@Nonnull String version) {
            this.version = Utils.checkNotNull(version, "version");
            return this;
        }

        /**
         * the features that the server supports.
         */
        public Builder features(@Nonnull List<String> features) {
            this.features = Utils.checkNotNull(features, "features");
            return this;
        }

        public InfoApiResponseBody build() {
            return new InfoApiResponseBody(
                version, features);
        }

    }
}
