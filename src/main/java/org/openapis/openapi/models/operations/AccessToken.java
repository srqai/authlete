/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AccessToken {
    /**
     * The hash of the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenHash")
    private String accessTokenHash;

    /**
     * The timestamp at which the access token will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenExpiresAt")
    private Long accessTokenExpiresAt;

    /**
     * The hash of the refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenHash")
    private String refreshTokenHash;

    /**
     * The timestamp at which the refresh token will expire.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenExpiresAt")
    private Long refreshTokenExpiresAt;

    /**
     * The timestamp at which the access token was first created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("createdAt")
    private Long createdAt;

    /**
     * The timestamp at which the access token was last refreshed using the refresh token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastRefreshedAt")
    private Long lastRefreshedAt;

    /**
     * The ID of the client associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The subject (= unique user ID) associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantType")
    private AuthTokenGetListApiGrantType grantType;

    /**
     * The scopes associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The properties associated with the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthTokenGetListApiProperty> properties;

    @JsonCreator
    public AccessToken(
            @JsonProperty("accessTokenHash") @Nullable String accessTokenHash,
            @JsonProperty("accessTokenExpiresAt") @Nullable Long accessTokenExpiresAt,
            @JsonProperty("refreshTokenHash") @Nullable String refreshTokenHash,
            @JsonProperty("refreshTokenExpiresAt") @Nullable Long refreshTokenExpiresAt,
            @JsonProperty("createdAt") @Nullable Long createdAt,
            @JsonProperty("lastRefreshedAt") @Nullable Long lastRefreshedAt,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("grantType") @Nullable AuthTokenGetListApiGrantType grantType,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("properties") @Nullable List<AuthTokenGetListApiProperty> properties) {
        this.accessTokenHash = accessTokenHash;
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        this.refreshTokenHash = refreshTokenHash;
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        this.createdAt = createdAt;
        this.lastRefreshedAt = lastRefreshedAt;
        this.clientId = clientId;
        this.subject = subject;
        this.grantType = grantType;
        this.scopes = scopes;
        this.properties = properties;
    }
    
    public AccessToken() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The hash of the access token.
     */
    public Optional<String> accessTokenHash() {
        return Optional.ofNullable(this.accessTokenHash);
    }

    /**
     * The timestamp at which the access token will expire.
     */
    public Optional<Long> accessTokenExpiresAt() {
        return Optional.ofNullable(this.accessTokenExpiresAt);
    }

    /**
     * The hash of the refresh token.
     */
    public Optional<String> refreshTokenHash() {
        return Optional.ofNullable(this.refreshTokenHash);
    }

    /**
     * The timestamp at which the refresh token will expire.
     */
    public Optional<Long> refreshTokenExpiresAt() {
        return Optional.ofNullable(this.refreshTokenExpiresAt);
    }

    /**
     * The timestamp at which the access token was first created.
     */
    public Optional<Long> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * The timestamp at which the access token was last refreshed using the refresh token.
     */
    public Optional<Long> lastRefreshedAt() {
        return Optional.ofNullable(this.lastRefreshedAt);
    }

    /**
     * The ID of the client associated with the access token.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The subject (= unique user ID) associated with the access token.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public Optional<AuthTokenGetListApiGrantType> grantType() {
        return Optional.ofNullable(this.grantType);
    }

    /**
     * The scopes associated with the access token.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The properties associated with the access token.
     */
    public Optional<List<AuthTokenGetListApiProperty>> properties() {
        return Optional.ofNullable(this.properties);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The hash of the access token.
     */
    public AccessToken withAccessTokenHash(@Nullable String accessTokenHash) {
        this.accessTokenHash = accessTokenHash;
        return this;
    }


    /**
     * The timestamp at which the access token will expire.
     */
    public AccessToken withAccessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
        this.accessTokenExpiresAt = accessTokenExpiresAt;
        return this;
    }


    /**
     * The hash of the refresh token.
     */
    public AccessToken withRefreshTokenHash(@Nullable String refreshTokenHash) {
        this.refreshTokenHash = refreshTokenHash;
        return this;
    }


    /**
     * The timestamp at which the refresh token will expire.
     */
    public AccessToken withRefreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
        this.refreshTokenExpiresAt = refreshTokenExpiresAt;
        return this;
    }


    /**
     * The timestamp at which the access token was first created.
     */
    public AccessToken withCreatedAt(@Nullable Long createdAt) {
        this.createdAt = createdAt;
        return this;
    }


    /**
     * The timestamp at which the access token was last refreshed using the refresh token.
     */
    public AccessToken withLastRefreshedAt(@Nullable Long lastRefreshedAt) {
        this.lastRefreshedAt = lastRefreshedAt;
        return this;
    }


    /**
     * The ID of the client associated with the access token.
     */
    public AccessToken withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The subject (= unique user ID) associated with the access token.
     */
    public AccessToken withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AccessToken withGrantType(@Nullable AuthTokenGetListApiGrantType grantType) {
        this.grantType = grantType;
        return this;
    }


    /**
     * The scopes associated with the access token.
     */
    public AccessToken withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The properties associated with the access token.
     */
    public AccessToken withProperties(@Nullable List<AuthTokenGetListApiProperty> properties) {
        this.properties = properties;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccessToken other = (AccessToken) o;
        return 
            Utils.enhancedDeepEquals(this.accessTokenHash, other.accessTokenHash) &&
            Utils.enhancedDeepEquals(this.accessTokenExpiresAt, other.accessTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.refreshTokenHash, other.refreshTokenHash) &&
            Utils.enhancedDeepEquals(this.refreshTokenExpiresAt, other.refreshTokenExpiresAt) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.lastRefreshedAt, other.lastRefreshedAt) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.properties, other.properties);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accessTokenHash, accessTokenExpiresAt, refreshTokenHash,
            refreshTokenExpiresAt, createdAt, lastRefreshedAt,
            clientId, subject, grantType,
            scopes, properties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccessToken.class,
                "accessTokenHash", accessTokenHash,
                "accessTokenExpiresAt", accessTokenExpiresAt,
                "refreshTokenHash", refreshTokenHash,
                "refreshTokenExpiresAt", refreshTokenExpiresAt,
                "createdAt", createdAt,
                "lastRefreshedAt", lastRefreshedAt,
                "clientId", clientId,
                "subject", subject,
                "grantType", grantType,
                "scopes", scopes,
                "properties", properties);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String accessTokenHash;

        private Long accessTokenExpiresAt;

        private String refreshTokenHash;

        private Long refreshTokenExpiresAt;

        private Long createdAt;

        private Long lastRefreshedAt;

        private Long clientId;

        private String subject;

        private AuthTokenGetListApiGrantType grantType;

        private List<String> scopes;

        private List<AuthTokenGetListApiProperty> properties;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The hash of the access token.
         */
        public Builder accessTokenHash(@Nullable String accessTokenHash) {
            this.accessTokenHash = accessTokenHash;
            return this;
        }

        /**
         * The timestamp at which the access token will expire.
         */
        public Builder accessTokenExpiresAt(@Nullable Long accessTokenExpiresAt) {
            this.accessTokenExpiresAt = accessTokenExpiresAt;
            return this;
        }

        /**
         * The hash of the refresh token.
         */
        public Builder refreshTokenHash(@Nullable String refreshTokenHash) {
            this.refreshTokenHash = refreshTokenHash;
            return this;
        }

        /**
         * The timestamp at which the refresh token will expire.
         */
        public Builder refreshTokenExpiresAt(@Nullable Long refreshTokenExpiresAt) {
            this.refreshTokenExpiresAt = refreshTokenExpiresAt;
            return this;
        }

        /**
         * The timestamp at which the access token was first created.
         */
        public Builder createdAt(@Nullable Long createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * The timestamp at which the access token was last refreshed using the refresh token.
         */
        public Builder lastRefreshedAt(@Nullable Long lastRefreshedAt) {
            this.lastRefreshedAt = lastRefreshedAt;
            return this;
        }

        /**
         * The ID of the client associated with the access token.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The subject (= unique user ID) associated with the access token.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder grantType(@Nullable AuthTokenGetListApiGrantType grantType) {
            this.grantType = grantType;
            return this;
        }

        /**
         * The scopes associated with the access token.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The properties associated with the access token.
         */
        public Builder properties(@Nullable List<AuthTokenGetListApiProperty> properties) {
            this.properties = properties;
            return this;
        }

        public AccessToken build() {
            return new AccessToken(
                accessTokenHash, accessTokenExpiresAt, refreshTokenHash,
                refreshTokenExpiresAt, createdAt, lastRefreshedAt,
                clientId, subject, grantType,
                scopes, properties);
        }

    }
}
