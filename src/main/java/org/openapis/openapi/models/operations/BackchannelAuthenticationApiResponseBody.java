/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class BackchannelAuthenticationApiResponseBody {
    /**
     * The code which represents the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultCode")
    private String resultCode;

    /**
     * A short message which explains the result of the API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resultMessage")
    private String resultMessage;

    /**
     * The next action that the authorization server implementation should take.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("action")
    private BackchannelAuthenticationApiAction action;

    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responseContent")
    private String responseContent;

    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private Long clientId;

    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAlias")
    private String clientIdAlias;

    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientName")
    private String clientName;

    /**
     * The scopes requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `scope` request parameter in the backchannel
     * authentication request. However, because unregistered scopes are dropped on Authlete side,
     * if the `scope` request parameter contains unknown scopes, the list returned by this
     * property becomes different from the value of the `scope` request parameter.
     * 
     * <p>Note that `description` property and `descriptions` property of each `scope` object
     * in the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<BackchannelAuthenticationApiScope> scopes;

    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claimNames")
    private List<String> claimNames;

    /**
     * The client notification token included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientNotificationToken")
    private String clientNotificationToken;

    /**
     * The list of ACR values requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `acr_values` request parameter in the
     * backchannel authentication request. However, because unsupported ACR values are dropped
     * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
     * the list returned by this property becomes different from the value of the `acr_values`
     * request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acrs")
    private List<String> acrs;

    /**
     * The type of the hint for end-user identification which was included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hintType")
    private String hintType;

    /**
     * The value of the hint for end-user identification.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hint")
    private String hint;

    /**
     * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub")
    private String sub;

    /**
     * The binding message included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bindingMessage")
    private String bindingMessage;

    /**
     * The binding message included in the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userCode")
    private String userCode;

    /**
     * The flag which indicates whether a user code is required.
     * 
     * <p>`true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
     * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
     * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
     * are `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userCodeRequired")
    private Boolean userCodeRequired;

    /**
     * The requested expiry for the authentication request ID (`auth_req_id`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestedExpiry")
    private Integer requestedExpiry;

    /**
     * The request context of the backchannel authentication request.
     * 
     * <p>It is the value of the request_context claim in the signed authentication request and
     * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestContext")
    private String requestContext;

    /**
     * The warnings raised during processing the backchannel authentication request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("warnings")
    private List<String> warnings;

    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ticket")
    private String ticket;

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private BackchannelAuthenticationApiAuthorizationDetails authorizationDetails;

    /**
     * The attributes of this service that the client application belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("serviceAttributes")
    private List<BackchannelAuthenticationApiServiceAttribute> serviceAttributes;

    /**
     * The attributes of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAttributes")
    private List<BackchannelAuthenticationApiClientAttribute> clientAttributes;

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dynamicScopes")
    private List<BackchannelAuthenticationApiDynamicScope> dynamicScopes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deliveryMode")
    private BackchannelAuthenticationApiDeliveryMode deliveryMode;

    /**
     * The client authentication method that was performed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientAuthMethod")
    private String clientAuthMethod;

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gmAction")
    private BackchannelAuthenticationApiGmAction gmAction;

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantId")
    private String grantId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grant")
    private BackchannelAuthenticationApiGrant grant;

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("grantSubject")
    private String grantSubject;

    /**
     * The entity ID of the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityId")
    private String clientEntityId;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    @JsonCreator
    public BackchannelAuthenticationApiResponseBody(
            @JsonProperty("resultCode") @Nullable String resultCode,
            @JsonProperty("resultMessage") @Nullable String resultMessage,
            @JsonProperty("action") @Nullable BackchannelAuthenticationApiAction action,
            @JsonProperty("responseContent") @Nullable String responseContent,
            @JsonProperty("clientId") @Nullable Long clientId,
            @JsonProperty("clientIdAlias") @Nullable String clientIdAlias,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("clientName") @Nullable String clientName,
            @JsonProperty("scopes") @Nullable List<BackchannelAuthenticationApiScope> scopes,
            @JsonProperty("claimNames") @Nullable List<String> claimNames,
            @JsonProperty("clientNotificationToken") @Nullable String clientNotificationToken,
            @JsonProperty("acrs") @Nullable List<String> acrs,
            @JsonProperty("hintType") @Nullable String hintType,
            @JsonProperty("hint") @Nullable String hint,
            @JsonProperty("sub") @Nullable String sub,
            @JsonProperty("bindingMessage") @Nullable String bindingMessage,
            @JsonProperty("userCode") @Nullable String userCode,
            @JsonProperty("userCodeRequired") @Nullable Boolean userCodeRequired,
            @JsonProperty("requestedExpiry") @Nullable Integer requestedExpiry,
            @JsonProperty("requestContext") @Nullable String requestContext,
            @JsonProperty("warnings") @Nullable List<String> warnings,
            @JsonProperty("ticket") @Nullable String ticket,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("authorizationDetails") @Nullable BackchannelAuthenticationApiAuthorizationDetails authorizationDetails,
            @JsonProperty("serviceAttributes") @Nullable List<BackchannelAuthenticationApiServiceAttribute> serviceAttributes,
            @JsonProperty("clientAttributes") @Nullable List<BackchannelAuthenticationApiClientAttribute> clientAttributes,
            @JsonProperty("dynamicScopes") @Nullable List<BackchannelAuthenticationApiDynamicScope> dynamicScopes,
            @JsonProperty("deliveryMode") @Nullable BackchannelAuthenticationApiDeliveryMode deliveryMode,
            @JsonProperty("clientAuthMethod") @Nullable String clientAuthMethod,
            @JsonProperty("gmAction") @Nullable BackchannelAuthenticationApiGmAction gmAction,
            @JsonProperty("grantId") @Nullable String grantId,
            @JsonProperty("grant") @Nullable BackchannelAuthenticationApiGrant grant,
            @JsonProperty("grantSubject") @Nullable String grantSubject,
            @JsonProperty("clientEntityId") @Nullable String clientEntityId,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed) {
        this.resultCode = resultCode;
        this.resultMessage = resultMessage;
        this.action = action;
        this.responseContent = responseContent;
        this.clientId = clientId;
        this.clientIdAlias = clientIdAlias;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.clientName = clientName;
        this.scopes = scopes;
        this.claimNames = claimNames;
        this.clientNotificationToken = clientNotificationToken;
        this.acrs = acrs;
        this.hintType = hintType;
        this.hint = hint;
        this.sub = sub;
        this.bindingMessage = bindingMessage;
        this.userCode = userCode;
        this.userCodeRequired = userCodeRequired;
        this.requestedExpiry = requestedExpiry;
        this.requestContext = requestContext;
        this.warnings = warnings;
        this.ticket = ticket;
        this.resources = resources;
        this.authorizationDetails = authorizationDetails;
        this.serviceAttributes = serviceAttributes;
        this.clientAttributes = clientAttributes;
        this.dynamicScopes = dynamicScopes;
        this.deliveryMode = deliveryMode;
        this.clientAuthMethod = clientAuthMethod;
        this.gmAction = gmAction;
        this.grantId = grantId;
        this.grant = grant;
        this.grantSubject = grantSubject;
        this.clientEntityId = clientEntityId;
        this.clientEntityIdUsed = clientEntityIdUsed;
    }
    
    public BackchannelAuthenticationApiResponseBody() {
        this(null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The code which represents the result of the API call.
     */
    public Optional<String> resultCode() {
        return Optional.ofNullable(this.resultCode);
    }

    /**
     * A short message which explains the result of the API call.
     */
    public Optional<String> resultMessage() {
        return Optional.ofNullable(this.resultMessage);
    }

    /**
     * The next action that the authorization server implementation should take.
     */
    public Optional<BackchannelAuthenticationApiAction> action() {
        return Optional.ofNullable(this.action);
    }

    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    public Optional<String> responseContent() {
        return Optional.ofNullable(this.responseContent);
    }

    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    public Optional<Long> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    public Optional<String> clientIdAlias() {
        return Optional.ofNullable(this.clientIdAlias);
    }

    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    public Optional<String> clientName() {
        return Optional.ofNullable(this.clientName);
    }

    /**
     * The scopes requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `scope` request parameter in the backchannel
     * authentication request. However, because unregistered scopes are dropped on Authlete side,
     * if the `scope` request parameter contains unknown scopes, the list returned by this
     * property becomes different from the value of the `scope` request parameter.
     * 
     * <p>Note that `description` property and `descriptions` property of each `scope` object
     * in the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    public Optional<List<BackchannelAuthenticationApiScope>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     */
    public Optional<List<String>> claimNames() {
        return Optional.ofNullable(this.claimNames);
    }

    /**
     * The client notification token included in the backchannel authentication request.
     */
    public Optional<String> clientNotificationToken() {
        return Optional.ofNullable(this.clientNotificationToken);
    }

    /**
     * The list of ACR values requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `acr_values` request parameter in the
     * backchannel authentication request. However, because unsupported ACR values are dropped
     * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
     * the list returned by this property becomes different from the value of the `acr_values`
     * request parameter.
     */
    public Optional<List<String>> acrs() {
        return Optional.ofNullable(this.acrs);
    }

    /**
     * The type of the hint for end-user identification which was included in the backchannel authentication request.
     */
    public Optional<String> hintType() {
        return Optional.ofNullable(this.hintType);
    }

    /**
     * The value of the hint for end-user identification.
     */
    public Optional<String> hint() {
        return Optional.ofNullable(this.hint);
    }

    /**
     * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
     */
    public Optional<String> sub() {
        return Optional.ofNullable(this.sub);
    }

    /**
     * The binding message included in the backchannel authentication request.
     */
    public Optional<String> bindingMessage() {
        return Optional.ofNullable(this.bindingMessage);
    }

    /**
     * The binding message included in the backchannel authentication request.
     */
    public Optional<String> userCode() {
        return Optional.ofNullable(this.userCode);
    }

    /**
     * The flag which indicates whether a user code is required.
     * 
     * <p>`true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
     * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
     * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
     * are `true`.
     */
    public Optional<Boolean> userCodeRequired() {
        return Optional.ofNullable(this.userCodeRequired);
    }

    /**
     * The requested expiry for the authentication request ID (`auth_req_id`).
     */
    public Optional<Integer> requestedExpiry() {
        return Optional.ofNullable(this.requestedExpiry);
    }

    /**
     * The request context of the backchannel authentication request.
     * 
     * <p>It is the value of the request_context claim in the signed authentication request and
     * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
     */
    public Optional<String> requestContext() {
        return Optional.ofNullable(this.requestContext);
    }

    /**
     * The warnings raised during processing the backchannel authentication request.
     */
    public Optional<List<String>> warnings() {
        return Optional.ofNullable(this.warnings);
    }

    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public Optional<String> ticket() {
        return Optional.ofNullable(this.ticket);
    }

    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<BackchannelAuthenticationApiAuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The attributes of this service that the client application belongs to.
     */
    public Optional<List<BackchannelAuthenticationApiServiceAttribute>> serviceAttributes() {
        return Optional.ofNullable(this.serviceAttributes);
    }

    /**
     * The attributes of the client.
     */
    public Optional<List<BackchannelAuthenticationApiClientAttribute>> clientAttributes() {
        return Optional.ofNullable(this.clientAttributes);
    }

    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public Optional<List<BackchannelAuthenticationApiDynamicScope>> dynamicScopes() {
        return Optional.ofNullable(this.dynamicScopes);
    }

    public Optional<BackchannelAuthenticationApiDeliveryMode> deliveryMode() {
        return Optional.ofNullable(this.deliveryMode);
    }

    /**
     * The client authentication method that was performed.
     */
    public Optional<String> clientAuthMethod() {
        return Optional.ofNullable(this.clientAuthMethod);
    }

    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public Optional<BackchannelAuthenticationApiGmAction> gmAction() {
        return Optional.ofNullable(this.gmAction);
    }

    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public Optional<String> grantId() {
        return Optional.ofNullable(this.grantId);
    }

    public Optional<BackchannelAuthenticationApiGrant> grant() {
        return Optional.ofNullable(this.grant);
    }

    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public Optional<String> grantSubject() {
        return Optional.ofNullable(this.grantSubject);
    }

    /**
     * The entity ID of the client.
     */
    public Optional<String> clientEntityId() {
        return Optional.ofNullable(this.clientEntityId);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The code which represents the result of the API call.
     */
    public BackchannelAuthenticationApiResponseBody withResultCode(@Nullable String resultCode) {
        this.resultCode = resultCode;
        return this;
    }


    /**
     * A short message which explains the result of the API call.
     */
    public BackchannelAuthenticationApiResponseBody withResultMessage(@Nullable String resultMessage) {
        this.resultMessage = resultMessage;
        return this;
    }


    /**
     * The next action that the authorization server implementation should take.
     */
    public BackchannelAuthenticationApiResponseBody withAction(@Nullable BackchannelAuthenticationApiAction action) {
        this.action = action;
        return this;
    }


    /**
     * The content that the authorization server implementation is to return to the client
     * application. Its format varies depending on the value of `action` parameter.
     */
    public BackchannelAuthenticationApiResponseBody withResponseContent(@Nullable String responseContent) {
        this.responseContent = responseContent;
        return this;
    }


    /**
     * The client ID of the client application that has made the backchannel authentication
     * request.
     */
    public BackchannelAuthenticationApiResponseBody withClientId(@Nullable Long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client ID alias of the client application that has made the backchannel authentication
     * request.
     */
    public BackchannelAuthenticationApiResponseBody withClientIdAlias(@Nullable String clientIdAlias) {
        this.clientIdAlias = clientIdAlias;
        return this;
    }


    /**
     * `true` if the value of the client_id request parameter included in the backchannel
     * authentication request is the client ID alias. `false` if the value is the original
     * numeric client ID.
     */
    public BackchannelAuthenticationApiResponseBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The name of the client application which has made the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withClientName(@Nullable String clientName) {
        this.clientName = clientName;
        return this;
    }


    /**
     * The scopes requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `scope` request parameter in the backchannel
     * authentication request. However, because unregistered scopes are dropped on Authlete side,
     * if the `scope` request parameter contains unknown scopes, the list returned by this
     * property becomes different from the value of the `scope` request parameter.
     * 
     * <p>Note that `description` property and `descriptions` property of each `scope` object
     * in the array contained in this property is always null even if descriptions of the scopes
     * are registered.
     */
    public BackchannelAuthenticationApiResponseBody withScopes(@Nullable List<BackchannelAuthenticationApiScope> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The names of the claims which were requested indirectly via some special scopes.
     * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
     * in OpenID Connect Core 1.0 for details.
     */
    public BackchannelAuthenticationApiResponseBody withClaimNames(@Nullable List<String> claimNames) {
        this.claimNames = claimNames;
        return this;
    }


    /**
     * The client notification token included in the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withClientNotificationToken(@Nullable String clientNotificationToken) {
        this.clientNotificationToken = clientNotificationToken;
        return this;
    }


    /**
     * The list of ACR values requested by the backchannel authentication request.
     * 
     * <p>Basically, this property holds the value of the `acr_values` request parameter in the
     * backchannel authentication request. However, because unsupported ACR values are dropped
     * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
     * the list returned by this property becomes different from the value of the `acr_values`
     * request parameter.
     */
    public BackchannelAuthenticationApiResponseBody withAcrs(@Nullable List<String> acrs) {
        this.acrs = acrs;
        return this;
    }


    /**
     * The type of the hint for end-user identification which was included in the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withHintType(@Nullable String hintType) {
        this.hintType = hintType;
        return this;
    }


    /**
     * The value of the hint for end-user identification.
     */
    public BackchannelAuthenticationApiResponseBody withHint(@Nullable String hint) {
        this.hint = hint;
        return this;
    }


    /**
     * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withSub(@Nullable String sub) {
        this.sub = sub;
        return this;
    }


    /**
     * The binding message included in the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withBindingMessage(@Nullable String bindingMessage) {
        this.bindingMessage = bindingMessage;
        return this;
    }


    /**
     * The binding message included in the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withUserCode(@Nullable String userCode) {
        this.userCode = userCode;
        return this;
    }


    /**
     * The flag which indicates whether a user code is required.
     * 
     * <p>`true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
     * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
     * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
     * are `true`.
     */
    public BackchannelAuthenticationApiResponseBody withUserCodeRequired(@Nullable Boolean userCodeRequired) {
        this.userCodeRequired = userCodeRequired;
        return this;
    }


    /**
     * The requested expiry for the authentication request ID (`auth_req_id`).
     */
    public BackchannelAuthenticationApiResponseBody withRequestedExpiry(@Nullable Integer requestedExpiry) {
        this.requestedExpiry = requestedExpiry;
        return this;
    }


    /**
     * The request context of the backchannel authentication request.
     * 
     * <p>It is the value of the request_context claim in the signed authentication request and
     * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
     */
    public BackchannelAuthenticationApiResponseBody withRequestContext(@Nullable String requestContext) {
        this.requestContext = requestContext;
        return this;
    }


    /**
     * The warnings raised during processing the backchannel authentication request.
     */
    public BackchannelAuthenticationApiResponseBody withWarnings(@Nullable List<String> warnings) {
        this.warnings = warnings;
        return this;
    }


    /**
     * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
     * 
     * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
     */
    public BackchannelAuthenticationApiResponseBody withTicket(@Nullable String ticket) {
        this.ticket = ticket;
        return this;
    }


    /**
     * The resources specified by the `resource` request parameters or by the `resource` property
     * in the request object. If both are given, the values in the request object should be
     * set. See "Resource Indicators for OAuth 2.0" for details.
     */
    public BackchannelAuthenticationApiResponseBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public BackchannelAuthenticationApiResponseBody withAuthorizationDetails(@Nullable BackchannelAuthenticationApiAuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The attributes of this service that the client application belongs to.
     */
    public BackchannelAuthenticationApiResponseBody withServiceAttributes(@Nullable List<BackchannelAuthenticationApiServiceAttribute> serviceAttributes) {
        this.serviceAttributes = serviceAttributes;
        return this;
    }


    /**
     * The attributes of the client.
     */
    public BackchannelAuthenticationApiResponseBody withClientAttributes(@Nullable List<BackchannelAuthenticationApiClientAttribute> clientAttributes) {
        this.clientAttributes = clientAttributes;
        return this;
    }


    /**
     * The dynamic scopes which the client application requested by the scope request parameter.
     */
    public BackchannelAuthenticationApiResponseBody withDynamicScopes(@Nullable List<BackchannelAuthenticationApiDynamicScope> dynamicScopes) {
        this.dynamicScopes = dynamicScopes;
        return this;
    }


    public BackchannelAuthenticationApiResponseBody withDeliveryMode(@Nullable BackchannelAuthenticationApiDeliveryMode deliveryMode) {
        this.deliveryMode = deliveryMode;
        return this;
    }


    /**
     * The client authentication method that was performed.
     */
    public BackchannelAuthenticationApiResponseBody withClientAuthMethod(@Nullable String clientAuthMethod) {
        this.clientAuthMethod = clientAuthMethod;
        return this;
    }


    /**
     * The grant management action of the device authorization request.
     * 
     * <p>The `grant_management_action` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
     */
    public BackchannelAuthenticationApiResponseBody withGmAction(@Nullable BackchannelAuthenticationApiGmAction gmAction) {
        this.gmAction = gmAction;
        return this;
    }


    /**
     * the value of the `grant_id` request parameter of the device authorization request.
     * 
     * <p>The `grant_id` request parameter is defined in
     * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
     * , which is supported by Authlete 2.3 and newer versions.
     */
    public BackchannelAuthenticationApiResponseBody withGrantId(@Nullable String grantId) {
        this.grantId = grantId;
        return this;
    }


    public BackchannelAuthenticationApiResponseBody withGrant(@Nullable BackchannelAuthenticationApiGrant grant) {
        this.grant = grant;
        return this;
    }


    /**
     * The subject identifying the user who has given the grant identified
     * by the `grant_id` request parameter of the device authorization
     * request.
     * 
     * <p>Authlete 2.3 and newer versions support &lt;a href=
     * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
     * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
     * request parameter which is defined in the specification. If the value of
     * the request parameter is valid, #getGrantSubject() will return
     * the subject of the user who has given the grant to the client application.
     * Authorization server implementations may use the value returned from
     * #getGrantSubject() in order to determine the user to authenticate.
     * 
     * <p>The user your system will authenticate during the authorization process
     * (or has already authenticated) may be different from the user of the
     * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
     * does not mention anything about the case, so the behavior in the case is
     * left to implementations. Authlete will not perform the grant management
     * action when the `subject` passed to Authlete does not match the
     * user of the grant.
     */
    public BackchannelAuthenticationApiResponseBody withGrantSubject(@Nullable String grantSubject) {
        this.grantSubject = grantSubject;
        return this;
    }


    /**
     * The entity ID of the client.
     */
    public BackchannelAuthenticationApiResponseBody withClientEntityId(@Nullable String clientEntityId) {
        this.clientEntityId = clientEntityId;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public BackchannelAuthenticationApiResponseBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackchannelAuthenticationApiResponseBody other = (BackchannelAuthenticationApiResponseBody) o;
        return 
            Utils.enhancedDeepEquals(this.resultCode, other.resultCode) &&
            Utils.enhancedDeepEquals(this.resultMessage, other.resultMessage) &&
            Utils.enhancedDeepEquals(this.action, other.action) &&
            Utils.enhancedDeepEquals(this.responseContent, other.responseContent) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientIdAlias, other.clientIdAlias) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.clientName, other.clientName) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.claimNames, other.claimNames) &&
            Utils.enhancedDeepEquals(this.clientNotificationToken, other.clientNotificationToken) &&
            Utils.enhancedDeepEquals(this.acrs, other.acrs) &&
            Utils.enhancedDeepEquals(this.hintType, other.hintType) &&
            Utils.enhancedDeepEquals(this.hint, other.hint) &&
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.bindingMessage, other.bindingMessage) &&
            Utils.enhancedDeepEquals(this.userCode, other.userCode) &&
            Utils.enhancedDeepEquals(this.userCodeRequired, other.userCodeRequired) &&
            Utils.enhancedDeepEquals(this.requestedExpiry, other.requestedExpiry) &&
            Utils.enhancedDeepEquals(this.requestContext, other.requestContext) &&
            Utils.enhancedDeepEquals(this.warnings, other.warnings) &&
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.serviceAttributes, other.serviceAttributes) &&
            Utils.enhancedDeepEquals(this.clientAttributes, other.clientAttributes) &&
            Utils.enhancedDeepEquals(this.dynamicScopes, other.dynamicScopes) &&
            Utils.enhancedDeepEquals(this.deliveryMode, other.deliveryMode) &&
            Utils.enhancedDeepEquals(this.clientAuthMethod, other.clientAuthMethod) &&
            Utils.enhancedDeepEquals(this.gmAction, other.gmAction) &&
            Utils.enhancedDeepEquals(this.grantId, other.grantId) &&
            Utils.enhancedDeepEquals(this.grant, other.grant) &&
            Utils.enhancedDeepEquals(this.grantSubject, other.grantSubject) &&
            Utils.enhancedDeepEquals(this.clientEntityId, other.clientEntityId) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            resultCode, resultMessage, action,
            responseContent, clientId, clientIdAlias,
            clientIdAliasUsed, clientName, scopes,
            claimNames, clientNotificationToken, acrs,
            hintType, hint, sub,
            bindingMessage, userCode, userCodeRequired,
            requestedExpiry, requestContext, warnings,
            ticket, resources, authorizationDetails,
            serviceAttributes, clientAttributes, dynamicScopes,
            deliveryMode, clientAuthMethod, gmAction,
            grantId, grant, grantSubject,
            clientEntityId, clientEntityIdUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackchannelAuthenticationApiResponseBody.class,
                "resultCode", resultCode,
                "resultMessage", resultMessage,
                "action", action,
                "responseContent", responseContent,
                "clientId", clientId,
                "clientIdAlias", clientIdAlias,
                "clientIdAliasUsed", clientIdAliasUsed,
                "clientName", clientName,
                "scopes", scopes,
                "claimNames", claimNames,
                "clientNotificationToken", clientNotificationToken,
                "acrs", acrs,
                "hintType", hintType,
                "hint", hint,
                "sub", sub,
                "bindingMessage", bindingMessage,
                "userCode", userCode,
                "userCodeRequired", userCodeRequired,
                "requestedExpiry", requestedExpiry,
                "requestContext", requestContext,
                "warnings", warnings,
                "ticket", ticket,
                "resources", resources,
                "authorizationDetails", authorizationDetails,
                "serviceAttributes", serviceAttributes,
                "clientAttributes", clientAttributes,
                "dynamicScopes", dynamicScopes,
                "deliveryMode", deliveryMode,
                "clientAuthMethod", clientAuthMethod,
                "gmAction", gmAction,
                "grantId", grantId,
                "grant", grant,
                "grantSubject", grantSubject,
                "clientEntityId", clientEntityId,
                "clientEntityIdUsed", clientEntityIdUsed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String resultCode;

        private String resultMessage;

        private BackchannelAuthenticationApiAction action;

        private String responseContent;

        private Long clientId;

        private String clientIdAlias;

        private Boolean clientIdAliasUsed;

        private String clientName;

        private List<BackchannelAuthenticationApiScope> scopes;

        private List<String> claimNames;

        private String clientNotificationToken;

        private List<String> acrs;

        private String hintType;

        private String hint;

        private String sub;

        private String bindingMessage;

        private String userCode;

        private Boolean userCodeRequired;

        private Integer requestedExpiry;

        private String requestContext;

        private List<String> warnings;

        private String ticket;

        private List<String> resources;

        private BackchannelAuthenticationApiAuthorizationDetails authorizationDetails;

        private List<BackchannelAuthenticationApiServiceAttribute> serviceAttributes;

        private List<BackchannelAuthenticationApiClientAttribute> clientAttributes;

        private List<BackchannelAuthenticationApiDynamicScope> dynamicScopes;

        private BackchannelAuthenticationApiDeliveryMode deliveryMode;

        private String clientAuthMethod;

        private BackchannelAuthenticationApiGmAction gmAction;

        private String grantId;

        private BackchannelAuthenticationApiGrant grant;

        private String grantSubject;

        private String clientEntityId;

        private Boolean clientEntityIdUsed;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The code which represents the result of the API call.
         */
        public Builder resultCode(@Nullable String resultCode) {
            this.resultCode = resultCode;
            return this;
        }

        /**
         * A short message which explains the result of the API call.
         */
        public Builder resultMessage(@Nullable String resultMessage) {
            this.resultMessage = resultMessage;
            return this;
        }

        /**
         * The next action that the authorization server implementation should take.
         */
        public Builder action(@Nullable BackchannelAuthenticationApiAction action) {
            this.action = action;
            return this;
        }

        /**
         * The content that the authorization server implementation is to return to the client
         * application. Its format varies depending on the value of `action` parameter.
         */
        public Builder responseContent(@Nullable String responseContent) {
            this.responseContent = responseContent;
            return this;
        }

        /**
         * The client ID of the client application that has made the backchannel authentication
         * request.
         */
        public Builder clientId(@Nullable Long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client ID alias of the client application that has made the backchannel authentication
         * request.
         */
        public Builder clientIdAlias(@Nullable String clientIdAlias) {
            this.clientIdAlias = clientIdAlias;
            return this;
        }

        /**
         * `true` if the value of the client_id request parameter included in the backchannel
         * authentication request is the client ID alias. `false` if the value is the original
         * numeric client ID.
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The name of the client application which has made the backchannel authentication request.
         */
        public Builder clientName(@Nullable String clientName) {
            this.clientName = clientName;
            return this;
        }

        /**
         * The scopes requested by the backchannel authentication request.
         * 
         * <p>Basically, this property holds the value of the `scope` request parameter in the backchannel
         * authentication request. However, because unregistered scopes are dropped on Authlete side,
         * if the `scope` request parameter contains unknown scopes, the list returned by this
         * property becomes different from the value of the `scope` request parameter.
         * 
         * <p>Note that `description` property and `descriptions` property of each `scope` object
         * in the array contained in this property is always null even if descriptions of the scopes
         * are registered.
         */
        public Builder scopes(@Nullable List<BackchannelAuthenticationApiScope> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The names of the claims which were requested indirectly via some special scopes.
         * See [5.4. Requesting Claims using Scope Values](https://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims)
         * in OpenID Connect Core 1.0 for details.
         */
        public Builder claimNames(@Nullable List<String> claimNames) {
            this.claimNames = claimNames;
            return this;
        }

        /**
         * The client notification token included in the backchannel authentication request.
         */
        public Builder clientNotificationToken(@Nullable String clientNotificationToken) {
            this.clientNotificationToken = clientNotificationToken;
            return this;
        }

        /**
         * The list of ACR values requested by the backchannel authentication request.
         * 
         * <p>Basically, this property holds the value of the `acr_values` request parameter in the
         * backchannel authentication request. However, because unsupported ACR values are dropped
         * on Authlete side, if the `acr_values` request parameter contains unrecognized ACR values,
         * the list returned by this property becomes different from the value of the `acr_values`
         * request parameter.
         */
        public Builder acrs(@Nullable List<String> acrs) {
            this.acrs = acrs;
            return this;
        }

        /**
         * The type of the hint for end-user identification which was included in the backchannel authentication request.
         */
        public Builder hintType(@Nullable String hintType) {
            this.hintType = hintType;
            return this;
        }

        /**
         * The value of the hint for end-user identification.
         */
        public Builder hint(@Nullable String hint) {
            this.hint = hint;
            return this;
        }

        /**
         * The value of the `sub` claim contained in the ID token hint included in the backchannel authentication request.
         */
        public Builder sub(@Nullable String sub) {
            this.sub = sub;
            return this;
        }

        /**
         * The binding message included in the backchannel authentication request.
         */
        public Builder bindingMessage(@Nullable String bindingMessage) {
            this.bindingMessage = bindingMessage;
            return this;
        }

        /**
         * The binding message included in the backchannel authentication request.
         */
        public Builder userCode(@Nullable String userCode) {
            this.userCode = userCode;
            return this;
        }

        /**
         * The flag which indicates whether a user code is required.
         * 
         * <p>`true` when both the `backchannel_user_code_parameter` metadata of the client (= Client's
         * `bcUserCodeRequired` property) and the `backchannel_user_code_parameter_supported`
         * metadata of the service (= Service's `backchannelUserCodeParameterSupported` property)
         * are `true`.
         */
        public Builder userCodeRequired(@Nullable Boolean userCodeRequired) {
            this.userCodeRequired = userCodeRequired;
            return this;
        }

        /**
         * The requested expiry for the authentication request ID (`auth_req_id`).
         */
        public Builder requestedExpiry(@Nullable Integer requestedExpiry) {
            this.requestedExpiry = requestedExpiry;
            return this;
        }

        /**
         * The request context of the backchannel authentication request.
         * 
         * <p>It is the value of the request_context claim in the signed authentication request and
         * its format is JSON. request_context is a new claim added by the FAPI-CIBA profile.
         */
        public Builder requestContext(@Nullable String requestContext) {
            this.requestContext = requestContext;
            return this;
        }

        /**
         * The warnings raised during processing the backchannel authentication request.
         */
        public Builder warnings(@Nullable List<String> warnings) {
            this.warnings = warnings;
            return this;
        }

        /**
         * The ticket which is necessary to call Authlete's `/auth/token/fail` API or `/auth/token/issue` API.
         * 
         * <p>This parameter has a value only if the value of `grant_type` request parameter is `password` and the token request is valid.
         */
        public Builder ticket(@Nullable String ticket) {
            this.ticket = ticket;
            return this;
        }

        /**
         * The resources specified by the `resource` request parameters or by the `resource` property
         * in the request object. If both are given, the values in the request object should be
         * set. See "Resource Indicators for OAuth 2.0" for details.
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable BackchannelAuthenticationApiAuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The attributes of this service that the client application belongs to.
         */
        public Builder serviceAttributes(@Nullable List<BackchannelAuthenticationApiServiceAttribute> serviceAttributes) {
            this.serviceAttributes = serviceAttributes;
            return this;
        }

        /**
         * The attributes of the client.
         */
        public Builder clientAttributes(@Nullable List<BackchannelAuthenticationApiClientAttribute> clientAttributes) {
            this.clientAttributes = clientAttributes;
            return this;
        }

        /**
         * The dynamic scopes which the client application requested by the scope request parameter.
         */
        public Builder dynamicScopes(@Nullable List<BackchannelAuthenticationApiDynamicScope> dynamicScopes) {
            this.dynamicScopes = dynamicScopes;
            return this;
        }

        public Builder deliveryMode(@Nullable BackchannelAuthenticationApiDeliveryMode deliveryMode) {
            this.deliveryMode = deliveryMode;
            return this;
        }

        /**
         * The client authentication method that was performed.
         */
        public Builder clientAuthMethod(@Nullable String clientAuthMethod) {
            this.clientAuthMethod = clientAuthMethod;
            return this;
        }

        /**
         * The grant management action of the device authorization request.
         * 
         * <p>The `grant_management_action` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html).
         */
        public Builder gmAction(@Nullable BackchannelAuthenticationApiGmAction gmAction) {
            this.gmAction = gmAction;
            return this;
        }

        /**
         * the value of the `grant_id` request parameter of the device authorization request.
         * 
         * <p>The `grant_id` request parameter is defined in
         * [Grant Management for OAuth 2.0](https://openid.net/specs/fapi-grant-management.html)
         * , which is supported by Authlete 2.3 and newer versions.
         */
        public Builder grantId(@Nullable String grantId) {
            this.grantId = grantId;
            return this;
        }

        public Builder grant(@Nullable BackchannelAuthenticationApiGrant grant) {
            this.grant = grant;
            return this;
        }

        /**
         * The subject identifying the user who has given the grant identified
         * by the `grant_id` request parameter of the device authorization
         * request.
         * 
         * <p>Authlete 2.3 and newer versions support &lt;a href=
         * "https://openid.net/specs/fapi-grant-management.html"&gt;Grant Management
         * for OAuth 2.0&lt;/a&gt;. An authorization request may contain a `grant_id`
         * request parameter which is defined in the specification. If the value of
         * the request parameter is valid, #getGrantSubject() will return
         * the subject of the user who has given the grant to the client application.
         * Authorization server implementations may use the value returned from
         * #getGrantSubject() in order to determine the user to authenticate.
         * 
         * <p>The user your system will authenticate during the authorization process
         * (or has already authenticated) may be different from the user of the
         * grant. The first implementer's draft of "Grant Management for OAuth 2.0"
         * does not mention anything about the case, so the behavior in the case is
         * left to implementations. Authlete will not perform the grant management
         * action when the `subject` passed to Authlete does not match the
         * user of the grant.
         */
        public Builder grantSubject(@Nullable String grantSubject) {
            this.grantSubject = grantSubject;
            return this;
        }

        /**
         * The entity ID of the client.
         */
        public Builder clientEntityId(@Nullable String clientEntityId) {
            this.clientEntityId = clientEntityId;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        public BackchannelAuthenticationApiResponseBody build() {
            return new BackchannelAuthenticationApiResponseBody(
                resultCode, resultMessage, action,
                responseContent, clientId, clientIdAlias,
                clientIdAliasUsed, clientName, scopes,
                claimNames, clientNotificationToken, acrs,
                hintType, hint, sub,
                bindingMessage, userCode, userCodeRequired,
                requestedExpiry, requestContext, warnings,
                ticket, resources, authorizationDetails,
                serviceAttributes, clientAttributes, dynamicScopes,
                deliveryMode, clientAuthMethod, gmAction,
                grantId, grant, grantSubject,
                clientEntityId, clientEntityIdUsed);
        }

    }
}
