/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class BackchannelAuthenticationFailApiRequestBody {
    /**
     * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
     * This request parameter is not mandatory but optional. If this request parameter is given and the
     * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
     * parameter is recommended to clean up the storage area for the service.
     */
    @JsonProperty("ticket")
    private String ticket;

    /**
     * The reason of the failure of the backchannel authentication request. This request parameter is
     * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
     * is used as a reason.
     */
    @JsonProperty("reason")
    private BackchannelAuthenticationFailApiReason reason;

    /**
     * The description of the error. This corresponds to the `error_description` property in the response
     * to the client.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorDescription")
    private String errorDescription;

    /**
     * The URI of a document which describes the error in detail. If this optional request parameter
     * is given, its value is used as the value of the `error_uri` property.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errorUri")
    private String errorUri;

    @JsonCreator
    public BackchannelAuthenticationFailApiRequestBody(
            @JsonProperty("ticket") @Nonnull String ticket,
            @JsonProperty("reason") @Nonnull BackchannelAuthenticationFailApiReason reason,
            @JsonProperty("errorDescription") @Nullable String errorDescription,
            @JsonProperty("errorUri") @Nullable String errorUri) {
        this.ticket = Optional.ofNullable(ticket)
            .orElseThrow(() -> new IllegalArgumentException("ticket cannot be null"));
        this.reason = Optional.ofNullable(reason)
            .orElseThrow(() -> new IllegalArgumentException("reason cannot be null"));
        this.errorDescription = errorDescription;
        this.errorUri = errorUri;
    }
    
    public BackchannelAuthenticationFailApiRequestBody(
            @Nonnull String ticket,
            @Nonnull BackchannelAuthenticationFailApiReason reason) {
        this(ticket, reason, null,
            null);
    }

    /**
     * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
     * This request parameter is not mandatory but optional. If this request parameter is given and the
     * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
     * parameter is recommended to clean up the storage area for the service.
     */
    public String ticket() {
        return this.ticket;
    }

    /**
     * The reason of the failure of the backchannel authentication request. This request parameter is
     * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
     * is used as a reason.
     */
    public BackchannelAuthenticationFailApiReason reason() {
        return this.reason;
    }

    /**
     * The description of the error. This corresponds to the `error_description` property in the response
     * to the client.
     */
    public Optional<String> errorDescription() {
        return Optional.ofNullable(this.errorDescription);
    }

    /**
     * The URI of a document which describes the error in detail. If this optional request parameter
     * is given, its value is used as the value of the `error_uri` property.
     */
    public Optional<String> errorUri() {
        return Optional.ofNullable(this.errorUri);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
     * This request parameter is not mandatory but optional. If this request parameter is given and the
     * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
     * parameter is recommended to clean up the storage area for the service.
     */
    public BackchannelAuthenticationFailApiRequestBody withTicket(@Nonnull String ticket) {
        this.ticket = Utils.checkNotNull(ticket, "ticket");
        return this;
    }


    /**
     * The reason of the failure of the backchannel authentication request. This request parameter is
     * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
     * is used as a reason.
     */
    public BackchannelAuthenticationFailApiRequestBody withReason(@Nonnull BackchannelAuthenticationFailApiReason reason) {
        this.reason = Utils.checkNotNull(reason, "reason");
        return this;
    }


    /**
     * The description of the error. This corresponds to the `error_description` property in the response
     * to the client.
     */
    public BackchannelAuthenticationFailApiRequestBody withErrorDescription(@Nullable String errorDescription) {
        this.errorDescription = errorDescription;
        return this;
    }


    /**
     * The URI of a document which describes the error in detail. If this optional request parameter
     * is given, its value is used as the value of the `error_uri` property.
     */
    public BackchannelAuthenticationFailApiRequestBody withErrorUri(@Nullable String errorUri) {
        this.errorUri = errorUri;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BackchannelAuthenticationFailApiRequestBody other = (BackchannelAuthenticationFailApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.errorDescription, other.errorDescription) &&
            Utils.enhancedDeepEquals(this.errorUri, other.errorUri);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ticket, reason, errorDescription,
            errorUri);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BackchannelAuthenticationFailApiRequestBody.class,
                "ticket", ticket,
                "reason", reason,
                "errorDescription", errorDescription,
                "errorUri", errorUri);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ticket;

        private BackchannelAuthenticationFailApiReason reason;

        private String errorDescription;

        private String errorUri;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ticket which should be deleted on a call of Authlete's `/backchannel/authentication/fail` API.
         * This request parameter is not mandatory but optional. If this request parameter is given and the
         * ticket belongs to the service, the specified ticket is deleted from the database. Giving this
         * parameter is recommended to clean up the storage area for the service.
         */
        public Builder ticket(@Nonnull String ticket) {
            this.ticket = Utils.checkNotNull(ticket, "ticket");
            return this;
        }

        /**
         * The reason of the failure of the backchannel authentication request. This request parameter is
         * not mandatory but optional. However, giving this parameter is recommended. If omitted, `SERVER_ERROR`
         * is used as a reason.
         */
        public Builder reason(@Nonnull BackchannelAuthenticationFailApiReason reason) {
            this.reason = Utils.checkNotNull(reason, "reason");
            return this;
        }

        /**
         * The description of the error. This corresponds to the `error_description` property in the response
         * to the client.
         */
        public Builder errorDescription(@Nullable String errorDescription) {
            this.errorDescription = errorDescription;
            return this;
        }

        /**
         * The URI of a document which describes the error in detail. If this optional request parameter
         * is given, its value is used as the value of the `error_uri` property.
         */
        public Builder errorUri(@Nullable String errorUri) {
            this.errorUri = errorUri;
            return this;
        }

        public BackchannelAuthenticationFailApiRequestBody build() {
            return new BackchannelAuthenticationFailApiRequestBody(
                ticket, reason, errorDescription,
                errorUri);
        }

    }
}
