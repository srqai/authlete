/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthTokenApiRequestBody {
    /**
     * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
     * implementation received from the client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
     * the client application.
     */
    @JsonProperty("parameters")
    private String parameters;

    /**
     * The client ID extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as
     * a means of client authentication, and the request from the client application contained its client ID
     * in `Authorization` header, the value should be extracted and set to this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private String clientId;

    /**
     * The client secret extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    private String clientSecret;

    /**
     * The client certificate from the MTLS of the token request from the client application.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificate")
    private String clientCertificate;

    /**
     * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificatePath")
    private String clientCertificatePath;

    /**
     * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private String properties;

    /**
     * `DPoP` header presented by the client during the request to the token endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpop")
    private String dpop;

    /**
     * HTTP method of the token request. This field is used to validate the `DPoP` header.
     * 
     * <p>In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htm")
    private String htm;

    /**
     * URL of the token endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("htu")
    private String htu;

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAtClaims")
    private String jwtAtClaims;

    @JsonCreator
    public AuthTokenApiRequestBody(
            @JsonProperty("parameters") @Nonnull String parameters,
            @JsonProperty("clientId") @Nullable String clientId,
            @JsonProperty("clientSecret") @Nullable String clientSecret,
            @JsonProperty("clientCertificate") @Nullable String clientCertificate,
            @JsonProperty("clientCertificatePath") @Nullable String clientCertificatePath,
            @JsonProperty("properties") @Nullable String properties,
            @JsonProperty("dpop") @Nullable String dpop,
            @JsonProperty("htm") @Nullable String htm,
            @JsonProperty("htu") @Nullable String htu,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("jwtAtClaims") @Nullable String jwtAtClaims) {
        this.parameters = Optional.ofNullable(parameters)
            .orElseThrow(() -> new IllegalArgumentException("parameters cannot be null"));
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.clientCertificate = clientCertificate;
        this.clientCertificatePath = clientCertificatePath;
        this.properties = properties;
        this.dpop = dpop;
        this.htm = htm;
        this.htu = htu;
        this.accessToken = accessToken;
        this.jwtAtClaims = jwtAtClaims;
    }
    
    public AuthTokenApiRequestBody(
            @Nonnull String parameters) {
        this(parameters, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
     * implementation received from the client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
     * the client application.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * The client ID extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as
     * a means of client authentication, and the request from the client application contained its client ID
     * in `Authorization` header, the value should be extracted and set to this parameter.
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The client certificate from the MTLS of the token request from the client application.
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
     */
    public Optional<String> clientCertificatePath() {
        return Optional.ofNullable(this.clientCertificatePath);
    }

    /**
     * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
     * for details.
     */
    public Optional<String> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * `DPoP` header presented by the client during the request to the token endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> dpop() {
        return Optional.ofNullable(this.dpop);
    }

    /**
     * HTTP method of the token request. This field is used to validate the `DPoP` header.
     * 
     * <p>In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> htm() {
        return Optional.ofNullable(this.htm);
    }

    /**
     * URL of the token endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public Optional<String> htu() {
        return Optional.ofNullable(this.htu);
    }

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public Optional<String> jwtAtClaims() {
        return Optional.ofNullable(this.jwtAtClaims);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
     * implementation received from the client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
     * the client application.
     */
    public AuthTokenApiRequestBody withParameters(@Nonnull String parameters) {
        this.parameters = Utils.checkNotNull(parameters, "parameters");
        return this;
    }


    /**
     * The client ID extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as
     * a means of client authentication, and the request from the client application contained its client ID
     * in `Authorization` header, the value should be extracted and set to this parameter.
     */
    public AuthTokenApiRequestBody withClientId(@Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client secret extracted from `Authorization` header of the token request from the client application.
     * 
     * <p>If the token endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    public AuthTokenApiRequestBody withClientSecret(@Nullable String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }


    /**
     * The client certificate from the MTLS of the token request from the client application.
     */
    public AuthTokenApiRequestBody withClientCertificate(@Nullable String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }


    /**
     * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
     */
    public AuthTokenApiRequestBody withClientCertificatePath(@Nullable String clientCertificatePath) {
        this.clientCertificatePath = clientCertificatePath;
        return this;
    }


    /**
     * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
     * for details.
     */
    public AuthTokenApiRequestBody withProperties(@Nullable String properties) {
        this.properties = properties;
        return this;
    }


    /**
     * `DPoP` header presented by the client during the request to the token endpoint.
     * 
     * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public AuthTokenApiRequestBody withDpop(@Nullable String dpop) {
        this.dpop = dpop;
        return this;
    }


    /**
     * HTTP method of the token request. This field is used to validate the `DPoP` header.
     * 
     * <p>In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public AuthTokenApiRequestBody withHtm(@Nullable String htm) {
        this.htm = htm;
        return this;
    }


    /**
     * URL of the token endpoint. This field is used to validate the `DPoP` header.
     * 
     * <p>If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
     * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
     * for details.
     */
    public AuthTokenApiRequestBody withHtu(@Nullable String htu) {
        this.htu = htu;
        return this;
    }


    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public AuthTokenApiRequestBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public AuthTokenApiRequestBody withJwtAtClaims(@Nullable String jwtAtClaims) {
        this.jwtAtClaims = jwtAtClaims;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenApiRequestBody other = (AuthTokenApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.parameters, other.parameters) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientSecret, other.clientSecret) &&
            Utils.enhancedDeepEquals(this.clientCertificate, other.clientCertificate) &&
            Utils.enhancedDeepEquals(this.clientCertificatePath, other.clientCertificatePath) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.dpop, other.dpop) &&
            Utils.enhancedDeepEquals(this.htm, other.htm) &&
            Utils.enhancedDeepEquals(this.htu, other.htu) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.jwtAtClaims, other.jwtAtClaims);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parameters, clientId, clientSecret,
            clientCertificate, clientCertificatePath, properties,
            dpop, htm, htu,
            accessToken, jwtAtClaims);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenApiRequestBody.class,
                "parameters", parameters,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "clientCertificate", clientCertificate,
                "clientCertificatePath", clientCertificatePath,
                "properties", properties,
                "dpop", dpop,
                "htm", htm,
                "htu", htu,
                "accessToken", accessToken,
                "jwtAtClaims", jwtAtClaims);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String parameters;

        private String clientId;

        private String clientSecret;

        private String clientCertificate;

        private String clientCertificatePath;

        private String properties;

        private String dpop;

        private String htm;

        private String htu;

        private String accessToken;

        private String jwtAtClaims;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * OAuth 2.0 token request parameters which are the request parameters that the OAuth 2.0 token endpoint of the authorization server
         * implementation received from the client application.
         * 
         * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request from
         * the client application.
         */
        public Builder parameters(@Nonnull String parameters) {
            this.parameters = Utils.checkNotNull(parameters, "parameters");
            return this;
        }

        /**
         * The client ID extracted from `Authorization` header of the token request from the client application.
         * 
         * <p>If the token endpoint of the authorization server implementation supports basic authentication as
         * a means of client authentication, and the request from the client application contained its client ID
         * in `Authorization` header, the value should be extracted and set to this parameter.
         */
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client secret extracted from `Authorization` header of the token request from the client application.
         * 
         * <p>If the token endpoint of the authorization server implementation supports basic authentication as a means of
         * client authentication, and the request from the client application contained its client secret in `Authorization` header,
         * the value should be extracted and set to this parameter.
         */
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The client certificate from the MTLS of the token request from the client application.
         */
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * The certificate path presented by the client during client authentication. These certificates are strings in PEM format.
         */
        public Builder clientCertificatePath(@Nullable String clientCertificatePath) {
            this.clientCertificatePath = clientCertificatePath;
            return this;
        }

        /**
         * Extra properties to associate with an access token. See [Extra Properties](https://www.authlete.com/developers/definitive_guide/extra_properties/)
         * for details.
         */
        public Builder properties(@Nullable String properties) {
            this.properties = properties;
            return this;
        }

        /**
         * `DPoP` header presented by the client during the request to the token endpoint.
         * 
         * <p>The header contains a signed JWT which includes the public key that is paired with the private key used to sign the JWT.
         * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder dpop(@Nullable String dpop) {
            this.dpop = dpop;
            return this;
        }

        /**
         * HTTP method of the token request. This field is used to validate the `DPoP` header.
         * 
         * <p>In normal cases, the value is `POST`. When this parameter is omitted, `POST` is used as the default value.
         * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder htm(@Nullable String htm) {
            this.htm = htm;
            return this;
        }

        /**
         * URL of the token endpoint. This field is used to validate the `DPoP` header.
         * 
         * <p>If this parameter is omitted, the `tokenEndpoint` property of the Service is used as the default value.
         * See [OAuth 2.0 Demonstration of Proof-of-Possession at the Application Layer (DPoP)](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-dpop)
         * for details.
         */
        public Builder htu(@Nullable String htu) {
            this.htu = htu;
            return this;
        }

        /**
         * The representation of an access token that may be issued as a result of the Authlete API call.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Additional claims that are added to the payload part of the JWT access token.
         */
        public Builder jwtAtClaims(@Nullable String jwtAtClaims) {
            this.jwtAtClaims = jwtAtClaims;
            return this;
        }

        public AuthTokenApiRequestBody build() {
            return new AuthTokenApiRequestBody(
                parameters, clientId, clientSecret,
                clientCertificate, clientCertificatePath, properties,
                dpop, htm, htu,
                accessToken, jwtAtClaims);
        }

    }
}
