/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthTokenCreateApiRequestBody {
    /**
     * The grant type of the access token when the access token was created.
     */
    @JsonProperty("grantType")
    private AuthTokenCreateApiGrantType grantType;

    /**
     * The ID of the client application which will be associated with a newly created access token.
     */
    @JsonProperty("clientId")
    private long clientId;

    /**
     * The subject (= unique identifier) of the user who will be associated with a newly created access
     * token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
     * consist of only ASCII characters and its length must not exceed 100.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private String subject;

    /**
     * The scopes which will be associated with a newly created access token. Scopes that are not supported
     * by the service cannot be specified and requesting them will cause an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The duration of a newly created access token in seconds. If the value is 0, the duration is determined
     * according to the settings of the service.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenDuration")
    private Long accessTokenDuration;

    /**
     * The duration of a newly created refresh token in seconds. If the value is 0, the duration is
     * determined according to the settings of the service.
     * 
     * <p>A refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the
     * specified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshTokenDuration")
    private Long refreshTokenDuration;

    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter
     * is accepted only when the HTTP method of the request is POST and Content-Type of the request is
     * `application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want
     * to specify properties.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<AuthTokenCreateApiPropertyRequest> properties;

    /**
     * A boolean request parameter which indicates whether to emulate that the client ID alias is used
     * instead of the original numeric client ID when a new access token is created.
     * 
     * <p>This has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
     * When you access the UserInfo endpoint (which is expected to be implemented using Authlete's
     * `/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been
     * created using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)
     * `true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo
     * endpoint.
     * 
     * <p>Note that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`
     * API is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientIdAliasUsed")
    private Boolean clientIdAliasUsed;

    /**
     * The value of the new access token.
     * 
     * <p>The `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not
     * have to specify values of newly created access tokens. However, in some cases, for example, if
     * you want to migrate existing access tokens from an old system to Authlete, you may want to specify
     * values of access tokens. In such a case, you can specify the value of a newly created access token
     * by passing a non-null value as the value of accessToken request parameter. The implementation
     * of the `/api/auth/token/create` uses the value of the accessToken request parameter instead of
     * generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified access token already exists in Authlete's database,
     * the access token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    /**
     * The value of the new refresh token.
     * 
     * <p>The `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do
     * not have to specify values of newly created refresh tokens. However, in some cases, for example,
     * if you want to migrate existing refresh tokens from an old system to Authlete, you may want to
     * specify values of refresh tokens. In such a case, you can specify the value of a newly created
     * refresh token by passing a non-null value as the value of refreshToken request parameter. The
     * implementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter
     * instead of generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified refresh token already exists in Authlete's database,
     * the refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refreshToken")
    private String refreshToken;

    /**
     * Get whether the access token expires or not. By default, all access tokens expire after a period
     * of time determined by their service.
     * 
     * <p>If this request parameter is `true`, then the access token will not automatically expire and must
     * be revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`
     * request parameter is ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessTokenPersistent")
    private Boolean accessTokenPersistent;

    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("certificateThumbprint")
    private String certificateThumbprint;

    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dpopKeyThumbprint")
    private String dpopKeyThumbprint;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthTokenCreateApiAuthorizationDetailsRequest authorizationDetails;

    /**
     * The value of the resources to associate with the token. This property represents the value of
     * one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
     * OAuth 2.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resources")
    private List<String> resources;

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("forExternalAttachment")
    private Boolean forExternalAttachment;

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAtClaims")
    private String jwtAtClaims;

    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acr")
    private String acr;

    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTime")
    private Long authTime;

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientEntityIdUsed")
    private Boolean clientEntityIdUsed;

    @JsonCreator
    public AuthTokenCreateApiRequestBody(
            @JsonProperty("grantType") @Nonnull AuthTokenCreateApiGrantType grantType,
            @JsonProperty("clientId") long clientId,
            @JsonProperty("subject") @Nullable String subject,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("accessTokenDuration") @Nullable Long accessTokenDuration,
            @JsonProperty("refreshTokenDuration") @Nullable Long refreshTokenDuration,
            @JsonProperty("properties") @Nullable List<AuthTokenCreateApiPropertyRequest> properties,
            @JsonProperty("clientIdAliasUsed") @Nullable Boolean clientIdAliasUsed,
            @JsonProperty("accessToken") @Nullable String accessToken,
            @JsonProperty("refreshToken") @Nullable String refreshToken,
            @JsonProperty("accessTokenPersistent") @Nullable Boolean accessTokenPersistent,
            @JsonProperty("certificateThumbprint") @Nullable String certificateThumbprint,
            @JsonProperty("dpopKeyThumbprint") @Nullable String dpopKeyThumbprint,
            @JsonProperty("authorizationDetails") @Nullable AuthTokenCreateApiAuthorizationDetailsRequest authorizationDetails,
            @JsonProperty("resources") @Nullable List<String> resources,
            @JsonProperty("forExternalAttachment") @Nullable Boolean forExternalAttachment,
            @JsonProperty("jwtAtClaims") @Nullable String jwtAtClaims,
            @JsonProperty("acr") @Nullable String acr,
            @JsonProperty("authTime") @Nullable Long authTime,
            @JsonProperty("clientEntityIdUsed") @Nullable Boolean clientEntityIdUsed) {
        this.grantType = Optional.ofNullable(grantType)
            .orElseThrow(() -> new IllegalArgumentException("grantType cannot be null"));
        this.clientId = clientId;
        this.subject = subject;
        this.scopes = scopes;
        this.accessTokenDuration = accessTokenDuration;
        this.refreshTokenDuration = refreshTokenDuration;
        this.properties = properties;
        this.clientIdAliasUsed = clientIdAliasUsed;
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.accessTokenPersistent = accessTokenPersistent;
        this.certificateThumbprint = certificateThumbprint;
        this.dpopKeyThumbprint = dpopKeyThumbprint;
        this.authorizationDetails = authorizationDetails;
        this.resources = resources;
        this.forExternalAttachment = forExternalAttachment;
        this.jwtAtClaims = jwtAtClaims;
        this.acr = acr;
        this.authTime = authTime;
        this.clientEntityIdUsed = clientEntityIdUsed;
    }
    
    public AuthTokenCreateApiRequestBody(
            @Nonnull AuthTokenCreateApiGrantType grantType,
            long clientId) {
        this(grantType, clientId, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthTokenCreateApiGrantType grantType() {
        return this.grantType;
    }

    /**
     * The ID of the client application which will be associated with a newly created access token.
     */
    public long clientId() {
        return this.clientId;
    }

    /**
     * The subject (= unique identifier) of the user who will be associated with a newly created access
     * token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
     * consist of only ASCII characters and its length must not exceed 100.
     */
    public Optional<String> subject() {
        return Optional.ofNullable(this.subject);
    }

    /**
     * The scopes which will be associated with a newly created access token. Scopes that are not supported
     * by the service cannot be specified and requesting them will cause an error.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The duration of a newly created access token in seconds. If the value is 0, the duration is determined
     * according to the settings of the service.
     */
    public Optional<Long> accessTokenDuration() {
        return Optional.ofNullable(this.accessTokenDuration);
    }

    /**
     * The duration of a newly created refresh token in seconds. If the value is 0, the duration is
     * determined according to the settings of the service.
     * 
     * <p>A refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the
     * specified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.
     */
    public Optional<Long> refreshTokenDuration() {
        return Optional.ofNullable(this.refreshTokenDuration);
    }

    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter
     * is accepted only when the HTTP method of the request is POST and Content-Type of the request is
     * `application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want
     * to specify properties.
     */
    public Optional<List<AuthTokenCreateApiPropertyRequest>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * A boolean request parameter which indicates whether to emulate that the client ID alias is used
     * instead of the original numeric client ID when a new access token is created.
     * 
     * <p>This has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
     * When you access the UserInfo endpoint (which is expected to be implemented using Authlete's
     * `/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been
     * created using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)
     * `true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo
     * endpoint.
     * 
     * <p>Note that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`
     * API is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).
     */
    public Optional<Boolean> clientIdAliasUsed() {
        return Optional.ofNullable(this.clientIdAliasUsed);
    }

    /**
     * The value of the new access token.
     * 
     * <p>The `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not
     * have to specify values of newly created access tokens. However, in some cases, for example, if
     * you want to migrate existing access tokens from an old system to Authlete, you may want to specify
     * values of access tokens. In such a case, you can specify the value of a newly created access token
     * by passing a non-null value as the value of accessToken request parameter. The implementation
     * of the `/api/auth/token/create` uses the value of the accessToken request parameter instead of
     * generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified access token already exists in Authlete's database,
     * the access token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    /**
     * The value of the new refresh token.
     * 
     * <p>The `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do
     * not have to specify values of newly created refresh tokens. However, in some cases, for example,
     * if you want to migrate existing refresh tokens from an old system to Authlete, you may want to
     * specify values of refresh tokens. In such a case, you can specify the value of a newly created
     * refresh token by passing a non-null value as the value of refreshToken request parameter. The
     * implementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter
     * instead of generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified refresh token already exists in Authlete's database,
     * the refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    public Optional<String> refreshToken() {
        return Optional.ofNullable(this.refreshToken);
    }

    /**
     * Get whether the access token expires or not. By default, all access tokens expire after a period
     * of time determined by their service.
     * 
     * <p>If this request parameter is `true`, then the access token will not automatically expire and must
     * be revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`
     * request parameter is ignored.
     */
    public Optional<Boolean> accessTokenPersistent() {
        return Optional.ofNullable(this.accessTokenPersistent);
    }

    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    public Optional<String> certificateThumbprint() {
        return Optional.ofNullable(this.certificateThumbprint);
    }

    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    public Optional<String> dpopKeyThumbprint() {
        return Optional.ofNullable(this.dpopKeyThumbprint);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthTokenCreateApiAuthorizationDetailsRequest> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * The value of the resources to associate with the token. This property represents the value of
     * one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
     * OAuth 2.0".
     */
    public Optional<List<String>> resources() {
        return Optional.ofNullable(this.resources);
    }

    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public Optional<Boolean> forExternalAttachment() {
        return Optional.ofNullable(this.forExternalAttachment);
    }

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public Optional<String> jwtAtClaims() {
        return Optional.ofNullable(this.jwtAtClaims);
    }

    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    public Optional<String> acr() {
        return Optional.ofNullable(this.acr);
    }

    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    public Optional<Long> authTime() {
        return Optional.ofNullable(this.authTime);
    }

    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public Optional<Boolean> clientEntityIdUsed() {
        return Optional.ofNullable(this.clientEntityIdUsed);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The grant type of the access token when the access token was created.
     */
    public AuthTokenCreateApiRequestBody withGrantType(@Nonnull AuthTokenCreateApiGrantType grantType) {
        this.grantType = Utils.checkNotNull(grantType, "grantType");
        return this;
    }


    /**
     * The ID of the client application which will be associated with a newly created access token.
     */
    public AuthTokenCreateApiRequestBody withClientId(long clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The subject (= unique identifier) of the user who will be associated with a newly created access
     * token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
     * consist of only ASCII characters and its length must not exceed 100.
     */
    public AuthTokenCreateApiRequestBody withSubject(@Nullable String subject) {
        this.subject = subject;
        return this;
    }


    /**
     * The scopes which will be associated with a newly created access token. Scopes that are not supported
     * by the service cannot be specified and requesting them will cause an error.
     */
    public AuthTokenCreateApiRequestBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The duration of a newly created access token in seconds. If the value is 0, the duration is determined
     * according to the settings of the service.
     */
    public AuthTokenCreateApiRequestBody withAccessTokenDuration(@Nullable Long accessTokenDuration) {
        this.accessTokenDuration = accessTokenDuration;
        return this;
    }


    /**
     * The duration of a newly created refresh token in seconds. If the value is 0, the duration is
     * determined according to the settings of the service.
     * 
     * <p>A refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the
     * specified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.
     */
    public AuthTokenCreateApiRequestBody withRefreshTokenDuration(@Nullable Long refreshTokenDuration) {
        this.refreshTokenDuration = refreshTokenDuration;
        return this;
    }


    /**
     * Extra properties to associate with a newly created access token. Note that properties parameter
     * is accepted only when the HTTP method of the request is POST and Content-Type of the request is
     * `application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want
     * to specify properties.
     */
    public AuthTokenCreateApiRequestBody withProperties(@Nullable List<AuthTokenCreateApiPropertyRequest> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * A boolean request parameter which indicates whether to emulate that the client ID alias is used
     * instead of the original numeric client ID when a new access token is created.
     * 
     * <p>This has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
     * When you access the UserInfo endpoint (which is expected to be implemented using Authlete's
     * `/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been
     * created using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)
     * `true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo
     * endpoint.
     * 
     * <p>Note that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`
     * API is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).
     */
    public AuthTokenCreateApiRequestBody withClientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
        this.clientIdAliasUsed = clientIdAliasUsed;
        return this;
    }


    /**
     * The value of the new access token.
     * 
     * <p>The `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not
     * have to specify values of newly created access tokens. However, in some cases, for example, if
     * you want to migrate existing access tokens from an old system to Authlete, you may want to specify
     * values of access tokens. In such a case, you can specify the value of a newly created access token
     * by passing a non-null value as the value of accessToken request parameter. The implementation
     * of the `/api/auth/token/create` uses the value of the accessToken request parameter instead of
     * generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified access token already exists in Authlete's database,
     * the access token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    public AuthTokenCreateApiRequestBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    /**
     * The value of the new refresh token.
     * 
     * <p>The `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do
     * not have to specify values of newly created refresh tokens. However, in some cases, for example,
     * if you want to migrate existing refresh tokens from an old system to Authlete, you may want to
     * specify values of refresh tokens. In such a case, you can specify the value of a newly created
     * refresh token by passing a non-null value as the value of refreshToken request parameter. The
     * implementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter
     * instead of generating a new value when the request parameter holds a non-null value.
     * 
     * <p>Note that if the hash value of the specified refresh token already exists in Authlete's database,
     * the refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.
     */
    public AuthTokenCreateApiRequestBody withRefreshToken(@Nullable String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }


    /**
     * Get whether the access token expires or not. By default, all access tokens expire after a period
     * of time determined by their service.
     * 
     * <p>If this request parameter is `true`, then the access token will not automatically expire and must
     * be revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`
     * request parameter is ignored.
     */
    public AuthTokenCreateApiRequestBody withAccessTokenPersistent(@Nullable Boolean accessTokenPersistent) {
        this.accessTokenPersistent = accessTokenPersistent;
        return this;
    }


    /**
     * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
     * with the corresponding value MUST be presented with the access token when it is used by a client.
     * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
     */
    public AuthTokenCreateApiRequestBody withCertificateThumbprint(@Nullable String certificateThumbprint) {
        this.certificateThumbprint = certificateThumbprint;
        return this;
    }


    /**
     * The thumbprint of the public key used for DPoP presentation of this token. If this property is
     * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
     * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
     */
    public AuthTokenCreateApiRequestBody withDpopKeyThumbprint(@Nullable String dpopKeyThumbprint) {
        this.dpopKeyThumbprint = dpopKeyThumbprint;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthTokenCreateApiRequestBody withAuthorizationDetails(@Nullable AuthTokenCreateApiAuthorizationDetailsRequest authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * The value of the resources to associate with the token. This property represents the value of
     * one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
     * OAuth 2.0".
     */
    public AuthTokenCreateApiRequestBody withResources(@Nullable List<String> resources) {
        this.resources = resources;
        return this;
    }


    /**
     * the flag which indicates whether the access token is for an external
     * attachment.
     */
    public AuthTokenCreateApiRequestBody withForExternalAttachment(@Nullable Boolean forExternalAttachment) {
        this.forExternalAttachment = forExternalAttachment;
        return this;
    }


    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public AuthTokenCreateApiRequestBody withJwtAtClaims(@Nullable String jwtAtClaims) {
        this.jwtAtClaims = jwtAtClaims;
        return this;
    }


    /**
     * The Authentication Context Class Reference of the user authentication that the authorization server performed 
     * during the course of issuing the access token.
     */
    public AuthTokenCreateApiRequestBody withAcr(@Nullable String acr) {
        this.acr = acr;
        return this;
    }


    /**
     * The time when the user authentication was performed during the course of issuing the access token.
     */
    public AuthTokenCreateApiRequestBody withAuthTime(@Nullable Long authTime) {
        this.authTime = authTime;
        return this;
    }


    /**
     * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
     */
    public AuthTokenCreateApiRequestBody withClientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
        this.clientEntityIdUsed = clientEntityIdUsed;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthTokenCreateApiRequestBody other = (AuthTokenCreateApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.grantType, other.grantType) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.accessTokenDuration, other.accessTokenDuration) &&
            Utils.enhancedDeepEquals(this.refreshTokenDuration, other.refreshTokenDuration) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.clientIdAliasUsed, other.clientIdAliasUsed) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken) &&
            Utils.enhancedDeepEquals(this.refreshToken, other.refreshToken) &&
            Utils.enhancedDeepEquals(this.accessTokenPersistent, other.accessTokenPersistent) &&
            Utils.enhancedDeepEquals(this.certificateThumbprint, other.certificateThumbprint) &&
            Utils.enhancedDeepEquals(this.dpopKeyThumbprint, other.dpopKeyThumbprint) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.resources, other.resources) &&
            Utils.enhancedDeepEquals(this.forExternalAttachment, other.forExternalAttachment) &&
            Utils.enhancedDeepEquals(this.jwtAtClaims, other.jwtAtClaims) &&
            Utils.enhancedDeepEquals(this.acr, other.acr) &&
            Utils.enhancedDeepEquals(this.authTime, other.authTime) &&
            Utils.enhancedDeepEquals(this.clientEntityIdUsed, other.clientEntityIdUsed);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            grantType, clientId, subject,
            scopes, accessTokenDuration, refreshTokenDuration,
            properties, clientIdAliasUsed, accessToken,
            refreshToken, accessTokenPersistent, certificateThumbprint,
            dpopKeyThumbprint, authorizationDetails, resources,
            forExternalAttachment, jwtAtClaims, acr,
            authTime, clientEntityIdUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthTokenCreateApiRequestBody.class,
                "grantType", grantType,
                "clientId", clientId,
                "subject", subject,
                "scopes", scopes,
                "accessTokenDuration", accessTokenDuration,
                "refreshTokenDuration", refreshTokenDuration,
                "properties", properties,
                "clientIdAliasUsed", clientIdAliasUsed,
                "accessToken", accessToken,
                "refreshToken", refreshToken,
                "accessTokenPersistent", accessTokenPersistent,
                "certificateThumbprint", certificateThumbprint,
                "dpopKeyThumbprint", dpopKeyThumbprint,
                "authorizationDetails", authorizationDetails,
                "resources", resources,
                "forExternalAttachment", forExternalAttachment,
                "jwtAtClaims", jwtAtClaims,
                "acr", acr,
                "authTime", authTime,
                "clientEntityIdUsed", clientEntityIdUsed);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private AuthTokenCreateApiGrantType grantType;

        private long clientId;

        private String subject;

        private List<String> scopes;

        private Long accessTokenDuration;

        private Long refreshTokenDuration;

        private List<AuthTokenCreateApiPropertyRequest> properties;

        private Boolean clientIdAliasUsed;

        private String accessToken;

        private String refreshToken;

        private Boolean accessTokenPersistent;

        private String certificateThumbprint;

        private String dpopKeyThumbprint;

        private AuthTokenCreateApiAuthorizationDetailsRequest authorizationDetails;

        private List<String> resources;

        private Boolean forExternalAttachment;

        private String jwtAtClaims;

        private String acr;

        private Long authTime;

        private Boolean clientEntityIdUsed;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The grant type of the access token when the access token was created.
         */
        public Builder grantType(@Nonnull AuthTokenCreateApiGrantType grantType) {
            this.grantType = Utils.checkNotNull(grantType, "grantType");
            return this;
        }

        /**
         * The ID of the client application which will be associated with a newly created access token.
         */
        public Builder clientId(long clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The subject (= unique identifier) of the user who will be associated with a newly created access
         * token. This parameter is required unless the grant type is `CLIENT_CREDENTIALS`. The value must
         * consist of only ASCII characters and its length must not exceed 100.
         */
        public Builder subject(@Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * The scopes which will be associated with a newly created access token. Scopes that are not supported
         * by the service cannot be specified and requesting them will cause an error.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The duration of a newly created access token in seconds. If the value is 0, the duration is determined
         * according to the settings of the service.
         */
        public Builder accessTokenDuration(@Nullable Long accessTokenDuration) {
            this.accessTokenDuration = accessTokenDuration;
            return this;
        }

        /**
         * The duration of a newly created refresh token in seconds. If the value is 0, the duration is
         * determined according to the settings of the service.
         * 
         * <p>A refresh token is not created (1) if the service does not support `REFRESH_TOKEN`, or (2) if the
         * specified grant type is either `IMPLICIT`or `CLIENT_CREDENTIALS`.
         */
        public Builder refreshTokenDuration(@Nullable Long refreshTokenDuration) {
            this.refreshTokenDuration = refreshTokenDuration;
            return this;
        }

        /**
         * Extra properties to associate with a newly created access token. Note that properties parameter
         * is accepted only when the HTTP method of the request is POST and Content-Type of the request is
         * `application/json`, so don't use `GET` method or `application/x-www-form-urlencoded` if you want
         * to specify properties.
         */
        public Builder properties(@Nullable List<AuthTokenCreateApiPropertyRequest> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * A boolean request parameter which indicates whether to emulate that the client ID alias is used
         * instead of the original numeric client ID when a new access token is created.
         * 
         * <p>This has an effect only on the value of the aud claim in a response from [UserInfo endpoint](https://openid.net/specs/openid-connect-core-1_0.html#UserInfo).
         * When you access the UserInfo endpoint (which is expected to be implemented using Authlete's
         * `/api/auth/userinfo` API and `/api/auth/userinfo/issue` API) with an access token which has been
         * created using Authlete's `/api/auth/token/create` API with this property (`clientIdAliasUsed`)
         * `true`, the client ID alias is used as the value of the aud claim in a response from the UserInfo
         * endpoint.
         * 
         * <p>Note that if a client ID alias is not assigned to the client when Authlete's `/api/auth/token/create`
         * API is called, this property (`clientIdAliasUsed`) has no effect (it is always regarded as `false`).
         */
        public Builder clientIdAliasUsed(@Nullable Boolean clientIdAliasUsed) {
            this.clientIdAliasUsed = clientIdAliasUsed;
            return this;
        }

        /**
         * The value of the new access token.
         * 
         * <p>The `/api/auth/token/create` API generates an access token. Therefore, callers of the API do not
         * have to specify values of newly created access tokens. However, in some cases, for example, if
         * you want to migrate existing access tokens from an old system to Authlete, you may want to specify
         * values of access tokens. In such a case, you can specify the value of a newly created access token
         * by passing a non-null value as the value of accessToken request parameter. The implementation
         * of the `/api/auth/token/create` uses the value of the accessToken request parameter instead of
         * generating a new value when the request parameter holds a non-null value.
         * 
         * <p>Note that if the hash value of the specified access token already exists in Authlete's database,
         * the access token cannot be inserted and the `/api/auth/token/create` API will report an error.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The value of the new refresh token.
         * 
         * <p>The `/api/auth/token/create` API may generate a refresh token. Therefore, callers of the API do
         * not have to specify values of newly created refresh tokens. However, in some cases, for example,
         * if you want to migrate existing refresh tokens from an old system to Authlete, you may want to
         * specify values of refresh tokens. In such a case, you can specify the value of a newly created
         * refresh token by passing a non-null value as the value of refreshToken request parameter. The
         * implementation of the `/api/auth/token/create` uses the value of the refreshToken request parameter
         * instead of generating a new value when the request parameter holds a non-null value.
         * 
         * <p>Note that if the hash value of the specified refresh token already exists in Authlete's database,
         * the refresh token cannot be inserted and the `/api/auth/token/create` API will report an error.
         */
        public Builder refreshToken(@Nullable String refreshToken) {
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Get whether the access token expires or not. By default, all access tokens expire after a period
         * of time determined by their service.
         * 
         * <p>If this request parameter is `true`, then the access token will not automatically expire and must
         * be revoked or deleted manually at the service. If this request parameter is true, the `accessTokenDuration`
         * request parameter is ignored.
         */
        public Builder accessTokenPersistent(@Nullable Boolean accessTokenPersistent) {
            this.accessTokenPersistent = accessTokenPersistent;
            return this;
        }

        /**
         * The thumbprint of the MTLS certificate bound to this token. If this property is set, a certificate
         * with the corresponding value MUST be presented with the access token when it is used by a client.
         * The value of this property must be a SHA256 certificate thumbprint, base64url encoded.
         */
        public Builder certificateThumbprint(@Nullable String certificateThumbprint) {
            this.certificateThumbprint = certificateThumbprint;
            return this;
        }

        /**
         * The thumbprint of the public key used for DPoP presentation of this token. If this property is
         * set, a DPoP proof signed with the corresponding private key MUST be presented with the access
         * token when it is used by a client. Additionally, the token's `token_type` will be set to 'DPoP'.
         */
        public Builder dpopKeyThumbprint(@Nullable String dpopKeyThumbprint) {
            this.dpopKeyThumbprint = dpopKeyThumbprint;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthTokenCreateApiAuthorizationDetailsRequest authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * The value of the resources to associate with the token. This property represents the value of
         * one or more `resource` request parameters which is defined in "RFC8707 Resource Indicators for
         * OAuth 2.0".
         */
        public Builder resources(@Nullable List<String> resources) {
            this.resources = resources;
            return this;
        }

        /**
         * the flag which indicates whether the access token is for an external
         * attachment.
         */
        public Builder forExternalAttachment(@Nullable Boolean forExternalAttachment) {
            this.forExternalAttachment = forExternalAttachment;
            return this;
        }

        /**
         * Additional claims that are added to the payload part of the JWT access token.
         */
        public Builder jwtAtClaims(@Nullable String jwtAtClaims) {
            this.jwtAtClaims = jwtAtClaims;
            return this;
        }

        /**
         * The Authentication Context Class Reference of the user authentication that the authorization server performed 
         * during the course of issuing the access token.
         */
        public Builder acr(@Nullable String acr) {
            this.acr = acr;
            return this;
        }

        /**
         * The time when the user authentication was performed during the course of issuing the access token.
         */
        public Builder authTime(@Nullable Long authTime) {
            this.authTime = authTime;
            return this;
        }

        /**
         * Flag which indicates whether the entity ID of the client was used when the request for the access token was made.
         */
        public Builder clientEntityIdUsed(@Nullable Boolean clientEntityIdUsed) {
            this.clientEntityIdUsed = clientEntityIdUsed;
            return this;
        }

        public AuthTokenCreateApiRequestBody build() {
            return new AuthTokenCreateApiRequestBody(
                grantType, clientId, subject,
                scopes, accessTokenDuration, refreshTokenDuration,
                properties, clientIdAliasUsed, accessToken,
                refreshToken, accessTokenPersistent, certificateThumbprint,
                dpopKeyThumbprint, authorizationDetails, resources,
                forExternalAttachment, jwtAtClaims, acr,
                authTime, clientEntityIdUsed);
        }

    }
}
