/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.AuthorizationDetails;
import org.openapis.openapi.models.components.Property;
import org.openapis.openapi.utils.Utils;


public class AuthAuthorizationIssueApiRequestBody {
    /**
     * The ticket issued from Authlete `/auth/authorization` API.
     */
    @JsonProperty("ticket")
    private String ticket;

    /**
     * The subject (= a user account managed by the service) who has granted authorization to the client application.
     */
    @JsonProperty("subject")
    private String subject;

    /**
     * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authTime")
    private Long authTime;

    /**
     * The Authentication Context Class Reference performed for the end-user authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("acr")
    private String acr;

    /**
     * The claims of the end-user (= pieces of information about the end-user) in JSON format.
     * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private String claims;

    /**
     * Extra properties to associate with an access token and/or an authorization code.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("properties")
    private List<Property> properties;

    /**
     * Scopes to associate with an access token and/or an authorization code.
     * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private List<String> scopes;

    /**
     * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
     * the value of the `subject` request parameter is used as the value of the `sub` claim.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub")
    private String sub;

    /**
     * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
     * the authorization request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("idtHeaderParams")
    private String idtHeaderParams;

    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claimsForTx")
    private String claimsForTx;

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consentedClaims")
    private List<String> consentedClaims;

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorizationDetails")
    private AuthorizationDetails authorizationDetails;

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwtAtClaims")
    private String jwtAtClaims;

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accessToken")
    private String accessToken;

    @JsonCreator
    public AuthAuthorizationIssueApiRequestBody(
            @JsonProperty("ticket") @Nonnull String ticket,
            @JsonProperty("subject") @Nonnull String subject,
            @JsonProperty("authTime") @Nullable Long authTime,
            @JsonProperty("acr") @Nullable String acr,
            @JsonProperty("claims") @Nullable String claims,
            @JsonProperty("properties") @Nullable List<Property> properties,
            @JsonProperty("scopes") @Nullable List<String> scopes,
            @JsonProperty("sub") @Nullable String sub,
            @JsonProperty("idtHeaderParams") @Nullable String idtHeaderParams,
            @JsonProperty("claimsForTx") @Nullable String claimsForTx,
            @JsonProperty("consentedClaims") @Nullable List<String> consentedClaims,
            @JsonProperty("authorizationDetails") @Nullable AuthorizationDetails authorizationDetails,
            @JsonProperty("jwtAtClaims") @Nullable String jwtAtClaims,
            @JsonProperty("accessToken") @Nullable String accessToken) {
        this.ticket = Optional.ofNullable(ticket)
            .orElseThrow(() -> new IllegalArgumentException("ticket cannot be null"));
        this.subject = Optional.ofNullable(subject)
            .orElseThrow(() -> new IllegalArgumentException("subject cannot be null"));
        this.authTime = authTime;
        this.acr = acr;
        this.claims = claims;
        this.properties = properties;
        this.scopes = scopes;
        this.sub = sub;
        this.idtHeaderParams = idtHeaderParams;
        this.claimsForTx = claimsForTx;
        this.consentedClaims = consentedClaims;
        this.authorizationDetails = authorizationDetails;
        this.jwtAtClaims = jwtAtClaims;
        this.accessToken = accessToken;
    }
    
    public AuthAuthorizationIssueApiRequestBody(
            @Nonnull String ticket,
            @Nonnull String subject) {
        this(ticket, subject, null,
            null, null, null,
            null, null, null,
            null, null, null,
            null, null);
    }

    /**
     * The ticket issued from Authlete `/auth/authorization` API.
     */
    public String ticket() {
        return this.ticket;
    }

    /**
     * The subject (= a user account managed by the service) who has granted authorization to the client application.
     */
    public String subject() {
        return this.subject;
    }

    /**
     * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
     */
    public Optional<Long> authTime() {
        return Optional.ofNullable(this.authTime);
    }

    /**
     * The Authentication Context Class Reference performed for the end-user authentication.
     */
    public Optional<String> acr() {
        return Optional.ofNullable(this.acr);
    }

    /**
     * The claims of the end-user (= pieces of information about the end-user) in JSON format.
     * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
     */
    public Optional<String> claims() {
        return Optional.ofNullable(this.claims);
    }

    /**
     * Extra properties to associate with an access token and/or an authorization code.
     */
    public Optional<List<Property>> properties() {
        return Optional.ofNullable(this.properties);
    }

    /**
     * Scopes to associate with an access token and/or an authorization code.
     * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
     */
    public Optional<List<String>> scopes() {
        return Optional.ofNullable(this.scopes);
    }

    /**
     * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
     * the value of the `subject` request parameter is used as the value of the `sub` claim.
     */
    public Optional<String> sub() {
        return Optional.ofNullable(this.sub);
    }

    /**
     * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
     * the authorization request.
     */
    public Optional<String> idtHeaderParams() {
        return Optional.ofNullable(this.idtHeaderParams);
    }

    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    public Optional<String> claimsForTx() {
        return Optional.ofNullable(this.claimsForTx);
    }

    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public Optional<List<String>> consentedClaims() {
        return Optional.ofNullable(this.consentedClaims);
    }

    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public Optional<AuthorizationDetails> authorizationDetails() {
        return Optional.ofNullable(this.authorizationDetails);
    }

    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public Optional<String> jwtAtClaims() {
        return Optional.ofNullable(this.jwtAtClaims);
    }

    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public Optional<String> accessToken() {
        return Optional.ofNullable(this.accessToken);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The ticket issued from Authlete `/auth/authorization` API.
     */
    public AuthAuthorizationIssueApiRequestBody withTicket(@Nonnull String ticket) {
        this.ticket = Utils.checkNotNull(ticket, "ticket");
        return this;
    }


    /**
     * The subject (= a user account managed by the service) who has granted authorization to the client application.
     */
    public AuthAuthorizationIssueApiRequestBody withSubject(@Nonnull String subject) {
        this.subject = Utils.checkNotNull(subject, "subject");
        return this;
    }


    /**
     * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
     */
    public AuthAuthorizationIssueApiRequestBody withAuthTime(@Nullable Long authTime) {
        this.authTime = authTime;
        return this;
    }


    /**
     * The Authentication Context Class Reference performed for the end-user authentication.
     */
    public AuthAuthorizationIssueApiRequestBody withAcr(@Nullable String acr) {
        this.acr = acr;
        return this;
    }


    /**
     * The claims of the end-user (= pieces of information about the end-user) in JSON format.
     * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
     */
    public AuthAuthorizationIssueApiRequestBody withClaims(@Nullable String claims) {
        this.claims = claims;
        return this;
    }


    /**
     * Extra properties to associate with an access token and/or an authorization code.
     */
    public AuthAuthorizationIssueApiRequestBody withProperties(@Nullable List<Property> properties) {
        this.properties = properties;
        return this;
    }


    /**
     * Scopes to associate with an access token and/or an authorization code.
     * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
     */
    public AuthAuthorizationIssueApiRequestBody withScopes(@Nullable List<String> scopes) {
        this.scopes = scopes;
        return this;
    }


    /**
     * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
     * the value of the `subject` request parameter is used as the value of the `sub` claim.
     */
    public AuthAuthorizationIssueApiRequestBody withSub(@Nullable String sub) {
        this.sub = sub;
        return this;
    }


    /**
     * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
     * the authorization request.
     */
    public AuthAuthorizationIssueApiRequestBody withIdtHeaderParams(@Nullable String idtHeaderParams) {
        this.idtHeaderParams = idtHeaderParams;
        return this;
    }


    /**
     * Claim key-value pairs that are used to compute transformed claims.
     */
    public AuthAuthorizationIssueApiRequestBody withClaimsForTx(@Nullable String claimsForTx) {
        this.claimsForTx = claimsForTx;
        return this;
    }


    /**
     * the claims that the user has consented for the client application
     * to know.
     */
    public AuthAuthorizationIssueApiRequestBody withConsentedClaims(@Nullable List<String> consentedClaims) {
        this.consentedClaims = consentedClaims;
        return this;
    }


    /**
     * The authorization details. This represents the value of the `authorization_details`
     * request parameter in the preceding device authorization request which is defined in
     * "OAuth 2.0 Rich Authorization Requests".
     */
    public AuthAuthorizationIssueApiRequestBody withAuthorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
        this.authorizationDetails = authorizationDetails;
        return this;
    }


    /**
     * Additional claims that are added to the payload part of the JWT access token.
     */
    public AuthAuthorizationIssueApiRequestBody withJwtAtClaims(@Nullable String jwtAtClaims) {
        this.jwtAtClaims = jwtAtClaims;
        return this;
    }


    /**
     * The representation of an access token that may be issued as a result of the Authlete API call.
     */
    public AuthAuthorizationIssueApiRequestBody withAccessToken(@Nullable String accessToken) {
        this.accessToken = accessToken;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthAuthorizationIssueApiRequestBody other = (AuthAuthorizationIssueApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.ticket, other.ticket) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.authTime, other.authTime) &&
            Utils.enhancedDeepEquals(this.acr, other.acr) &&
            Utils.enhancedDeepEquals(this.claims, other.claims) &&
            Utils.enhancedDeepEquals(this.properties, other.properties) &&
            Utils.enhancedDeepEquals(this.scopes, other.scopes) &&
            Utils.enhancedDeepEquals(this.sub, other.sub) &&
            Utils.enhancedDeepEquals(this.idtHeaderParams, other.idtHeaderParams) &&
            Utils.enhancedDeepEquals(this.claimsForTx, other.claimsForTx) &&
            Utils.enhancedDeepEquals(this.consentedClaims, other.consentedClaims) &&
            Utils.enhancedDeepEquals(this.authorizationDetails, other.authorizationDetails) &&
            Utils.enhancedDeepEquals(this.jwtAtClaims, other.jwtAtClaims) &&
            Utils.enhancedDeepEquals(this.accessToken, other.accessToken);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            ticket, subject, authTime,
            acr, claims, properties,
            scopes, sub, idtHeaderParams,
            claimsForTx, consentedClaims, authorizationDetails,
            jwtAtClaims, accessToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthAuthorizationIssueApiRequestBody.class,
                "ticket", ticket,
                "subject", subject,
                "authTime", authTime,
                "acr", acr,
                "claims", claims,
                "properties", properties,
                "scopes", scopes,
                "sub", sub,
                "idtHeaderParams", idtHeaderParams,
                "claimsForTx", claimsForTx,
                "consentedClaims", consentedClaims,
                "authorizationDetails", authorizationDetails,
                "jwtAtClaims", jwtAtClaims,
                "accessToken", accessToken);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String ticket;

        private String subject;

        private Long authTime;

        private String acr;

        private String claims;

        private List<Property> properties;

        private List<String> scopes;

        private String sub;

        private String idtHeaderParams;

        private String claimsForTx;

        private List<String> consentedClaims;

        private AuthorizationDetails authorizationDetails;

        private String jwtAtClaims;

        private String accessToken;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ticket issued from Authlete `/auth/authorization` API.
         */
        public Builder ticket(@Nonnull String ticket) {
            this.ticket = Utils.checkNotNull(ticket, "ticket");
            return this;
        }

        /**
         * The subject (= a user account managed by the service) who has granted authorization to the client application.
         */
        public Builder subject(@Nonnull String subject) {
            this.subject = Utils.checkNotNull(subject, "subject");
            return this;
        }

        /**
         * The time when the authentication of the end-user occurred. Its value is the number of seconds from `1970-01-01`.
         */
        public Builder authTime(@Nullable Long authTime) {
            this.authTime = authTime;
            return this;
        }

        /**
         * The Authentication Context Class Reference performed for the end-user authentication.
         */
        public Builder acr(@Nullable String acr) {
            this.acr = acr;
            return this;
        }

        /**
         * The claims of the end-user (= pieces of information about the end-user) in JSON format.
         * See [OpenID Connect Core 1.0, 5.1. Standard Claims](https://openid.net/specs/openid-connect-core-1_0.html#StandardClaims) for details about the format.
         */
        public Builder claims(@Nullable String claims) {
            this.claims = claims;
            return this;
        }

        /**
         * Extra properties to associate with an access token and/or an authorization code.
         */
        public Builder properties(@Nullable List<Property> properties) {
            this.properties = properties;
            return this;
        }

        /**
         * Scopes to associate with an access token and/or an authorization code.
         * If a non-empty string array is given, it replaces the scopes specified by the original authorization request.
         */
        public Builder scopes(@Nullable List<String> scopes) {
            this.scopes = scopes;
            return this;
        }

        /**
         * The value of the `sub` claim to embed in an ID token. If this request parameter is `null` or empty,
         * the value of the `subject` request parameter is used as the value of the `sub` claim.
         */
        public Builder sub(@Nullable String sub) {
            this.sub = sub;
            return this;
        }

        /**
         * JSON that represents additional JWS header parameters for ID tokens that may be issued based on
         * the authorization request.
         */
        public Builder idtHeaderParams(@Nullable String idtHeaderParams) {
            this.idtHeaderParams = idtHeaderParams;
            return this;
        }

        /**
         * Claim key-value pairs that are used to compute transformed claims.
         */
        public Builder claimsForTx(@Nullable String claimsForTx) {
            this.claimsForTx = claimsForTx;
            return this;
        }

        /**
         * the claims that the user has consented for the client application
         * to know.
         */
        public Builder consentedClaims(@Nullable List<String> consentedClaims) {
            this.consentedClaims = consentedClaims;
            return this;
        }

        /**
         * The authorization details. This represents the value of the `authorization_details`
         * request parameter in the preceding device authorization request which is defined in
         * "OAuth 2.0 Rich Authorization Requests".
         */
        public Builder authorizationDetails(@Nullable AuthorizationDetails authorizationDetails) {
            this.authorizationDetails = authorizationDetails;
            return this;
        }

        /**
         * Additional claims that are added to the payload part of the JWT access token.
         */
        public Builder jwtAtClaims(@Nullable String jwtAtClaims) {
            this.jwtAtClaims = jwtAtClaims;
            return this;
        }

        /**
         * The representation of an access token that may be issued as a result of the Authlete API call.
         */
        public Builder accessToken(@Nullable String accessToken) {
            this.accessToken = accessToken;
            return this;
        }

        public AuthAuthorizationIssueApiRequestBody build() {
            return new AuthAuthorizationIssueApiRequestBody(
                ticket, subject, authTime,
                acr, claims, properties,
                scopes, sub, idtHeaderParams,
                claimsForTx, consentedClaims, authorizationDetails,
                jwtAtClaims, accessToken);
        }

    }
}
