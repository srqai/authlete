/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class ServiceJwksGetApiRequest {
    /**
     * A service ID.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=serviceId")
    private String serviceId;

    /**
     * The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=includePrivateKeys")
    private Boolean includePrivateKeys;

    /**
     * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=pretty")
    private Boolean pretty;

    @JsonCreator
    public ServiceJwksGetApiRequest(
            @Nonnull String serviceId,
            @Nullable Boolean includePrivateKeys,
            @Nullable Boolean pretty) {
        this.serviceId = Optional.ofNullable(serviceId)
            .orElseThrow(() -> new IllegalArgumentException("serviceId cannot be null"));
        this.includePrivateKeys = includePrivateKeys;
        this.pretty = pretty;
    }
    
    public ServiceJwksGetApiRequest(
            @Nonnull String serviceId) {
        this(serviceId, null, null);
    }

    /**
     * A service ID.
     */
    public String serviceId() {
        return this.serviceId;
    }

    /**
     * The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.
     */
    public Optional<Boolean> includePrivateKeys() {
        return Optional.ofNullable(this.includePrivateKeys);
    }

    /**
     * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
     */
    public Optional<Boolean> pretty() {
        return Optional.ofNullable(this.pretty);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * A service ID.
     */
    public ServiceJwksGetApiRequest withServiceId(@Nonnull String serviceId) {
        this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
        return this;
    }


    /**
     * The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.
     */
    public ServiceJwksGetApiRequest withIncludePrivateKeys(@Nullable Boolean includePrivateKeys) {
        this.includePrivateKeys = includePrivateKeys;
        return this;
    }


    /**
     * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
     */
    public ServiceJwksGetApiRequest withPretty(@Nullable Boolean pretty) {
        this.pretty = pretty;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ServiceJwksGetApiRequest other = (ServiceJwksGetApiRequest) o;
        return 
            Utils.enhancedDeepEquals(this.serviceId, other.serviceId) &&
            Utils.enhancedDeepEquals(this.includePrivateKeys, other.includePrivateKeys) &&
            Utils.enhancedDeepEquals(this.pretty, other.pretty);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            serviceId, includePrivateKeys, pretty);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ServiceJwksGetApiRequest.class,
                "serviceId", serviceId,
                "includePrivateKeys", includePrivateKeys,
                "pretty", pretty);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String serviceId;

        private Boolean includePrivateKeys;

        private Boolean pretty;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * A service ID.
         */
        public Builder serviceId(@Nonnull String serviceId) {
            this.serviceId = Utils.checkNotNull(serviceId, "serviceId");
            return this;
        }

        /**
         * The boolean value that indicates whether the response should include the private keys associated with the service or not. If `true`, the private keys are included in the response. The default value is `false`.
         */
        public Builder includePrivateKeys(@Nullable Boolean includePrivateKeys) {
            this.includePrivateKeys = includePrivateKeys;
            return this;
        }

        /**
         * This boolean value indicates whether the JSON in the response should be formatted or not. If `true`, the JSON in the response is pretty-formatted. The default value is `false`.
         */
        public Builder pretty(@Nullable Boolean pretty) {
            this.pretty = pretty;
            return this;
        }

        public ServiceJwksGetApiRequest build() {
            return new ServiceJwksGetApiRequest(
                serviceId, includePrivateKeys, pretty);
        }

    }
}
