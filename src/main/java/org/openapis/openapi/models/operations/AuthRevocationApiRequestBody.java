/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class AuthRevocationApiRequestBody {
    /**
     * OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
     * ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
     * client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
     * from the client application.
     */
    @JsonProperty("parameters")
    private String parameters;

    /**
     * The client ID extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports Basic Authentication
     * as a means of client authentication, and the request from the client application contains its client ID in
     * `Authorization` header, the value should be extracted and set to this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientId")
    private String clientId;

    /**
     * The client secret extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientSecret")
    private String clientSecret;

    /**
     * The client certificate used in the TLS connection between the client application and the revocation endpoint.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificate")
    private String clientCertificate;

    /**
     * The certificate path presented by the client during client authentication.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("clientCertificatePath")
    private String clientCertificatePath;

    @JsonCreator
    public AuthRevocationApiRequestBody(
            @JsonProperty("parameters") @Nonnull String parameters,
            @JsonProperty("clientId") @Nullable String clientId,
            @JsonProperty("clientSecret") @Nullable String clientSecret,
            @JsonProperty("clientCertificate") @Nullable String clientCertificate,
            @JsonProperty("clientCertificatePath") @Nullable String clientCertificatePath) {
        this.parameters = Optional.ofNullable(parameters)
            .orElseThrow(() -> new IllegalArgumentException("parameters cannot be null"));
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.clientCertificate = clientCertificate;
        this.clientCertificatePath = clientCertificatePath;
    }
    
    public AuthRevocationApiRequestBody(
            @Nonnull String parameters) {
        this(parameters, null, null,
            null, null);
    }

    /**
     * OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
     * ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
     * client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
     * from the client application.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * The client ID extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports Basic Authentication
     * as a means of client authentication, and the request from the client application contains its client ID in
     * `Authorization` header, the value should be extracted and set to this parameter.
     */
    public Optional<String> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The client secret extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    public Optional<String> clientSecret() {
        return Optional.ofNullable(this.clientSecret);
    }

    /**
     * The client certificate used in the TLS connection between the client application and the revocation endpoint.
     */
    public Optional<String> clientCertificate() {
        return Optional.ofNullable(this.clientCertificate);
    }

    /**
     * The certificate path presented by the client during client authentication.
     */
    public Optional<String> clientCertificatePath() {
        return Optional.ofNullable(this.clientCertificatePath);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
     * ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
     * client application.
     * 
     * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
     * from the client application.
     */
    public AuthRevocationApiRequestBody withParameters(@Nonnull String parameters) {
        this.parameters = Utils.checkNotNull(parameters, "parameters");
        return this;
    }


    /**
     * The client ID extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports Basic Authentication
     * as a means of client authentication, and the request from the client application contains its client ID in
     * `Authorization` header, the value should be extracted and set to this parameter.
     */
    public AuthRevocationApiRequestBody withClientId(@Nullable String clientId) {
        this.clientId = clientId;
        return this;
    }


    /**
     * The client secret extracted from `Authorization` header of the revocation request from the client application.
     * 
     * <p>If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
     * client authentication, and the request from the client application contained its client secret in `Authorization` header,
     * the value should be extracted and set to this parameter.
     */
    public AuthRevocationApiRequestBody withClientSecret(@Nullable String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }


    /**
     * The client certificate used in the TLS connection between the client application and the revocation endpoint.
     */
    public AuthRevocationApiRequestBody withClientCertificate(@Nullable String clientCertificate) {
        this.clientCertificate = clientCertificate;
        return this;
    }


    /**
     * The certificate path presented by the client during client authentication.
     */
    public AuthRevocationApiRequestBody withClientCertificatePath(@Nullable String clientCertificatePath) {
        this.clientCertificatePath = clientCertificatePath;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AuthRevocationApiRequestBody other = (AuthRevocationApiRequestBody) o;
        return 
            Utils.enhancedDeepEquals(this.parameters, other.parameters) &&
            Utils.enhancedDeepEquals(this.clientId, other.clientId) &&
            Utils.enhancedDeepEquals(this.clientSecret, other.clientSecret) &&
            Utils.enhancedDeepEquals(this.clientCertificate, other.clientCertificate) &&
            Utils.enhancedDeepEquals(this.clientCertificatePath, other.clientCertificatePath);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            parameters, clientId, clientSecret,
            clientCertificate, clientCertificatePath);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AuthRevocationApiRequestBody.class,
                "parameters", parameters,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "clientCertificate", clientCertificate,
                "clientCertificatePath", clientCertificatePath);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String parameters;

        private String clientId;

        private String clientSecret;

        private String clientCertificate;

        private String clientCertificatePath;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * OAuth 2.0 token revocation request parameters which are the request parameters that the OAuth 2.0 token revocation endpoint
         * ([RFC 7009](https://datatracker.ietf.org/doc/html/rfc7009)) of the authorization server implementation received from the
         * client application.
         * 
         * <p>The value of parameters is the entire entity body (which is formatted in `application/x-www-form-urlencoded`) of the request
         * from the client application.
         */
        public Builder parameters(@Nonnull String parameters) {
            this.parameters = Utils.checkNotNull(parameters, "parameters");
            return this;
        }

        /**
         * The client ID extracted from `Authorization` header of the revocation request from the client application.
         * 
         * <p>If the revocation endpoint of the authorization server implementation supports Basic Authentication
         * as a means of client authentication, and the request from the client application contains its client ID in
         * `Authorization` header, the value should be extracted and set to this parameter.
         */
        public Builder clientId(@Nullable String clientId) {
            this.clientId = clientId;
            return this;
        }

        /**
         * The client secret extracted from `Authorization` header of the revocation request from the client application.
         * 
         * <p>If the revocation endpoint of the authorization server implementation supports basic authentication as a means of
         * client authentication, and the request from the client application contained its client secret in `Authorization` header,
         * the value should be extracted and set to this parameter.
         */
        public Builder clientSecret(@Nullable String clientSecret) {
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The client certificate used in the TLS connection between the client application and the revocation endpoint.
         */
        public Builder clientCertificate(@Nullable String clientCertificate) {
            this.clientCertificate = clientCertificate;
            return this;
        }

        /**
         * The certificate path presented by the client during client authentication.
         */
        public Builder clientCertificatePath(@Nullable String clientCertificatePath) {
            this.clientCertificatePath = clientCertificatePath;
            return this;
        }

        public AuthRevocationApiRequestBody build() {
            return new AuthRevocationApiRequestBody(
                parameters, clientId, clientSecret,
                clientCertificate, clientCertificatePath);
        }

    }
}
