/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import jakarta.annotation.Nullable;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class VciBatchIssueApiOrder {
    /**
     * The identifier of a credential request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requestIdentifier")
    private String requestIdentifier;

    /**
     * The additional payload that will be added into a credential to be issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialPayload")
    private String credentialPayload;

    /**
     * The flag indicating whether to defer credential issuance.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("issuanceDeferred")
    private Boolean issuanceDeferred;

    /**
     * The duration of a credential to be issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("credentialDuration")
    private Long credentialDuration;

    /**
     * The key ID of a private key that should be used for signing a credential
     * to be issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signingKeyId")
    private String signingKeyId;

    @JsonCreator
    public VciBatchIssueApiOrder(
            @JsonProperty("requestIdentifier") @Nullable String requestIdentifier,
            @JsonProperty("credentialPayload") @Nullable String credentialPayload,
            @JsonProperty("issuanceDeferred") @Nullable Boolean issuanceDeferred,
            @JsonProperty("credentialDuration") @Nullable Long credentialDuration,
            @JsonProperty("signingKeyId") @Nullable String signingKeyId) {
        this.requestIdentifier = requestIdentifier;
        this.credentialPayload = credentialPayload;
        this.issuanceDeferred = issuanceDeferred;
        this.credentialDuration = credentialDuration;
        this.signingKeyId = signingKeyId;
    }
    
    public VciBatchIssueApiOrder() {
        this(null, null, null,
            null, null);
    }

    /**
     * The identifier of a credential request.
     */
    public Optional<String> requestIdentifier() {
        return Optional.ofNullable(this.requestIdentifier);
    }

    /**
     * The additional payload that will be added into a credential to be issued.
     */
    public Optional<String> credentialPayload() {
        return Optional.ofNullable(this.credentialPayload);
    }

    /**
     * The flag indicating whether to defer credential issuance.
     */
    public Optional<Boolean> issuanceDeferred() {
        return Optional.ofNullable(this.issuanceDeferred);
    }

    /**
     * The duration of a credential to be issued.
     */
    public Optional<Long> credentialDuration() {
        return Optional.ofNullable(this.credentialDuration);
    }

    /**
     * The key ID of a private key that should be used for signing a credential
     * to be issued.
     */
    public Optional<String> signingKeyId() {
        return Optional.ofNullable(this.signingKeyId);
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The identifier of a credential request.
     */
    public VciBatchIssueApiOrder withRequestIdentifier(@Nullable String requestIdentifier) {
        this.requestIdentifier = requestIdentifier;
        return this;
    }


    /**
     * The additional payload that will be added into a credential to be issued.
     */
    public VciBatchIssueApiOrder withCredentialPayload(@Nullable String credentialPayload) {
        this.credentialPayload = credentialPayload;
        return this;
    }


    /**
     * The flag indicating whether to defer credential issuance.
     */
    public VciBatchIssueApiOrder withIssuanceDeferred(@Nullable Boolean issuanceDeferred) {
        this.issuanceDeferred = issuanceDeferred;
        return this;
    }


    /**
     * The duration of a credential to be issued.
     */
    public VciBatchIssueApiOrder withCredentialDuration(@Nullable Long credentialDuration) {
        this.credentialDuration = credentialDuration;
        return this;
    }


    /**
     * The key ID of a private key that should be used for signing a credential
     * to be issued.
     */
    public VciBatchIssueApiOrder withSigningKeyId(@Nullable String signingKeyId) {
        this.signingKeyId = signingKeyId;
        return this;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VciBatchIssueApiOrder other = (VciBatchIssueApiOrder) o;
        return 
            Utils.enhancedDeepEquals(this.requestIdentifier, other.requestIdentifier) &&
            Utils.enhancedDeepEquals(this.credentialPayload, other.credentialPayload) &&
            Utils.enhancedDeepEquals(this.issuanceDeferred, other.issuanceDeferred) &&
            Utils.enhancedDeepEquals(this.credentialDuration, other.credentialDuration) &&
            Utils.enhancedDeepEquals(this.signingKeyId, other.signingKeyId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            requestIdentifier, credentialPayload, issuanceDeferred,
            credentialDuration, signingKeyId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VciBatchIssueApiOrder.class,
                "requestIdentifier", requestIdentifier,
                "credentialPayload", credentialPayload,
                "issuanceDeferred", issuanceDeferred,
                "credentialDuration", credentialDuration,
                "signingKeyId", signingKeyId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String requestIdentifier;

        private String credentialPayload;

        private Boolean issuanceDeferred;

        private Long credentialDuration;

        private String signingKeyId;

        private Builder() {
          // force use of static builder() method
        }

        /**
         * The identifier of a credential request.
         */
        public Builder requestIdentifier(@Nullable String requestIdentifier) {
            this.requestIdentifier = requestIdentifier;
            return this;
        }

        /**
         * The additional payload that will be added into a credential to be issued.
         */
        public Builder credentialPayload(@Nullable String credentialPayload) {
            this.credentialPayload = credentialPayload;
            return this;
        }

        /**
         * The flag indicating whether to defer credential issuance.
         */
        public Builder issuanceDeferred(@Nullable Boolean issuanceDeferred) {
            this.issuanceDeferred = issuanceDeferred;
            return this;
        }

        /**
         * The duration of a credential to be issued.
         */
        public Builder credentialDuration(@Nullable Long credentialDuration) {
            this.credentialDuration = credentialDuration;
            return this;
        }

        /**
         * The key ID of a private key that should be used for signing a credential
         * to be issued.
         */
        public Builder signingKeyId(@Nullable String signingKeyId) {
            this.signingKeyId = signingKeyId;
            return this;
        }

        public VciBatchIssueApiOrder build() {
            return new VciBatchIssueApiOrder(
                requestIdentifier, credentialPayload, issuanceDeferred,
                credentialDuration, signingKeyId);
        }

    }
}
