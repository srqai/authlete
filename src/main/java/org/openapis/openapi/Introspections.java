/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiFormRequest;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiFormRequestBody;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiFormRequestBuilder;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiFormResponse;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiRequest;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiRequestBody;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiRequestBuilder;
import org.openapis.openapi.models.operations.AuthIntrospectionStandardApiResponse;
import org.openapis.openapi.operations.AuthIntrospectionStandardApiFormOperation;
import org.openapis.openapi.operations.AuthIntrospectionStandardApiOperation;


public class Introspections {
    private final SDKConfiguration sdkConfiguration;

    Introspections(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthIntrospectionStandardApiRequestBuilder process() {
        return new AuthIntrospectionStandardApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthIntrospectionStandardApiResponse process(@Nonnull String serviceId, @Nonnull AuthIntrospectionStandardApiRequestBody requestBody) throws Exception {
        return process(serviceId, requestBody, null);
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthIntrospectionStandardApiResponse process(
            @Nonnull String serviceId, @Nonnull AuthIntrospectionStandardApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthIntrospectionStandardApiRequest request = new AuthIntrospectionStandardApiRequest(serviceId, requestBody);
        RequestOperation<AuthIntrospectionStandardApiRequest, AuthIntrospectionStandardApiResponse> operation
              = new AuthIntrospectionStandardApiOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthIntrospectionStandardApiFormRequestBuilder processForm() {
        return new AuthIntrospectionStandardApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthIntrospectionStandardApiFormResponse processForm(@Nonnull String serviceId, @Nonnull AuthIntrospectionStandardApiFormRequestBody requestBody) throws Exception {
        return processForm(serviceId, requestBody, null);
    }

    /**
     * Process OAuth 2.0 Introspection Request
     * 
     * <p>This API exists to help your authorization server provide its own introspection API which complies
     * with [RFC 7662](https://tools.ietf.org/html/rfc7662) (OAuth 2.0 Token Introspection).
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementations of the introspection endpoint
     * of your service. The authorization server implementation should retrieve the value of `action` from
     * the response and take the following steps according to the value.
     * 
     * <p>In general, a client application accesses a protected resource endpoint of a service with an access
     * token, and the implementation of the endpoint checks whether the presented access token has enough
     * privileges (= scopes) to access the protected resource before returning the protected resource to
     * the client application. To achieve this flow, the endpoint implementation has to know detailed
     * information about the access token. Authlete `/auth/introspection` API can be used to get such information.
     * 
     * <p>The response from `/auth/introspection` API has some parameters. Among them, it is `action` parameter
     * that the authorization server implementation should check first because it denotes the next action
     * that the authorization server implementation should take. According to the value of `action`, the
     * authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662) does not mention anything about the response
     * body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the request from the client application
     * is invalid. This happens when the request from the client did not include the token request parameter.
     * See "[2.1. Introspection Request](https://datatracker.ietf.org/doc/html/rfc7662#section-2.1)" in
     * RFC 7662 for details about requirements for introspection requests.
     * 
     * <p>The HTTP status of the response returned to the client application should be "400 Bad Request".
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response if you want. Note that, however, [RFC 7662](https://datatracker.ietf.org/doc/html/rfc7662)
     * does not mention anything about the response body of error responses.
     * 
     * <p>The following illustrates an example response which the introspection endpoint of the authorization
     * server implementation generates and returns to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>**OK**
     * 
     * <p>When the value of `action` is `OK`, the request from the client application is valid.
     * 
     * <p>The HTTP status of the response returned to the client application must be "200 OK" and its content
     * type must be `application/json`.
     * 
     * <p>The value of `responseContent` is a JSON string which complies with the introspection response
     * defined in "2.2. Introspection Response" in RFC7662.
     * 
     * <p>The following illustrates the response which the introspection endpoint of your authorization server
     * implementation should generate and return to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: application/json
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>Note that RFC 7662 says _"To prevent token scanning attacks, **the endpoint MUST also require some
     * form of authorization to access this endpoint**"_. This means that you have to protect your introspection
     * endpoint in some way or other. Authlete does not care about how your introspection endpoint is protected.
     * In most cases, as mentioned in RFC 7662, "401 Unauthorized" is a proper response when an introspection
     * request does not satisfy authorization requirements imposed by your introspection endpoint.
     * 
     * <p>&lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthIntrospectionStandardApiFormResponse processForm(
            @Nonnull String serviceId, @Nonnull AuthIntrospectionStandardApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthIntrospectionStandardApiFormRequest request = new AuthIntrospectionStandardApiFormRequest(serviceId, requestBody);
        RequestOperation<AuthIntrospectionStandardApiFormRequest, AuthIntrospectionStandardApiFormResponse> operation
              = new AuthIntrospectionStandardApiFormOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
