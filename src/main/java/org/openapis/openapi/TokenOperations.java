/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.AuthTokenDeleteApiRequest;
import org.openapis.openapi.models.operations.AuthTokenDeleteApiRequestBuilder;
import org.openapis.openapi.models.operations.AuthTokenDeleteApiResponse;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiFormRequest;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiFormRequestBody;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiFormRequestBuilder;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiFormResponse;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiRequest;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiRequestBody;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiRequestBuilder;
import org.openapis.openapi.models.operations.AuthTokenRevokeApiResponse;
import org.openapis.openapi.operations.AuthTokenDeleteApi;
import org.openapis.openapi.operations.AuthTokenRevokeApi;
import org.openapis.openapi.operations.AuthTokenRevokeApiForm;


public class TokenOperations {
    private final SDKConfiguration sdkConfiguration;

    TokenOperations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Delete Access Token
     * 
     * <p>Delete an access token.
     * 
     * @return The call builder
     */
    public AuthTokenDeleteApiRequestBuilder delete() {
        return new AuthTokenDeleteApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Access Token
     * 
     * <p>Delete an access token.
     * 
     * @param serviceId A service ID.
     * @param accessTokenIdentifier The identifier of an existing access token. The identifier is the value of the access token
     *         or the value of the hash of the access token.
     *         
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenDeleteApiResponse delete(@Nonnull String serviceId, @Nonnull String accessTokenIdentifier) throws Exception {
        return delete(serviceId, accessTokenIdentifier, null);
    }

    /**
     * Delete Access Token
     * 
     * <p>Delete an access token.
     * 
     * @param serviceId A service ID.
     * @param accessTokenIdentifier The identifier of an existing access token. The identifier is the value of the access token
     *         or the value of the hash of the access token.
     *         
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenDeleteApiResponse delete(
            @Nonnull String serviceId, @Nonnull String accessTokenIdentifier,
            @Nullable String serverURL) throws Exception {
        AuthTokenDeleteApiRequest request = new AuthTokenDeleteApiRequest(serviceId, accessTokenIdentifier);
        RequestOperation<AuthTokenDeleteApiRequest, AuthTokenDeleteApiResponse> operation
              = new AuthTokenDeleteApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @return The call builder
     */
    public AuthTokenRevokeApiRequestBuilder revoke() {
        return new AuthTokenRevokeApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenRevokeApiResponse revoke(@Nonnull String serviceId, @Nonnull AuthTokenRevokeApiRequestBody requestBody) throws Exception {
        return revoke(serviceId, requestBody, null);
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenRevokeApiResponse revoke(
            @Nonnull String serviceId, @Nonnull AuthTokenRevokeApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthTokenRevokeApiRequest request = new AuthTokenRevokeApiRequest(serviceId, requestBody);
        RequestOperation<AuthTokenRevokeApiRequest, AuthTokenRevokeApiResponse> operation
              = new AuthTokenRevokeApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @return The call builder
     */
    public AuthTokenRevokeApiFormRequestBuilder revokeForm() {
        return new AuthTokenRevokeApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenRevokeApiFormResponse revokeForm(@Nonnull String serviceId, @Nonnull AuthTokenRevokeApiFormRequestBody requestBody) throws Exception {
        return revokeForm(serviceId, requestBody, null);
    }

    /**
     * Revoke Access Token
     * 
     * <p>Revoke an access token.
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthTokenRevokeApiFormResponse revokeForm(
            @Nonnull String serviceId, @Nonnull AuthTokenRevokeApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthTokenRevokeApiFormRequest request = new AuthTokenRevokeApiFormRequest(serviceId, requestBody);
        RequestOperation<AuthTokenRevokeApiFormRequest, AuthTokenRevokeApiFormResponse> operation
              = new AuthTokenRevokeApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
