/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.Integer;
import java.lang.String;
import org.openapis.openapi.models.components.ClientInput;
import org.openapis.openapi.models.operations.ClientCreateApiRequest;
import org.openapis.openapi.models.operations.ClientCreateApiRequestBuilder;
import org.openapis.openapi.models.operations.ClientCreateApiResponse;
import org.openapis.openapi.models.operations.ClientDeleteApiRequest;
import org.openapis.openapi.models.operations.ClientDeleteApiRequestBuilder;
import org.openapis.openapi.models.operations.ClientDeleteApiResponse;
import org.openapis.openapi.models.operations.ClientGetListApiRequest;
import org.openapis.openapi.models.operations.ClientGetListApiRequestBuilder;
import org.openapis.openapi.models.operations.ClientGetListApiResponse;
import org.openapis.openapi.models.operations.ClientUpdateApiRequest;
import org.openapis.openapi.models.operations.ClientUpdateApiRequestBuilder;
import org.openapis.openapi.models.operations.ClientUpdateApiResponse;
import org.openapis.openapi.operations.ClientCreateApiOperation;
import org.openapis.openapi.operations.ClientDeleteApiOperation;
import org.openapis.openapi.operations.ClientGetListApiOperation;
import org.openapis.openapi.operations.ClientUpdateApiOperation;


public class ClientManagement {
    private final SDKConfiguration sdkConfiguration;

    ClientManagement(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * List Clients
     * 
     * <p>Get a list of clients on a service.
     * 
     * <p>If the access token can view a full service (including an admin), all clients within the
     * service are returned. Otherwise, only clients that the access token can view within the
     * service are returned.
     * - ViewClient: []
     * 
     * @return The call builder
     */
    public ClientGetListApiRequestBuilder list() {
        return new ClientGetListApiRequestBuilder(sdkConfiguration);
    }

    /**
     * List Clients
     * 
     * <p>Get a list of clients on a service.
     * 
     * <p>If the access token can view a full service (including an admin), all clients within the
     * service are returned. Otherwise, only clients that the access token can view within the
     * service are returned.
     * - ViewClient: []
     * 
     * @param serviceId A service ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientGetListApiResponse list(@Nonnull String serviceId) throws Exception {
        return list(serviceId, null, null,
            null);
    }

    /**
     * List Clients
     * 
     * <p>Get a list of clients on a service.
     * 
     * <p>If the access token can view a full service (including an admin), all clients within the
     * service are returned. Otherwise, only clients that the access token can view within the
     * service are returned.
     * - ViewClient: []
     * 
     * @param serviceId A service ID.
     * @param developer The developer of client applications. The default value is null. If this parameter is not set
     *         to `null`, client application of the specified developer are returned. Otherwise, all client
     *         applications that belong to the service are returned.
     *         
     * @param start Start index (inclusive) of the result set. The default value is 0. Must not be a negative number.
     * @param end End index (exclusive) of the result set. The default value is 5. Must not be a negative number.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientGetListApiResponse list(
            @Nonnull String serviceId, @Nullable String developer,
            @Nullable Integer start, @Nullable Integer end) throws Exception {
        ClientGetListApiRequest request = new ClientGetListApiRequest(
                serviceId, developer, start,
                end);
        RequestOperation<ClientGetListApiRequest, ClientGetListApiResponse> operation
              = new ClientGetListApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create Client
     * 
     * <p>Create a new client.
     * 
     * @return The call builder
     */
    public ClientCreateApiRequestBuilder create() {
        return new ClientCreateApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Client
     * 
     * <p>Create a new client.
     * 
     * @param serviceId A service ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientCreateApiResponse create(@Nonnull String serviceId) throws Exception {
        return create(serviceId, null);
    }

    /**
     * Create Client
     * 
     * <p>Create a new client.
     * 
     * @param serviceId A service ID.
     * @param client 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientCreateApiResponse create(@Nonnull String serviceId, @Nullable ClientInput client) throws Exception {
        ClientCreateApiRequest request = new ClientCreateApiRequest(serviceId, client);
        RequestOperation<ClientCreateApiRequest, ClientCreateApiResponse> operation
              = new ClientCreateApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Client
     * 
     * <p>Update a client.
     * 
     * @return The call builder
     */
    public ClientUpdateApiRequestBuilder update() {
        return new ClientUpdateApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Client
     * 
     * <p>Update a client.
     * 
     * @param serviceId A service ID.
     * @param clientId A client ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientUpdateApiResponse update(@Nonnull String serviceId, @Nonnull String clientId) throws Exception {
        return update(serviceId, clientId, null);
    }

    /**
     * Update Client
     * 
     * <p>Update a client.
     * 
     * @param serviceId A service ID.
     * @param clientId A client ID.
     * @param client 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientUpdateApiResponse update(
            @Nonnull String serviceId, @Nonnull String clientId,
            @Nullable ClientInput client) throws Exception {
        ClientUpdateApiRequest request = new ClientUpdateApiRequest(serviceId, clientId, client);
        RequestOperation<ClientUpdateApiRequest, ClientUpdateApiResponse> operation
              = new ClientUpdateApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Client ⚡
     * 
     * <p>Delete a client.
     * 
     * @return The call builder
     */
    public ClientDeleteApiRequestBuilder delete() {
        return new ClientDeleteApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Client ⚡
     * 
     * <p>Delete a client.
     * 
     * @param serviceId A service ID.
     * @param clientId The client ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ClientDeleteApiResponse delete(@Nonnull String serviceId, @Nonnull String clientId) throws Exception {
        ClientDeleteApiRequest request = new ClientDeleteApiRequest(serviceId, clientId);
        RequestOperation<ClientDeleteApiRequest, ClientDeleteApiResponse> operation
              = new ClientDeleteApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
