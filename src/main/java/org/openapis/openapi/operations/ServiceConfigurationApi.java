/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi.operations;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Map;
import java.util.Optional;
import org.openapis.openapi.SDKConfiguration;
import org.openapis.openapi.SecuritySource;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.BadRequestException;
import org.openapis.openapi.models.errors.ForbiddenException;
import org.openapis.openapi.models.errors.InternalServerError;
import org.openapis.openapi.models.errors.UnauthorizedException;
import org.openapis.openapi.models.operations.ServiceConfigurationApiRequest;
import org.openapis.openapi.models.operations.ServiceConfigurationApiResponse;
import org.openapis.openapi.models.operations.ServiceConfigurationApiResponseBody;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.Utils;



public class ServiceConfigurationApi {
    
    /**
     * SERVICE_CONFIGURATION_API_SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVICE_CONFIGURATION_API_SERVERS = {
        /**
         * ðŸ‡ºðŸ‡¸ US Cluster
         */
        "https://us.authlete.com",
        /**
         * ðŸ‡¯ðŸ‡µ Japan Cluster
         */
        "https://jp.authlete.com",
        /**
         * ðŸ‡ªðŸ‡º Europe Cluster
         */
        "https://eu.authlete.com",
        /**
         * ðŸ‡§ðŸ‡· Brazil Cluster
         */
        "https://br.authlete.com",
    };

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final HTTPClient client;

        public Base(@Nonnull SDKConfiguration sdkConfiguration, @Nullable String serverURL) {
            this.sdkConfiguration = sdkConfiguration;
            this.baseUrl = Optional.ofNullable(serverURL)
                    .filter(u -> !u.isBlank())
                    .orElse(Utils.templateUrl(
                        SERVICE_CONFIGURATION_API_SERVERS[0], 
                        Map.of()));
            this.securitySource = this.sdkConfiguration.securitySource();
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        HttpRequest buildRequest(ServiceConfigurationApiRequest request) throws Exception {
            String url = Utils.generateURL(
                    ServiceConfigurationApiRequest.class,
                    this.baseUrl,
                    "/api/{serviceId}/service/configuration",
                    request, null);
            HTTPRequest req = new HTTPRequest(url, "GET");
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);

            req.addQueryParams(Utils.getQueryParams(
                    ServiceConfigurationApiRequest.class,
                    request,
                    null));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return sdkConfiguration.hooks().beforeRequest(
                    new BeforeRequestContextImpl(
                            this.sdkConfiguration,
                            this.baseUrl,
                            "service_configuration_api",
                            java.util.Optional.of(java.util.List.of()),
                            securitySource()),
                    req.build());
        }
    }

    public static class Sync extends Base
            implements RequestOperation<ServiceConfigurationApiRequest, ServiceConfigurationApiResponse> {
        public Sync(@Nonnull SDKConfiguration sdkConfiguration, @Nullable String serverURL) {
            super(sdkConfiguration, serverURL);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks()
                    .afterError(
                            new AfterErrorContextImpl(
                                    this.sdkConfiguration,
                                    this.baseUrl,
                                    "service_configuration_api",
                                    java.util.Optional.of(java.util.List.of()),
                                    securitySource()),
                            Optional.ofNullable(response),
                            Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks()
                    .afterSuccess(
                            new AfterSuccessContextImpl(
                                    this.sdkConfiguration,
                                    this.baseUrl,
                                    "service_configuration_api",
                                    java.util.Optional.of(java.util.List.of()),
                                    securitySource()),
                            response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(ServiceConfigurationApiRequest request) throws Exception {
            HttpRequest r = buildRequest(request);
            HttpResponse<InputStream> httpRes;
            try {
                httpRes = client.send(r);
                if (Utils.statusCodeMatches(httpRes.statusCode(), "400", "401", "403", "4XX", "500", "5XX")) {
                    httpRes = onError(httpRes, null);
                } else {
                    httpRes = onSuccess(httpRes);
                }
            } catch (Exception e) {
                httpRes = onError(null, e);
            }

            return httpRes;
        }


        @Override
        public ServiceConfigurationApiResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            ServiceConfigurationApiResponse.Builder resBuilder =
                    ServiceConfigurationApiResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            ServiceConfigurationApiResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    ServiceConfigurationApiResponseBody out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withObject(out);
                    return res;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "400")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    BadRequestException out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "401")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    UnauthorizedException out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "403")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    ForbiddenException out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "500")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    InternalServerError out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                        out.withRawResponse(response);
                    
                    throw out;
                } else {
                    throw new APIException(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw new APIException(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            throw new APIException(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
}
