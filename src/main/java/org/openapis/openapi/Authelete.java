/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import java.lang.String;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.RetryConfig;
import org.openapis.openapi.utils.SpeakeasyHTTPClient;
import org.openapis.openapi.utils.Utils;

/**
 * Authlete API Explorer: &lt;div class="min-h-screen bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-gray-100 p-6"&gt;
 *   &lt;div class="flex justify-end mb-4"&gt;
 *     &lt;label for="theme-toggle" class="flex items-center cursor-pointer"&gt;
 *       &lt;div class="relative"&gt;Dark mode:
 *         &lt;input type="checkbox" id="theme-toggle" class="sr-only" onchange="toggleTheme()"&gt;
 *         &lt;div class="block bg-gray-600 w-14 h-8 rounded-full"&gt;&lt;/div&gt;
 *         &lt;div class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"&gt;&lt;/div&gt;
 *       &lt;/div&gt;
 *     &lt;/label&gt;
 *   &lt;/div&gt;
 *   &lt;header class="bg-green-500 dark:bg-green-700 p-4 rounded-lg text-white text-center"&gt;
 *     &lt;p&gt;
 *       Welcome to the &lt;strong&gt;Authlete API documentation&lt;/strong&gt;. Authlete is an &lt;strong&gt;API-first service&lt;/strong&gt;
 *       where every aspect of the platform is configurable via API. This explorer provides a convenient way to
 *       authenticate and interact with the API, allowing you to see Authlete in action quickly. 🚀
 *     &lt;/p&gt;
 *     &lt;p&gt;
 *       At a high level, the Authlete API is grouped into two categories:
 *     &lt;/p&gt;
 *     &lt;ul class="list-disc list-inside"&gt;
 *       &lt;li&gt;&lt;strong&gt;Management APIs&lt;/strong&gt;: Enable you to manage services and clients. 🔧&lt;/li&gt;
 *       &lt;li&gt;&lt;strong&gt;Runtime APIs&lt;/strong&gt;: Allow you to build your own Authorization Servers or Verifiable Credential (VC)
 *         issuers. 🔐&lt;/li&gt;
 *     &lt;/ul&gt;
 *     &lt;p&gt;All API endpoints are secured using access tokens issued by Authlete's Identity Provider (IdP). If you already
 *       have an Authlete account, simply use the &lt;em&gt;Get Token&lt;/em&gt; option on the Authentication page to log in and obtain
 *       an access token for API usage. If you don't have an account yet, &lt;a href="https://console.authlete.com/register"&gt;sign up
 *         here&lt;/a&gt; to get started.&lt;/p&gt;
 *   &lt;/header&gt;
 *   &lt;main&gt;
 *     &lt;section id="api-servers" class="mb-10"&gt;
 *       &lt;h2 class="text-2xl font-semibold mb-4"&gt;🌐 API Servers&lt;/h2&gt;
 *       &lt;p&gt;Authlete is a global service with clusters available in multiple regions across the world.&lt;/p&gt;
 *       &lt;p&gt;Currently, our service is available in the following regions:&lt;/p&gt;
 *       &lt;div class="grid grid-cols-2 gap-4"&gt;
 *         &lt;div class="p-4 bg-white dark:bg-gray-800 rounded-lg shadow"&gt;
 *           &lt;p class="text-center font-semibold"&gt;🇺🇸 US&lt;/p&gt;
 *         &lt;/div&gt;
 *         &lt;div class="p-4 bg-white dark:bg-gray-800 rounded-lg shadow"&gt;
 *           &lt;p class="text-center font-semibold"&gt;🇯🇵 JP&lt;/p&gt;
 *         &lt;/div&gt;
 *         &lt;div class="p-4 bg-white dark:bg-gray-800 rounded-lg shadow"&gt;
 *           &lt;p class="text-center font-semibold"&gt;🇪🇺 EU&lt;/p&gt;
 *         &lt;/div&gt;
 *         &lt;div class="p-4 bg-white dark:bg-gray-800 rounded-lg shadow"&gt;
 *           &lt;p class="text-center font-semibold"&gt;🇧🇷 Brazil&lt;/p&gt;
 *         &lt;/div&gt;
 *       &lt;/div&gt;
 *       &lt;p&gt;Our customers can host their data in the region that best meets their requirements.&lt;/p&gt;
 *       &lt;a href="#servers" class="block mt-4 text-green-500 dark:text-green-300 hover:underline text-center"&gt;Select your
 *         preferred server&lt;/a&gt;
 *     &lt;/section&gt;
 *     &lt;section id="authentication" class="mb-10"&gt;
 *       &lt;h2 class="text-2xl font-semibold mb-4"&gt;🔑 Authentication&lt;/h2&gt;
 *       &lt;p&gt;The API Explorer requires an access token to call the API.&lt;/p&gt;
 *       &lt;p&gt;You can create the access token from the &lt;a href="https://console.authlete.com"&gt;Authlete Management Console&lt;/a&gt; and set it in the HTTP Bearer section of Authentication page.&lt;/p&gt;
 *       &lt;p&gt;Alternatively, if you have an Authlete account, the API Explorer can log you in with your Authlete account and
 *         automatically acquire the required access token.&lt;/p&gt;
 *       &lt;div class="theme-admonition theme-admonition-warning admonition_o5H7 alert alert--warning"&gt;
 *         &lt;div class="admonitionContent_Knsx"&gt;
 *           &lt;p&gt;⚠️ &lt;strong&gt;Important Note:&lt;/strong&gt; When the API Explorer acquires the token after login, the access tokens
 *             will have the same permissions as the user who logs in as part of this flow.&lt;/p&gt;
 *         &lt;/div&gt;
 *       &lt;/div&gt;
 *       &lt;a href="#auth" class="block mt-4 text-green-500 dark:text-green-300 hover:underline text-center"&gt;Setup your
 *         access token&lt;/a&gt;
 *     &lt;/section&gt;
 *     &lt;section id="tutorials" class="mb-10"&gt;
 *       &lt;h2 class="text-2xl font-semibold mb-4"&gt;🎓 Tutorials&lt;/h2&gt;
 *       &lt;p&gt;If you have successfully tested the API from the API Console and want to take the next step of integrating the
 *         API into your application, or if you want to see a sample using Authlete APIs, follow the links below. These
 *         resources will help you understand key concepts and how to integrate Authlete API into your applications.&lt;/p&gt;
 *       &lt;div class="mt-4"&gt;
 *         &lt;a href="https://www.authlete.com/developers/getting_started/"
 *           class="block text-green-500 dark:text-green-300 font-bold hover:underline mb-2"&gt;🚀 Getting Started with
 *           Authlete&lt;/a&gt;
 *           &lt;/br&gt;
 *         &lt;a href="https://www.authlete.com/developers/tutorial/signup/"
 *           class="block text-green-500 dark:text-green-300 font-bold hover:underline"&gt;🔑 From Sign-Up to the First API
 *           Request&lt;/a&gt;
 *       &lt;/div&gt;
 *     &lt;/section&gt;
 *     &lt;section id="support" class="mb-10"&gt;
 *       &lt;h2 class="text-2xl font-semibold mb-4"&gt;🛠 Contact Us&lt;/h2&gt;
 *       &lt;p&gt;If you have any questions or need assistance, our team is here to help.&lt;/p&gt;
 *       &lt;a href="https://www.authlete.com/contact/"
 *         class="block mt-4 text-green-500 dark:text-green-300 font-bold hover:underline"&gt;Contact Page&lt;/a&gt;
 *     &lt;/section&gt;
 *   &lt;/main&gt;
 * &lt;/div&gt;
 */
public class Authelete {


    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    public static final String[] SERVERS = {
        /**
         * 🇺🇸 US Cluster
         */
        "https://us.authlete.com",
        /**
         * 🇯🇵 Japan Cluster
         */
        "https://jp.authlete.com",
        /**
         * 🇪🇺 Europe Cluster
         */
        "https://eu.authlete.com",
        /**
         * 🇧🇷 Brazil Cluster
         */
        "https://br.authlete.com",
    };


    private final ServiceManagement serviceManagement;


    private final Services services;


    private final Clients clients;


    private final ClientManagement clientManagement;


    private final AuthorizationEndpoint authorizationEndpoint;


    private final AuthorizationEndpoints authorizationEndpoints;


    private final Authorization authorization;


    private final TokenEndpoint tokenEndpoint;


    private final Tokens tokens;


    private final IntrospectionEndpoint introspectionEndpoint;


    private final Introspections introspections;


    private final Userinfo userinfo;


    private final GrantManagementEndpoints grantManagementEndpoints;


    private final JwkSetEndpoint jwkSetEndpoint;


    private final DynamicClientRegistration dynamicClientRegistration;


    private final Ciba ciba;


    private final Devices devices;


    private final DeviceFlow deviceFlow;


    private final TokenOperations tokenOperations;


    private final JoseObject joseObject;


    private final Federations federations;


    private final Federation federation;


    private final UtilityEndpoints utilityEndpoints;


    private final HardwareSecurityKeys hardwareSecurityKeys;


    private final HardwareSecurityKey hardwareSecurityKey;


    private final SecurityKeys securityKeys;


    private final VerifiableCredentialIssuer verifiableCredentialIssuer;


    private final Credentials credentials;


    private final Vci vci;


    public ServiceManagement serviceManagement() {
        return serviceManagement;
    }


    public Services services() {
        return services;
    }


    public Clients clients() {
        return clients;
    }


    public ClientManagement clientManagement() {
        return clientManagement;
    }


    public AuthorizationEndpoint authorizationEndpoint() {
        return authorizationEndpoint;
    }


    public AuthorizationEndpoints authorizationEndpoints() {
        return authorizationEndpoints;
    }


    public Authorization authorization() {
        return authorization;
    }


    public TokenEndpoint tokenEndpoint() {
        return tokenEndpoint;
    }


    public Tokens tokens() {
        return tokens;
    }


    public IntrospectionEndpoint introspectionEndpoint() {
        return introspectionEndpoint;
    }


    public Introspections introspections() {
        return introspections;
    }


    public Userinfo userinfo() {
        return userinfo;
    }


    public GrantManagementEndpoints grantManagementEndpoints() {
        return grantManagementEndpoints;
    }


    public JwkSetEndpoint jwkSetEndpoint() {
        return jwkSetEndpoint;
    }


    public DynamicClientRegistration dynamicClientRegistration() {
        return dynamicClientRegistration;
    }


    public Ciba ciba() {
        return ciba;
    }


    public Devices devices() {
        return devices;
    }


    public DeviceFlow deviceFlow() {
        return deviceFlow;
    }


    public TokenOperations tokenOperations() {
        return tokenOperations;
    }


    public JoseObject joseObject() {
        return joseObject;
    }


    public Federations federations() {
        return federations;
    }


    public Federation federation() {
        return federation;
    }


    public UtilityEndpoints utilityEndpoints() {
        return utilityEndpoints;
    }


    public HardwareSecurityKeys hardwareSecurityKeys() {
        return hardwareSecurityKeys;
    }


    public HardwareSecurityKey hardwareSecurityKey() {
        return hardwareSecurityKey;
    }


    public SecurityKeys securityKeys() {
        return securityKeys;
    }


    public VerifiableCredentialIssuer verifiableCredentialIssuer() {
        return verifiableCredentialIssuer;
    }


    public Credentials credentials() {
        return credentials;
    }


    public Vci vci() {
        return vci;
    }

    private SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();
        private String serverUrl;
        private String server;
        

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.setClient(client);
            return this;
        }
        
        /**
         * Configures the SDK to use the provided security details.
         *
         * @param security The security details to use for all requests. Can be {@code null}.
         * @return The builder instance.
         */
        public Builder security(org.openapis.openapi.models.components.Security security) {
            this.sdkConfiguration.setSecuritySource(SecuritySource.of(security));
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         *
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            Utils.checkNotNull(securitySource, "securitySource");
            this.sdkConfiguration.setSecuritySource(securitySource);
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by index.
         *
         * @param serverIdx The server to use for all requests.
         * @return The builder instance.
         */
        public Builder serverIndex(int serverIdx) {
            this.sdkConfiguration.setServerIdx(serverIdx);
            this.serverUrl= SERVERS[serverIdx];
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.setRetryConfig(Optional.of(retryConfig));
            return this;
        }

        /**
         * Enables debug logging for HTTP requests and responses, including JSON body content.
         * <p>
         * Convenience method that calls {@link HTTPClient#enableDebugLogging(boolean)}.
         * {@link SpeakeasyHTTPClient} honors this setting. If you are using a custom HTTP client,
         * it is up to the custom client to honor this setting.
         * </p>
         *
         * @param enabled Whether to enable debug logging.
         * @return The builder instance.
         */
        public Builder enableHTTPDebugLogging(boolean enabled) {
            this.sdkConfiguration.client().enableDebugLogging(enabled);
            return this;
        }

        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(org.openapis.openapi.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super org.openapis.openapi.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         *
         * @return The SDK instance.
         */
        public Authelete build() {
            if (serverUrl == null || serverUrl.isBlank()) {
                serverUrl = SERVERS[0];
                sdkConfiguration.setServerIdx(0);
            }
            sdkConfiguration.setServerUrl(serverUrl);
            return new Authelete(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     *
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private Authelete(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.sdkConfiguration.initialize();
        this.serviceManagement = new ServiceManagement(sdkConfiguration);
        this.services = new Services(sdkConfiguration);
        this.clients = new Clients(sdkConfiguration);
        this.clientManagement = new ClientManagement(sdkConfiguration);
        this.authorizationEndpoint = new AuthorizationEndpoint(sdkConfiguration);
        this.authorizationEndpoints = new AuthorizationEndpoints(sdkConfiguration);
        this.authorization = new Authorization(sdkConfiguration);
        this.tokenEndpoint = new TokenEndpoint(sdkConfiguration);
        this.tokens = new Tokens(sdkConfiguration);
        this.introspectionEndpoint = new IntrospectionEndpoint(sdkConfiguration);
        this.introspections = new Introspections(sdkConfiguration);
        this.userinfo = new Userinfo(sdkConfiguration);
        this.grantManagementEndpoints = new GrantManagementEndpoints(sdkConfiguration);
        this.jwkSetEndpoint = new JwkSetEndpoint(sdkConfiguration);
        this.dynamicClientRegistration = new DynamicClientRegistration(sdkConfiguration);
        this.ciba = new Ciba(sdkConfiguration);
        this.devices = new Devices(sdkConfiguration);
        this.deviceFlow = new DeviceFlow(sdkConfiguration);
        this.tokenOperations = new TokenOperations(sdkConfiguration);
        this.joseObject = new JoseObject(sdkConfiguration);
        this.federations = new Federations(sdkConfiguration);
        this.federation = new Federation(sdkConfiguration);
        this.utilityEndpoints = new UtilityEndpoints(sdkConfiguration);
        this.hardwareSecurityKeys = new HardwareSecurityKeys(sdkConfiguration);
        this.hardwareSecurityKey = new HardwareSecurityKey(sdkConfiguration);
        this.securityKeys = new SecurityKeys(sdkConfiguration);
        this.verifiableCredentialIssuer = new VerifiableCredentialIssuer(sdkConfiguration);
        this.credentials = new Credentials(sdkConfiguration);
        this.vci = new Vci(sdkConfiguration);
        this.sdkConfiguration = this.sdkConfiguration.hooks().sdkInit(this.sdkConfiguration);
    }
}
