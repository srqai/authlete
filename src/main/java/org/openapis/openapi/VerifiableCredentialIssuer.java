/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.VciBatchParseApiFormRequest;
import org.openapis.openapi.models.operations.VciBatchParseApiFormRequestBody;
import org.openapis.openapi.models.operations.VciBatchParseApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciBatchParseApiFormResponse;
import org.openapis.openapi.models.operations.VciBatchParseApiRequest;
import org.openapis.openapi.models.operations.VciBatchParseApiRequestBody;
import org.openapis.openapi.models.operations.VciBatchParseApiRequestBuilder;
import org.openapis.openapi.models.operations.VciBatchParseApiResponse;
import org.openapis.openapi.models.operations.VciDeferredIssueApiRequest;
import org.openapis.openapi.models.operations.VciDeferredIssueApiRequestBody;
import org.openapis.openapi.models.operations.VciDeferredIssueApiRequestBuilder;
import org.openapis.openapi.models.operations.VciDeferredIssueApiResponse;
import org.openapis.openapi.models.operations.VciDeferredParseApiFormRequest;
import org.openapis.openapi.models.operations.VciDeferredParseApiFormRequestBody;
import org.openapis.openapi.models.operations.VciDeferredParseApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciDeferredParseApiFormResponse;
import org.openapis.openapi.models.operations.VciDeferredParseApiRequest;
import org.openapis.openapi.models.operations.VciDeferredParseApiRequestBody;
import org.openapis.openapi.models.operations.VciDeferredParseApiRequestBuilder;
import org.openapis.openapi.models.operations.VciDeferredParseApiResponse;
import org.openapis.openapi.models.operations.VciJwksApiFormRequest;
import org.openapis.openapi.models.operations.VciJwksApiFormRequestBody;
import org.openapis.openapi.models.operations.VciJwksApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciJwksApiFormResponse;
import org.openapis.openapi.models.operations.VciJwksApiRequest;
import org.openapis.openapi.models.operations.VciJwksApiRequestBody;
import org.openapis.openapi.models.operations.VciJwksApiRequestBuilder;
import org.openapis.openapi.models.operations.VciJwksApiResponse;
import org.openapis.openapi.models.operations.VciMetadataApiFormRequest;
import org.openapis.openapi.models.operations.VciMetadataApiFormRequestBody;
import org.openapis.openapi.models.operations.VciMetadataApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciMetadataApiFormResponse;
import org.openapis.openapi.models.operations.VciMetadataApiRequest;
import org.openapis.openapi.models.operations.VciMetadataApiRequestBody;
import org.openapis.openapi.models.operations.VciMetadataApiRequestBuilder;
import org.openapis.openapi.models.operations.VciMetadataApiResponse;
import org.openapis.openapi.models.operations.VciOfferCreateApiFormRequest;
import org.openapis.openapi.models.operations.VciOfferCreateApiFormRequestBody;
import org.openapis.openapi.models.operations.VciOfferCreateApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciOfferCreateApiFormResponse;
import org.openapis.openapi.models.operations.VciOfferCreateApiRequest;
import org.openapis.openapi.models.operations.VciOfferCreateApiRequestBody;
import org.openapis.openapi.models.operations.VciOfferCreateApiRequestBuilder;
import org.openapis.openapi.models.operations.VciOfferCreateApiResponse;
import org.openapis.openapi.models.operations.VciOfferInfoApiFormRequest;
import org.openapis.openapi.models.operations.VciOfferInfoApiFormRequestBody;
import org.openapis.openapi.models.operations.VciOfferInfoApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciOfferInfoApiFormResponse;
import org.openapis.openapi.models.operations.VciOfferInfoApiRequest;
import org.openapis.openapi.models.operations.VciOfferInfoApiRequestBody;
import org.openapis.openapi.models.operations.VciOfferInfoApiRequestBuilder;
import org.openapis.openapi.models.operations.VciOfferInfoApiResponse;
import org.openapis.openapi.models.operations.VciSingleIssueApiRequest;
import org.openapis.openapi.models.operations.VciSingleIssueApiRequestBody;
import org.openapis.openapi.models.operations.VciSingleIssueApiRequestBuilder;
import org.openapis.openapi.models.operations.VciSingleIssueApiResponse;
import org.openapis.openapi.operations.VciBatchParseApi;
import org.openapis.openapi.operations.VciBatchParseApiForm;
import org.openapis.openapi.operations.VciDeferredIssueApi;
import org.openapis.openapi.operations.VciDeferredParseApi;
import org.openapis.openapi.operations.VciDeferredParseApiForm;
import org.openapis.openapi.operations.VciJwksApi;
import org.openapis.openapi.operations.VciJwksApiForm;
import org.openapis.openapi.operations.VciMetadataApi;
import org.openapis.openapi.operations.VciMetadataApiForm;
import org.openapis.openapi.operations.VciOfferCreateApi;
import org.openapis.openapi.operations.VciOfferCreateApiForm;
import org.openapis.openapi.operations.VciOfferInfoApi;
import org.openapis.openapi.operations.VciOfferInfoApiForm;
import org.openapis.openapi.operations.VciSingleIssueApi;


public class VerifiableCredentialIssuer {
    private final SDKConfiguration sdkConfiguration;

    VerifiableCredentialIssuer(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @return The call builder
     */
    public VciMetadataApiRequestBuilder getMetadata() {
        return new VciMetadataApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciMetadataApiResponse getMetadata(@Nonnull String serviceId, @Nonnull VciMetadataApiRequestBody requestBody) throws Exception {
        return getMetadata(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciMetadataApiResponse getMetadata(
            @Nonnull String serviceId, @Nonnull VciMetadataApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciMetadataApiRequest request = new VciMetadataApiRequest(serviceId, requestBody);
        RequestOperation<VciMetadataApiRequest, VciMetadataApiResponse> operation
              = new VciMetadataApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @return The call builder
     */
    public VciMetadataApiFormRequestBuilder getMetadataForm() {
        return new VciMetadataApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciMetadataApiFormResponse getMetadataForm(@Nonnull String serviceId, @Nonnull VciMetadataApiFormRequestBody requestBody) throws Exception {
        return getMetadataForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/metadata API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciMetadataApiFormResponse getMetadataForm(
            @Nonnull String serviceId, @Nonnull VciMetadataApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciMetadataApiFormRequest request = new VciMetadataApiFormRequest(serviceId, requestBody);
        RequestOperation<VciMetadataApiFormRequest, VciMetadataApiFormResponse> operation
              = new VciMetadataApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @return The call builder
     */
    public VciJwksApiRequestBuilder postJwks() {
        return new VciJwksApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciJwksApiResponse postJwks(@Nonnull String serviceId, @Nonnull VciJwksApiRequestBody requestBody) throws Exception {
        return postJwks(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciJwksApiResponse postJwks(
            @Nonnull String serviceId, @Nonnull VciJwksApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciJwksApiRequest request = new VciJwksApiRequest(serviceId, requestBody);
        RequestOperation<VciJwksApiRequest, VciJwksApiResponse> operation
              = new VciJwksApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @return The call builder
     */
    public VciJwksApiFormRequestBuilder postJwksForm() {
        return new VciJwksApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciJwksApiFormResponse postJwksForm(@Nonnull String serviceId, @Nonnull VciJwksApiFormRequestBody requestBody) throws Exception {
        return postJwksForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/jwks API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciJwksApiFormResponse postJwksForm(
            @Nonnull String serviceId, @Nonnull VciJwksApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciJwksApiFormRequest request = new VciJwksApiFormRequest(serviceId, requestBody);
        RequestOperation<VciJwksApiFormRequest, VciJwksApiFormResponse> operation
              = new VciJwksApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @return The call builder
     */
    public VciOfferCreateApiRequestBuilder createOffer() {
        return new VciOfferCreateApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferCreateApiResponse createOffer(@Nonnull String serviceId, @Nonnull VciOfferCreateApiRequestBody requestBody) throws Exception {
        return createOffer(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferCreateApiResponse createOffer(
            @Nonnull String serviceId, @Nonnull VciOfferCreateApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciOfferCreateApiRequest request = new VciOfferCreateApiRequest(serviceId, requestBody);
        RequestOperation<VciOfferCreateApiRequest, VciOfferCreateApiResponse> operation
              = new VciOfferCreateApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @return The call builder
     */
    public VciOfferCreateApiFormRequestBuilder createOfferForm() {
        return new VciOfferCreateApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferCreateApiFormResponse createOfferForm(@Nonnull String serviceId, @Nonnull VciOfferCreateApiFormRequestBody requestBody) throws Exception {
        return createOfferForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/offer/create API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferCreateApiFormResponse createOfferForm(
            @Nonnull String serviceId, @Nonnull VciOfferCreateApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciOfferCreateApiFormRequest request = new VciOfferCreateApiFormRequest(serviceId, requestBody);
        RequestOperation<VciOfferCreateApiFormRequest, VciOfferCreateApiFormResponse> operation
              = new VciOfferCreateApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @return The call builder
     */
    public VciOfferInfoApiRequestBuilder getOfferInfo() {
        return new VciOfferInfoApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferInfoApiResponse getOfferInfo(@Nonnull String serviceId, @Nonnull VciOfferInfoApiRequestBody requestBody) throws Exception {
        return getOfferInfo(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferInfoApiResponse getOfferInfo(
            @Nonnull String serviceId, @Nonnull VciOfferInfoApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciOfferInfoApiRequest request = new VciOfferInfoApiRequest(serviceId, requestBody);
        RequestOperation<VciOfferInfoApiRequest, VciOfferInfoApiResponse> operation
              = new VciOfferInfoApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @return The call builder
     */
    public VciOfferInfoApiFormRequestBuilder getOfferInfoForm() {
        return new VciOfferInfoApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferInfoApiFormResponse getOfferInfoForm(@Nonnull String serviceId, @Nonnull VciOfferInfoApiFormRequestBody requestBody) throws Exception {
        return getOfferInfoForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/offer/info API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciOfferInfoApiFormResponse getOfferInfoForm(
            @Nonnull String serviceId, @Nonnull VciOfferInfoApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciOfferInfoApiFormRequest request = new VciOfferInfoApiFormRequest(serviceId, requestBody);
        RequestOperation<VciOfferInfoApiFormRequest, VciOfferInfoApiFormResponse> operation
              = new VciOfferInfoApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/single/issue API
     * 
     * @return The call builder
     */
    public VciSingleIssueApiRequestBuilder issueSingle() {
        return new VciSingleIssueApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/single/issue API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleIssueApiResponse issueSingle(@Nonnull String serviceId, @Nonnull VciSingleIssueApiRequestBody requestBody) throws Exception {
        return issueSingle(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/single/issue API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleIssueApiResponse issueSingle(
            @Nonnull String serviceId, @Nonnull VciSingleIssueApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciSingleIssueApiRequest request = new VciSingleIssueApiRequest(serviceId, requestBody);
        RequestOperation<VciSingleIssueApiRequest, VciSingleIssueApiResponse> operation
              = new VciSingleIssueApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @return The call builder
     */
    public VciBatchParseApiRequestBuilder batchParse() {
        return new VciBatchParseApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciBatchParseApiResponse batchParse(@Nonnull String serviceId, @Nonnull VciBatchParseApiRequestBody requestBody) throws Exception {
        return batchParse(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciBatchParseApiResponse batchParse(
            @Nonnull String serviceId, @Nonnull VciBatchParseApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciBatchParseApiRequest request = new VciBatchParseApiRequest(serviceId, requestBody);
        RequestOperation<VciBatchParseApiRequest, VciBatchParseApiResponse> operation
              = new VciBatchParseApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @return The call builder
     */
    public VciBatchParseApiFormRequestBuilder batchParseForm() {
        return new VciBatchParseApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciBatchParseApiFormResponse batchParseForm(@Nonnull String serviceId, @Nonnull VciBatchParseApiFormRequestBody requestBody) throws Exception {
        return batchParseForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/batch/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciBatchParseApiFormResponse batchParseForm(
            @Nonnull String serviceId, @Nonnull VciBatchParseApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciBatchParseApiFormRequest request = new VciBatchParseApiFormRequest(serviceId, requestBody);
        RequestOperation<VciBatchParseApiFormRequest, VciBatchParseApiFormResponse> operation
              = new VciBatchParseApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @return The call builder
     */
    public VciDeferredParseApiRequestBuilder parseDeferred() {
        return new VciDeferredParseApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredParseApiResponse parseDeferred(@Nonnull String serviceId, @Nonnull VciDeferredParseApiRequestBody requestBody) throws Exception {
        return parseDeferred(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredParseApiResponse parseDeferred(
            @Nonnull String serviceId, @Nonnull VciDeferredParseApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciDeferredParseApiRequest request = new VciDeferredParseApiRequest(serviceId, requestBody);
        RequestOperation<VciDeferredParseApiRequest, VciDeferredParseApiResponse> operation
              = new VciDeferredParseApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @return The call builder
     */
    public VciDeferredParseApiFormRequestBuilder parseDeferredForm() {
        return new VciDeferredParseApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredParseApiFormResponse parseDeferredForm(@Nonnull String serviceId, @Nonnull VciDeferredParseApiFormRequestBody requestBody) throws Exception {
        return parseDeferredForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/deferred/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredParseApiFormResponse parseDeferredForm(
            @Nonnull String serviceId, @Nonnull VciDeferredParseApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciDeferredParseApiFormRequest request = new VciDeferredParseApiFormRequest(serviceId, requestBody);
        RequestOperation<VciDeferredParseApiFormRequest, VciDeferredParseApiFormResponse> operation
              = new VciDeferredParseApiForm.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/deferred/issue API
     * 
     * @return The call builder
     */
    public VciDeferredIssueApiRequestBuilder issueDeferred() {
        return new VciDeferredIssueApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/deferred/issue API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredIssueApiResponse issueDeferred(@Nonnull String serviceId, @Nonnull VciDeferredIssueApiRequestBody requestBody) throws Exception {
        return issueDeferred(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/deferred/issue API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciDeferredIssueApiResponse issueDeferred(
            @Nonnull String serviceId, @Nonnull VciDeferredIssueApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciDeferredIssueApiRequest request = new VciDeferredIssueApiRequest(serviceId, requestBody);
        RequestOperation<VciDeferredIssueApiRequest, VciDeferredIssueApiResponse> operation
              = new VciDeferredIssueApi.Sync(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
