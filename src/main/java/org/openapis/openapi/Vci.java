/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.VciSingleParseApiFormRequest;
import org.openapis.openapi.models.operations.VciSingleParseApiFormRequestBody;
import org.openapis.openapi.models.operations.VciSingleParseApiFormRequestBuilder;
import org.openapis.openapi.models.operations.VciSingleParseApiFormResponse;
import org.openapis.openapi.models.operations.VciSingleParseApiRequest;
import org.openapis.openapi.models.operations.VciSingleParseApiRequestBody;
import org.openapis.openapi.models.operations.VciSingleParseApiRequestBuilder;
import org.openapis.openapi.models.operations.VciSingleParseApiResponse;
import org.openapis.openapi.operations.VciSingleParseApiFormOperation;
import org.openapis.openapi.operations.VciSingleParseApiOperation;


public class Vci {
    private final SDKConfiguration sdkConfiguration;

    Vci(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @return The call builder
     */
    public VciSingleParseApiRequestBuilder parseSingle() {
        return new VciSingleParseApiRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleParseApiResponse parseSingle(@Nonnull String serviceId, @Nonnull VciSingleParseApiRequestBody requestBody) throws Exception {
        return parseSingle(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleParseApiResponse parseSingle(
            @Nonnull String serviceId, @Nonnull VciSingleParseApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciSingleParseApiRequest request = new VciSingleParseApiRequest(serviceId, requestBody);
        RequestOperation<VciSingleParseApiRequest, VciSingleParseApiResponse> operation
              = new VciSingleParseApiOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @return The call builder
     */
    public VciSingleParseApiFormRequestBuilder parseSingleForm() {
        return new VciSingleParseApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleParseApiFormResponse parseSingleForm(@Nonnull String serviceId, @Nonnull VciSingleParseApiFormRequestBody requestBody) throws Exception {
        return parseSingleForm(serviceId, requestBody, null);
    }

    /**
     * /api/{serviceId}/vci/single/parse API
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public VciSingleParseApiFormResponse parseSingleForm(
            @Nonnull String serviceId, @Nonnull VciSingleParseApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        VciSingleParseApiFormRequest request = new VciSingleParseApiFormRequest(serviceId, requestBody);
        RequestOperation<VciSingleParseApiFormRequest, VciSingleParseApiFormResponse> operation
              = new VciSingleParseApiFormOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
