/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiFormRequest;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiFormRequestBody;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiFormRequestBuilder;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiFormResponse;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiRequest;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiRequestBody;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiRequestBuilder;
import org.openapis.openapi.models.operations.AuthAuthorizationFailApiResponse;
import org.openapis.openapi.operations.AuthAuthorizationFailApiFormOperation;
import org.openapis.openapi.operations.AuthAuthorizationFailApiOperation;


public class AuthorizationEndpoints {
    private final SDKConfiguration sdkConfiguration;

    AuthorizationEndpoints(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthAuthorizationFailApiRequestBuilder failAuthRequest() {
        return new AuthAuthorizationFailApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationFailApiResponse failAuthRequest(@Nonnull String serviceId, @Nonnull AuthAuthorizationFailApiRequestBody requestBody) throws Exception {
        return failAuthRequest(serviceId, requestBody, null);
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationFailApiResponse failAuthRequest(
            @Nonnull String serviceId, @Nonnull AuthAuthorizationFailApiRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthAuthorizationFailApiRequest request = new AuthAuthorizationFailApiRequest(serviceId, requestBody);
        RequestOperation<AuthAuthorizationFailApiRequest, AuthAuthorizationFailApiResponse> operation
              = new AuthAuthorizationFailApiOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @return The call builder
     */
    public AuthAuthorizationFailApiFormRequestBuilder failAuthRequestForm() {
        return new AuthAuthorizationFailApiFormRequestBuilder(sdkConfiguration);
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationFailApiFormResponse failAuthRequestForm(@Nonnull String serviceId, @Nonnull AuthAuthorizationFailApiFormRequestBody requestBody) throws Exception {
        return failAuthRequestForm(serviceId, requestBody, null);
    }

    /**
     * Fail Authorization Request
     * 
     * <p>This API generates a content of an error authorization response that the authorization server implementation
     * returns to the client application.
     * 
     * <p>&lt;br&gt;
     * &lt;details&gt;
     * &lt;summary&gt;Description&lt;/summary&gt;
     * 
     * <p>This API is supposed to be called from within the implementation of the authorization endpoint of the service
     * in order to generate an error response to the client application.
     * 
     * <p>The description of the `/auth/authorization` API describes the timing when this API should be called.
     * 
     * <p>The response from `/auth/authorization/fail` API has some parameters.
     * Among them, it is `action` parameter that the authorization server implementation should check first because
     * it denotes the next action that the authorization server implementation should take.
     * According to the value of `action`, the authorization server implementation must take the steps described below.
     * 
     * <p>**INTERNAL_SERVER_ERROR**
     * 
     * <p>When the value of `action` is `INTERNAL_SERVER_ERROR`, it means that the request from the authorization
     * server implementation was wrong or that an error occurred in Authlete.
     * 
     * <p>In either case, from the viewpoint of the client application, it is an error on the server side.
     * Therefore, the service implementation should generate a response to the client application with
     * HTTP status of "500 Internal Server Error". Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 500 Internal Server Error
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "500 Internal Server Error" is not required by OAuth 2.0.
     * 
     * <p>**BAD_REQUEST**
     * 
     * <p>When the value of `action` is `BAD_REQUEST`, it means that the ticket is no longer valid (deleted
     * or expired) and that the reason of the invalidity was probably due to the end-user's too-delayed
     * response to the authorization UI.
     * 
     * <p>A response with HTTP status of "400 Bad Request" should be returned to the client application and
     * Authlete recommends `application/json` as the content type.
     * 
     * <p>The value of `responseContent` is a JSON string which describes the error, so it can be used
     * as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation should generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 400 Bad Request
     * Content-Type: application/json
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * 
     * <p>The endpoint implementation may return another different response to the client application since
     * "400 Bad Request" is not required by OAuth 2.0.
     * 
     * <p>**LOCATION**
     * 
     * <p>When the value of `action` is `LOCATION`, it means that the response to the client application must
     * be "302 Found" with Location header.
     * 
     * <p>The parameter responseContent contains a redirect URI with (1) an authorization code, an ID token
     * and/or an access token (on success) or (2) an error code (on failure), so it can be used as the
     * value of `Location` header.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 302 Found
     * Location: {responseContent}
     * Cache-Control: no-store
     * Pragma: no-cache
     * ```
     * 
     * <p>**FORM**
     * 
     * <p>When the value of `action` is `FORM`, it means that the response to the client application must be 200 OK
     * with an HTML which triggers redirection by JavaScript.
     * This happens when the authorization request from the client application contained `response_mode=form_post`.
     * 
     * <p>The value of `responseContent` is an HTML which can be used as the entity body of the response.
     * 
     * <p>The following illustrates the response which the service implementation must generate and return
     * to the client application.
     * 
     * <p>```
     * HTTP/1.1 200 OK
     * Content-Type: text/html;charset=UTF-8
     * Cache-Control: no-store
     * Pragma: no-cache
     * 
     * <p>{responseContent}
     * ```
     * &lt;/details&gt;
     * 
     * @param serviceId A service ID.
     * @param requestBody 
     * @param serverURL Overrides the server URL.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public AuthAuthorizationFailApiFormResponse failAuthRequestForm(
            @Nonnull String serviceId, @Nonnull AuthAuthorizationFailApiFormRequestBody requestBody,
            @Nullable String serverURL) throws Exception {
        AuthAuthorizationFailApiFormRequest request = new AuthAuthorizationFailApiFormRequest(serviceId, requestBody);
        RequestOperation<AuthAuthorizationFailApiFormRequest, AuthAuthorizationFailApiFormResponse> operation
              = new AuthAuthorizationFailApiFormOperation(sdkConfiguration, serverURL);
        return operation.handleResponse(operation.doRequest(request));
    }

}
