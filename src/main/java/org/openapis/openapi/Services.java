/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package org.openapis.openapi;

import static org.openapis.openapi.operations.Operations.RequestOperation;

import jakarta.annotation.Nonnull;
import jakarta.annotation.Nullable;
import java.lang.Exception;
import java.lang.String;
import org.openapis.openapi.models.components.ServiceInput;
import org.openapis.openapi.models.operations.ServiceCreateApiRequestBuilder;
import org.openapis.openapi.models.operations.ServiceCreateApiResponse;
import org.openapis.openapi.models.operations.ServiceDeleteApiRequest;
import org.openapis.openapi.models.operations.ServiceDeleteApiRequestBuilder;
import org.openapis.openapi.models.operations.ServiceDeleteApiResponse;
import org.openapis.openapi.models.operations.ServiceUpdateApiRequest;
import org.openapis.openapi.models.operations.ServiceUpdateApiRequestBuilder;
import org.openapis.openapi.models.operations.ServiceUpdateApiResponse;
import org.openapis.openapi.operations.ServiceCreateApiOperation;
import org.openapis.openapi.operations.ServiceDeleteApiOperation;
import org.openapis.openapi.operations.ServiceUpdateApiOperation;


public class Services {
    private final SDKConfiguration sdkConfiguration;

    Services(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create Service
     * 
     * <p>Create a new service.
     * 
     * @return The call builder
     */
    public ServiceCreateApiRequestBuilder create() {
        return new ServiceCreateApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Create Service
     * 
     * <p>Create a new service.
     * 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ServiceCreateApiResponse createDirect() throws Exception {
        return create(null);
    }

    /**
     * Create Service
     * 
     * <p>Create a new service.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ServiceCreateApiResponse create(@Nullable ServiceInput request) throws Exception {
        RequestOperation<ServiceInput, ServiceCreateApiResponse> operation
              = new ServiceCreateApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update Service
     * 
     * <p>Update a service.
     * 
     * @return The call builder
     */
    public ServiceUpdateApiRequestBuilder update() {
        return new ServiceUpdateApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Update Service
     * 
     * <p>Update a service.
     * 
     * @param serviceId A service ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ServiceUpdateApiResponse update(@Nonnull String serviceId) throws Exception {
        return update(serviceId, null);
    }

    /**
     * Update Service
     * 
     * <p>Update a service.
     * 
     * @param serviceId A service ID.
     * @param service 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ServiceUpdateApiResponse update(@Nonnull String serviceId, @Nullable ServiceInput service) throws Exception {
        ServiceUpdateApiRequest request = new ServiceUpdateApiRequest(serviceId, service);
        RequestOperation<ServiceUpdateApiRequest, ServiceUpdateApiResponse> operation
              = new ServiceUpdateApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Delete Service ⚡
     * 
     * <p>Delete a service.
     * 
     * @return The call builder
     */
    public ServiceDeleteApiRequestBuilder delete() {
        return new ServiceDeleteApiRequestBuilder(sdkConfiguration);
    }

    /**
     * Delete Service ⚡
     * 
     * <p>Delete a service.
     * 
     * @param serviceId A service ID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ServiceDeleteApiResponse delete(@Nonnull String serviceId) throws Exception {
        ServiceDeleteApiRequest request = new ServiceDeleteApiRequest(serviceId);
        RequestOperation<ServiceDeleteApiRequest, ServiceDeleteApiResponse> operation
              = new ServiceDeleteApiOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}
